
AVR_ATMEGA32_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000448c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000448c  00004520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ae  008000ae  0000456e  2**0
                  ALLOC
  3 .stab         00006984  00000000  00000000  00004570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003364  00000000  00000000  0000aef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000e547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0001058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0001168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00012790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00012a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_1>
       8:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_2>
       c:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <main>
      8a:	0c 94 44 22 	jmp	0x4488	; 0x4488 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 89 1f 	jmp	0x3f12	; 0x3f12 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXT_INTX_INITIALIZE>:
static Std_ReturnType EXT_INT0_SET_ISR(const EXT_INTX_T *intx);


/*************** Main Functions  *****************/

Std_ReturnType EXT_INTX_INITIALIZE(const EXT_INTX_T *intx){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EXT_INTX_INITIALIZE+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	11 f4       	brne	.+4      	; 0xcbe <EXT_INTX_INITIALIZE+0x20>
		Retval = E_NOT_OK;
     cba:	19 82       	std	Y+1, r1	; 0x01
     cbc:	1e c0       	rjmp	.+60     	; 0xcfa <EXT_INTX_INITIALIZE+0x5c>
	}
	else{
		Retval = EXT_INTX_DISABLE(intx);
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	0e 94 f0 06 	call	0xde0	; 0xde0 <EXT_INTX_DISABLE>
     cc6:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_CLEAR_FLAG(intx);
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	0e 94 95 07 	call	0xf2a	; 0xf2a <EXT_INTX_CLEAR_FLAG>
     cd0:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_PIN_INITIALIZE(intx);
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	0e 94 0f 09 	call	0x121e	; 0x121e <EXT_INTX_PIN_INITIALIZE>
     cda:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_SET_EDGE(intx);
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	0e 94 dd 07 	call	0xfba	; 0xfba <EXT_INTX_SET_EDGE>
     ce4:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_SET_HANDLER(intx);
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <EXT_INTX_SET_HANDLER>
     cee:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_ENABLE(intx);
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	0e 94 38 07 	call	0xe70	; 0xe70 <EXT_INTX_ENABLE>
     cf8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <EXT_INTX_DE_INITIALIZE>:

Std_ReturnType EXT_INTX_DE_INITIALIZE(const EXT_INTX_T *intx){
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <EXT_INTX_DE_INITIALIZE+0x6>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9b 83       	std	Y+3, r25	; 0x03
     d16:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	11 f4       	brne	.+4      	; 0xd28 <EXT_INTX_DE_INITIALIZE+0x20>
		Retval = E_NOT_OK;
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <EXT_INTX_DE_INITIALIZE+0x34>
	}
	else{
		Retval = EXT_INTX_DISABLE(intx);
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	0e 94 f0 06 	call	0xde0	; 0xde0 <EXT_INTX_DISABLE>
     d30:	89 83       	std	Y+1, r24	; 0x01
		Retval = EXT_INTX_CLEAR_FLAG(intx);
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	0e 94 95 07 	call	0xf2a	; 0xf2a <EXT_INTX_CLEAR_FLAG>
     d3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <ISR_INT0_TEMP>:

void ISR_INT0_TEMP(void){
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	EXT_INT0_CLEAR_FLAG();
     d52:	aa e5       	ldi	r26, 0x5A	; 90
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e5       	ldi	r30, 0x5A	; 90
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c 93       	st	X, r24

	if(int0_isr_func){
     d60:	80 91 b4 00 	lds	r24, 0x00B4
     d64:	90 91 b5 00 	lds	r25, 0x00B5
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	29 f0       	breq	.+10     	; 0xd76 <ISR_INT0_TEMP+0x2c>
		int0_isr_func();
     d6c:	e0 91 b4 00 	lds	r30, 0x00B4
     d70:	f0 91 b5 00 	lds	r31, 0x00B5
     d74:	09 95       	icall
	}
	else{/*Nothing*/}
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <ISR_INT1_TEMP>:

void ISR_INT1_TEMP(void){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
	EXT_INT1_CLEAR_FLAG();
     d84:	aa e5       	ldi	r26, 0x5A	; 90
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e5       	ldi	r30, 0x5A	; 90
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	8c 93       	st	X, r24

	if(int1_isr_func){
     d92:	80 91 b2 00 	lds	r24, 0x00B2
     d96:	90 91 b3 00 	lds	r25, 0x00B3
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <ISR_INT1_TEMP+0x2c>
		int1_isr_func();
     d9e:	e0 91 b2 00 	lds	r30, 0x00B2
     da2:	f0 91 b3 00 	lds	r31, 0x00B3
     da6:	09 95       	icall
	}
	else{/*Nothing*/}
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <ISR_INT2_TEMP>:

void ISR_INT2_TEMP(void){
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	EXT_INT2_CLEAR_FLAG();
     db6:	aa e5       	ldi	r26, 0x5A	; 90
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ea e5       	ldi	r30, 0x5A	; 90
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	8c 93       	st	X, r24

	if(int2_isr_func){
     dc4:	80 91 b0 00 	lds	r24, 0x00B0
     dc8:	90 91 b1 00 	lds	r25, 0x00B1
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	29 f0       	breq	.+10     	; 0xdda <ISR_INT2_TEMP+0x2c>
		int2_isr_func();
     dd0:	e0 91 b0 00 	lds	r30, 0x00B0
     dd4:	f0 91 b1 00 	lds	r31, 0x00B1
     dd8:	09 95       	icall
	}
	else{/*Nothing*/}
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <EXT_INTX_DISABLE>:

/*************** Helper Functions  *****************/

static Std_ReturnType EXT_INTX_DISABLE(const EXT_INTX_T *intx){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <EXT_INTX_DISABLE+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <EXT_INTX_DISABLE+0x8>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	11 f4       	brne	.+4      	; 0xe02 <EXT_INTX_DISABLE+0x22>
		Retval = E_NOT_OK;
     dfe:	19 82       	std	Y+1, r1	; 0x01
     e00:	2e c0       	rjmp	.+92     	; 0xe5e <EXT_INTX_DISABLE+0x7e>
	}
	else{
		switch(intx->src){
     e02:	ea 81       	ldd	r30, Y+2	; 0x02
     e04:	fb 81       	ldd	r31, Y+3	; 0x03
     e06:	83 81       	ldd	r24, Z+3	; 0x03
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3d 83       	std	Y+5, r19	; 0x05
     e0e:	2c 83       	std	Y+4, r18	; 0x04
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	89 f0       	breq	.+34     	; 0xe3c <EXT_INTX_DISABLE+0x5c>
     e1a:	2c 81       	ldd	r18, Y+4	; 0x04
     e1c:	3d 81       	ldd	r19, Y+5	; 0x05
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	a1 f0       	breq	.+40     	; 0xe4c <EXT_INTX_DISABLE+0x6c>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	c1 f4       	brne	.+48     	; 0xe5c <EXT_INTX_DISABLE+0x7c>
			case INT0_N:
				EXT_INT0_SET_DISABLE();
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <EXT_INTX_DISABLE+0x7e>
				break;
			case INT1_N:
				EXT_INT1_SET_DISABLE();
     e3c:	ab e5       	ldi	r26, 0x5B	; 91
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e5       	ldi	r30, 0x5B	; 91
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 77       	andi	r24, 0x7F	; 127
     e48:	8c 93       	st	X, r24
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <EXT_INTX_DISABLE+0x7e>
				break;
			case INT2_N:
				EXT_INT2_SET_DISABLE();
     e4c:	ab e5       	ldi	r26, 0x5B	; 91
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e5       	ldi	r30, 0x5B	; 91
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8f 7d       	andi	r24, 0xDF	; 223
     e58:	8c 93       	st	X, r24
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <EXT_INTX_DISABLE+0x7e>
				break;
			default:
				Retval = E_NOT_OK;
     e5c:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}
	return Retval;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <EXT_INTX_ENABLE>:

static Std_ReturnType EXT_INTX_ENABLE(const EXT_INTX_T *intx){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <EXT_INTX_ENABLE+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <EXT_INTX_ENABLE+0x8>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	9b 83       	std	Y+3, r25	; 0x03
     e80:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	11 f4       	brne	.+4      	; 0xe92 <EXT_INTX_ENABLE+0x22>
		Retval = E_NOT_OK;
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	43 c0       	rjmp	.+134    	; 0xf18 <EXT_INTX_ENABLE+0xa8>
	}
	else{
		switch(intx->src){
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	83 81       	ldd	r24, Z+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3d 83       	std	Y+5, r19	; 0x05
     e9e:	2c 83       	std	Y+4, r18	; 0x04
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	c1 f0       	breq	.+48     	; 0xeda <EXT_INTX_ENABLE+0x6a>
     eaa:	2c 81       	ldd	r18, Y+4	; 0x04
     eac:	3d 81       	ldd	r19, Y+5	; 0x05
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	11 f1       	breq	.+68     	; 0xef8 <EXT_INTX_ENABLE+0x88>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f5       	brne	.+90     	; 0xf16 <EXT_INTX_ENABLE+0xa6>
			case INT0_N:
				GLOBAL_INTERRUPT_ENABLE_SIGNAL();
     ebc:	af e5       	ldi	r26, 0x5F	; 95
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e5       	ldi	r30, 0x5F	; 95
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
				EXT_INT0_SET_ENABLE();
     eca:	ab e5       	ldi	r26, 0x5B	; 91
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e5       	ldi	r30, 0x5B	; 91
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24
     ed8:	1f c0       	rjmp	.+62     	; 0xf18 <EXT_INTX_ENABLE+0xa8>
				break;
			case INT1_N:
				GLOBAL_INTERRUPT_ENABLE_SIGNAL();
     eda:	af e5       	ldi	r26, 0x5F	; 95
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ef e5       	ldi	r30, 0x5F	; 95
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
				EXT_INT1_SET_ENABLE();
     ee8:	ab e5       	ldi	r26, 0x5B	; 91
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	eb e5       	ldi	r30, 0x5B	; 91
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	8c 93       	st	X, r24
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <EXT_INTX_ENABLE+0xa8>
				break;
			case INT2_N:
				GLOBAL_INTERRUPT_ENABLE_SIGNAL();
     ef8:	af e5       	ldi	r26, 0x5F	; 95
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ef e5       	ldi	r30, 0x5F	; 95
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	8c 93       	st	X, r24
				EXT_INT2_SET_ENABLE();
     f06:	ab e5       	ldi	r26, 0x5B	; 91
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	eb e5       	ldi	r30, 0x5B	; 91
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <EXT_INTX_ENABLE+0xa8>
				break;
			default:
				Retval = E_NOT_OK;
     f16:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}
	return Retval;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <EXT_INTX_CLEAR_FLAG>:

static Std_ReturnType EXT_INTX_CLEAR_FLAG(const EXT_INTX_T *intx){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <EXT_INTX_CLEAR_FLAG+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <EXT_INTX_CLEAR_FLAG+0x8>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9b 83       	std	Y+3, r25	; 0x03
     f3a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	9b 81       	ldd	r25, Y+3	; 0x03
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	11 f4       	brne	.+4      	; 0xf4c <EXT_INTX_CLEAR_FLAG+0x22>
		Retval = E_NOT_OK;
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	2e c0       	rjmp	.+92     	; 0xfa8 <EXT_INTX_CLEAR_FLAG+0x7e>
	}
	else{
		switch(intx->src){
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	83 81       	ldd	r24, Z+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3d 83       	std	Y+5, r19	; 0x05
     f58:	2c 83       	std	Y+4, r18	; 0x04
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	89 f0       	breq	.+34     	; 0xf86 <EXT_INTX_CLEAR_FLAG+0x5c>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <EXT_INTX_CLEAR_FLAG+0x6c>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	c1 f4       	brne	.+48     	; 0xfa6 <EXT_INTX_CLEAR_FLAG+0x7c>
			case INT0_N:
				EXT_INT0_CLEAR_FLAG();
     f76:	aa e5       	ldi	r26, 0x5A	; 90
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ea e5       	ldi	r30, 0x5A	; 90
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8c 93       	st	X, r24
     f84:	11 c0       	rjmp	.+34     	; 0xfa8 <EXT_INTX_CLEAR_FLAG+0x7e>
				break;
			case INT1_N:
				EXT_INT1_CLEAR_FLAG();
     f86:	aa e5       	ldi	r26, 0x5A	; 90
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e5       	ldi	r30, 0x5A	; 90
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	8c 93       	st	X, r24
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <EXT_INTX_CLEAR_FLAG+0x7e>
				break;
			case INT2_N:
				EXT_INT2_CLEAR_FLAG();
     f96:	aa e5       	ldi	r26, 0x5A	; 90
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ea e5       	ldi	r30, 0x5A	; 90
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 62       	ori	r24, 0x20	; 32
     fa2:	8c 93       	st	X, r24
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <EXT_INTX_CLEAR_FLAG+0x7e>
				break;
			default:
				Retval = E_NOT_OK;
     fa6:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}
	return Retval;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <EXT_INTX_SET_EDGE>:

static Std_ReturnType EXT_INTX_SET_EDGE(const EXT_INTX_T *intx){
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <EXT_INTX_SET_EDGE+0x6>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <EXT_INTX_SET_EDGE+0x8>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9b 83       	std	Y+3, r25	; 0x03
     fca:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == intx){
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <EXT_INTX_SET_EDGE+0x22>
			Retval = E_NOT_OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	d9 c0       	rjmp	.+434    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
		}
		else{
			switch(intx->src){
     fdc:	ea 81       	ldd	r30, Y+2	; 0x02
     fde:	fb 81       	ldd	r31, Y+3	; 0x03
     fe0:	83 81       	ldd	r24, Z+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3d 83       	std	Y+5, r19	; 0x05
     fe8:	2c 83       	std	Y+4, r18	; 0x04
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <EXT_INTX_SET_EDGE+0x3c>
     ff4:	5d c0       	rjmp	.+186    	; 0x10b0 <EXT_INTX_SET_EDGE+0xf6>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <EXT_INTX_SET_EDGE+0x48>
    1000:	a9 c0       	rjmp	.+338    	; 0x1154 <EXT_INTX_SET_EDGE+0x19a>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f0       	breq	.+2      	; 0x100c <EXT_INTX_SET_EDGE+0x52>
    100a:	c0 c0       	rjmp	.+384    	; 0x118c <EXT_INTX_SET_EDGE+0x1d2>
				case INT0_N:
					if(LOW_LEVEL == intx->action){
    100c:	ea 81       	ldd	r30, Y+2	; 0x02
    100e:	fb 81       	ldd	r31, Y+3	; 0x03
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	88 23       	and	r24, r24
    1014:	79 f4       	brne	.+30     	; 0x1034 <EXT_INTX_SET_EDGE+0x7a>
						EXT_INT0_LOW_LEVEL_ISC00();
    1016:	a5 e5       	ldi	r26, 0x55	; 85
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e5       	ldi	r30, 0x55	; 85
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	8c 93       	st	X, r24
						EXT_INT0_LOW_LEVEL_ISC01();
    1024:	a5 e5       	ldi	r26, 0x55	; 85
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e5 e5       	ldi	r30, 0x55	; 85
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8d 7f       	andi	r24, 0xFD	; 253
    1030:	8c 93       	st	X, r24
    1032:	ad c0       	rjmp	.+346    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(ANY_CHANGE == intx->action){
    1034:	ea 81       	ldd	r30, Y+2	; 0x02
    1036:	fb 81       	ldd	r31, Y+3	; 0x03
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	79 f4       	brne	.+30     	; 0x105c <EXT_INTX_SET_EDGE+0xa2>
						EXT_INT0_LOGICAL_CHANGE_ISC00();
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	8c 93       	st	X, r24
						EXT_INT0_LOGICAL_CHANGE_ISC01();
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	8c 93       	st	X, r24
    105a:	99 c0       	rjmp	.+306    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(FALLING_EDGE == intx->action){
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	79 f4       	brne	.+30     	; 0x1084 <EXT_INTX_SET_EDGE+0xca>
						EXT_INT0_FALLING_EDGE_ISC00();
    1066:	a5 e5       	ldi	r26, 0x55	; 85
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e5       	ldi	r30, 0x55	; 85
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	8c 93       	st	X, r24
						EXT_INT0_FALLING_EDGE_ISC01();
    1074:	a5 e5       	ldi	r26, 0x55	; 85
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e5       	ldi	r30, 0x55	; 85
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	8c 93       	st	X, r24
    1082:	85 c0       	rjmp	.+266    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(RISING_EDGE == intx->action){
    1084:	ea 81       	ldd	r30, Y+2	; 0x02
    1086:	fb 81       	ldd	r31, Y+3	; 0x03
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	79 f4       	brne	.+30     	; 0x10ac <EXT_INTX_SET_EDGE+0xf2>
						EXT_INT0_RISING_EDGE_ISC00();
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	81 60       	ori	r24, 0x01	; 1
    109a:	8c 93       	st	X, r24
						EXT_INT0_RISING_EDGE_ISC01();
    109c:	a5 e5       	ldi	r26, 0x55	; 85
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e5 e5       	ldi	r30, 0x55	; 85
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	8c 93       	st	X, r24
    10aa:	71 c0       	rjmp	.+226    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else{
						Retval = E_NOT_OK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	6f c0       	rjmp	.+222    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					break;
				case INT1_N:
					if(LOW_LEVEL == intx->action){
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	88 23       	and	r24, r24
    10b8:	79 f4       	brne	.+30     	; 0x10d8 <EXT_INTX_SET_EDGE+0x11e>
						EXT_INT1_LOW_LEVEL_ISC10();
    10ba:	a5 e5       	ldi	r26, 0x55	; 85
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e5       	ldi	r30, 0x55	; 85
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	8c 93       	st	X, r24
						EXT_INT1_LOW_LEVEL_ISC11();
    10c8:	a5 e5       	ldi	r26, 0x55	; 85
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e5       	ldi	r30, 0x55	; 85
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	87 7f       	andi	r24, 0xF7	; 247
    10d4:	8c 93       	st	X, r24
    10d6:	5b c0       	rjmp	.+182    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(ANY_CHANGE == intx->action){
    10d8:	ea 81       	ldd	r30, Y+2	; 0x02
    10da:	fb 81       	ldd	r31, Y+3	; 0x03
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	79 f4       	brne	.+30     	; 0x1100 <EXT_INTX_SET_EDGE+0x146>
						EXT_INT1_LOGICAL_CHANGE_ISC10();
    10e2:	a5 e5       	ldi	r26, 0x55	; 85
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e5       	ldi	r30, 0x55	; 85
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	84 60       	ori	r24, 0x04	; 4
    10ee:	8c 93       	st	X, r24
						EXT_INT1_LOGICAL_CHANGE_ISC11();
    10f0:	a5 e5       	ldi	r26, 0x55	; 85
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e5       	ldi	r30, 0x55	; 85
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	87 7f       	andi	r24, 0xF7	; 247
    10fc:	8c 93       	st	X, r24
    10fe:	47 c0       	rjmp	.+142    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(FALLING_EDGE == intx->action){
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	79 f4       	brne	.+30     	; 0x1128 <EXT_INTX_SET_EDGE+0x16e>
						EXT_INT1_FALLING_EDGE_ISC10();
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8b 7f       	andi	r24, 0xFB	; 251
    1116:	8c 93       	st	X, r24
						EXT_INT1_FALLING_EDGE_ISC11();
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	88 60       	ori	r24, 0x08	; 8
    1124:	8c 93       	st	X, r24
    1126:	33 c0       	rjmp	.+102    	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(RISING_EDGE == intx->action){
    1128:	ea 81       	ldd	r30, Y+2	; 0x02
    112a:	fb 81       	ldd	r31, Y+3	; 0x03
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	79 f4       	brne	.+30     	; 0x1150 <EXT_INTX_SET_EDGE+0x196>
						EXT_INT1_RISING_EDGE_ISC10();
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	84 60       	ori	r24, 0x04	; 4
    113e:	8c 93       	st	X, r24
						EXT_INT1_RISING_EDGE_ISC11();
    1140:	a5 e5       	ldi	r26, 0x55	; 85
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e5       	ldi	r30, 0x55	; 85
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 60       	ori	r24, 0x08	; 8
    114c:	8c 93       	st	X, r24
    114e:	1f c0       	rjmp	.+62     	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else{
						Retval = E_NOT_OK;
    1150:	19 82       	std	Y+1, r1	; 0x01
    1152:	1d c0       	rjmp	.+58     	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					break;
				case INT2_N:
					if(FALLING_EDGE == intx->action){
    1154:	ea 81       	ldd	r30, Y+2	; 0x02
    1156:	fb 81       	ldd	r31, Y+3	; 0x03
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	41 f4       	brne	.+16     	; 0x116e <EXT_INTX_SET_EDGE+0x1b4>
						EXT_INT2_FALLING_EDGE_ISC2();
    115e:	a4 e5       	ldi	r26, 0x54	; 84
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 e5       	ldi	r30, 0x54	; 84
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8f 7b       	andi	r24, 0xBF	; 191
    116a:	8c 93       	st	X, r24
    116c:	10 c0       	rjmp	.+32     	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else if(RISING_EDGE == intx->action){
    116e:	ea 81       	ldd	r30, Y+2	; 0x02
    1170:	fb 81       	ldd	r31, Y+3	; 0x03
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	41 f4       	brne	.+16     	; 0x1188 <EXT_INTX_SET_EDGE+0x1ce>
						EXT_INT2_RISING_EDGE_ISC2();
    1178:	a4 e5       	ldi	r26, 0x54	; 84
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e4 e5       	ldi	r30, 0x54	; 84
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 64       	ori	r24, 0x40	; 64
    1184:	8c 93       	st	X, r24
    1186:	03 c0       	rjmp	.+6      	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					else{
						Retval = E_NOT_OK;
    1188:	19 82       	std	Y+1, r1	; 0x01
    118a:	01 c0       	rjmp	.+2      	; 0x118e <EXT_INTX_SET_EDGE+0x1d4>
					}
					break;
				default:
					Retval = E_NOT_OK;
    118c:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
		}
		return Retval;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <EXT_INTX_SET_HANDLER>:

static Std_ReturnType EXT_INTX_SET_HANDLER(const EXT_INTX_T *intx){
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <EXT_INTX_SET_HANDLER+0x6>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <EXT_INTX_SET_HANDLER+0x8>
    11a8:	0f 92       	push	r0
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <EXT_INTX_SET_HANDLER+0x22>
		Retval = E_NOT_OK;
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	25 c0       	rjmp	.+74     	; 0x120c <EXT_INTX_SET_HANDLER+0x6c>
	}
	else{
		switch(intx->src){
    11c2:	ea 81       	ldd	r30, Y+2	; 0x02
    11c4:	fb 81       	ldd	r31, Y+3	; 0x03
    11c6:	83 81       	ldd	r24, Z+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <EXT_INTX_SET_HANDLER+0x56>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	71 f0       	breq	.+28     	; 0x1200 <EXT_INTX_SET_HANDLER+0x60>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	79 f4       	brne	.+30     	; 0x120a <EXT_INTX_SET_HANDLER+0x6a>
			case INT0_N:
				EXT_INT0_SET_ISR(intx);
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	0e 94 2c 09 	call	0x1258	; 0x1258 <EXT_INT0_SET_ISR>
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <EXT_INTX_SET_HANDLER+0x6c>
				break;
			case INT1_N:
				EXT_INT1_SET_ISR(intx);
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	0e 94 4b 09 	call	0x1296	; 0x1296 <EXT_INT1_SET_ISR>
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <EXT_INTX_SET_HANDLER+0x6c>
				break;
			case INT2_N:
				EXT_INT2_SET_ISR(intx);
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <EXT_INT2_SET_ISR>
    1208:	01 c0       	rjmp	.+2      	; 0x120c <EXT_INTX_SET_HANDLER+0x6c>
				break;
			default:
				Retval = E_NOT_OK;
    120a:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}
	return Retval;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <EXT_INTX_PIN_INITIALIZE>:

static Std_ReturnType EXT_INTX_PIN_INITIALIZE(const EXT_INTX_T *intx){
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <EXT_INTX_PIN_INITIALIZE+0x6>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	11 f4       	brne	.+4      	; 0x123e <EXT_INTX_PIN_INITIALIZE+0x20>
		Retval = E_NOT_OK;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	06 c0       	rjmp	.+12     	; 0x124a <EXT_INTX_PIN_INITIALIZE+0x2c>
	}
	else{
		Retval = GPIO_PIN_DIRECTION_INITIALIZE(&(intx->pin));
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	9b 81       	ldd	r25, Y+3	; 0x03
    1242:	04 96       	adiw	r24, 0x04	; 4
    1244:	0e 94 49 0a 	call	0x1492	; 0x1492 <GPIO_PIN_DIRECTION_INITIALIZE>
    1248:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <EXT_INT0_SET_ISR>:

static Std_ReturnType EXT_INT0_SET_ISR(const EXT_INTX_T *intx){
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <EXT_INT0_SET_ISR+0x6>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9b 83       	std	Y+3, r25	; 0x03
    1266:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	11 f4       	brne	.+4      	; 0x1278 <EXT_INT0_SET_ISR+0x20>
		Retval = E_NOT_OK;
    1274:	19 82       	std	Y+1, r1	; 0x01
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <EXT_INT0_SET_ISR+0x30>
	}
	else{
		int0_isr_func = intx->INTX_HANDLE;
    1278:	ea 81       	ldd	r30, Y+2	; 0x02
    127a:	fb 81       	ldd	r31, Y+3	; 0x03
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	90 93 b5 00 	sts	0x00B5, r25
    1284:	80 93 b4 00 	sts	0x00B4, r24
	}
	return Retval;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <EXT_INT1_SET_ISR>:

static Std_ReturnType EXT_INT1_SET_ISR(const EXT_INTX_T *intx){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <EXT_INT1_SET_ISR+0x6>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9b 83       	std	Y+3, r25	; 0x03
    12a4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <EXT_INT1_SET_ISR+0x20>
		Retval = E_NOT_OK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <EXT_INT1_SET_ISR+0x30>
	}
	else{
		int1_isr_func = intx->INTX_HANDLE;
    12b6:	ea 81       	ldd	r30, Y+2	; 0x02
    12b8:	fb 81       	ldd	r31, Y+3	; 0x03
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	90 93 b3 00 	sts	0x00B3, r25
    12c2:	80 93 b2 00 	sts	0x00B2, r24
	}
	return Retval;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <EXT_INT2_SET_ISR>:

static Std_ReturnType EXT_INT2_SET_ISR(const EXT_INTX_T *intx){
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <EXT_INT2_SET_ISR+0x6>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == intx){
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <EXT_INT2_SET_ISR+0x20>
		Retval = E_NOT_OK;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <EXT_INT2_SET_ISR+0x30>
	}
	else{
		int2_isr_func = intx->INTX_HANDLE;
    12f4:	ea 81       	ldd	r30, Y+2	; 0x02
    12f6:	fb 81       	ldd	r31, Y+3	; 0x03
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	90 93 b1 00 	sts	0x00B1, r25
    1300:	80 93 b0 00 	sts	0x00B0, r24
	}
	return Retval;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <__vector_1>:
 */


#include "HAL_INTERRUPT_MNG.h"

ISR(INT0_vect){
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	if ((INTERRUPT_OCCUR == READ_BIT(GIFR, INTF0)) &&
    133c:	ea e5       	ldi	r30, 0x5A	; 90
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 95       	swap	r24
    1344:	86 95       	lsr	r24
    1346:	86 95       	lsr	r24
    1348:	83 70       	andi	r24, 0x03	; 3
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	90 70       	andi	r25, 0x00	; 0
    1352:	88 23       	and	r24, r24
    1354:	79 f0       	breq	.+30     	; 0x1374 <__vector_1+0x62>
    1356:	eb e5       	ldi	r30, 0x5B	; 91
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	82 95       	swap	r24
    135e:	86 95       	lsr	r24
    1360:	86 95       	lsr	r24
    1362:	83 70       	andi	r24, 0x03	; 3
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	11 f0       	breq	.+4      	; 0x1374 <__vector_1+0x62>
	        (INTERRUPT_ENABLE == READ_BIT(GICR, INT0))) {
			ISR_INT0_TEMP();
    1370:	0e 94 a5 06 	call	0xd4a	; 0xd4a <ISR_INT0_TEMP>
	    }
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	ff 91       	pop	r31
    137a:	ef 91       	pop	r30
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <__vector_2>:

ISR(INT1_vect){
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	if ((INTERRUPT_OCCUR == READ_BIT(GIFR, INTF1)) &&
    13c4:	ea e5       	ldi	r30, 0x5A	; 90
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	88 1f       	adc	r24, r24
    13cc:	88 27       	eor	r24, r24
    13ce:	88 1f       	adc	r24, r24
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	51 f4       	brne	.+20     	; 0x13e8 <__vector_2+0x4e>
    13d4:	eb e5       	ldi	r30, 0x5B	; 91
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 1f       	adc	r24, r24
    13dc:	88 27       	eor	r24, r24
    13de:	88 1f       	adc	r24, r24
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__vector_2+0x4e>
	        (INTERRUPT_ENABLE == READ_BIT(GICR, INT1))) {
			ISR_INT1_TEMP();
    13e4:	0e 94 be 06 	call	0xd7c	; 0xd7c <ISR_INT1_TEMP>
	    }
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_3>:

ISR(INT2_vect){
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	if ((INTERRUPT_OCCUR == READ_BIT(GIFR, INTF2)) &&
    1438:	ea e5       	ldi	r30, 0x5A	; 90
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	82 95       	swap	r24
    1440:	86 95       	lsr	r24
    1442:	87 70       	andi	r24, 0x07	; 7
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	88 23       	and	r24, r24
    144e:	71 f0       	breq	.+28     	; 0x146c <__vector_3+0x5e>
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	82 95       	swap	r24
    1458:	86 95       	lsr	r24
    145a:	87 70       	andi	r24, 0x07	; 7
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	88 23       	and	r24, r24
    1466:	11 f0       	breq	.+4      	; 0x146c <__vector_3+0x5e>
	        (INTERRUPT_ENABLE == READ_BIT(GICR, INT2))) {
			ISR_INT2_TEMP();
    1468:	0e 94 d7 06 	call	0xdae	; 0xdae <ISR_INT2_TEMP>
	    }
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	bf 91       	pop	r27
    1476:	af 91       	pop	r26
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	7f 91       	pop	r23
    147e:	6f 91       	pop	r22
    1480:	5f 91       	pop	r21
    1482:	4f 91       	pop	r20
    1484:	3f 91       	pop	r19
    1486:	2f 91       	pop	r18
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <GPIO_PIN_DIRECTION_INITIALIZE>:
volatile uint8 *PORT_REG[] = {&PORTA,&PORTB,&PORTC,&PORTD};

						/*Pin Functions*/

#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_DIRECTION_INITIALIZE (const PIN_CFG_T *Pin){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <GPIO_PIN_DIRECTION_INITIALIZE+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_PIN_DIRECTION_INITIALIZE+0x8>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX)){
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <GPIO_PIN_DIRECTION_INITIALIZE+0x36>
    14b0:	ea 81       	ldd	r30, Y+2	; 0x02
    14b2:	fb 81       	ldd	r31, Y+3	; 0x03
    14b4:	80 81       	ld	r24, Z
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	87 70       	andi	r24, 0x07	; 7
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	91 05       	cpc	r25, r1
    14c6:	14 f0       	brlt	.+4      	; 0x14cc <GPIO_PIN_DIRECTION_INITIALIZE+0x3a>
		Retval = E_NOT_OK;
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	7a c0       	rjmp	.+244    	; 0x15c0 <GPIO_PIN_DIRECTION_INITIALIZE+0x12e>
	}
	else{
			switch(Pin->DIRECTION){
    14cc:	ea 81       	ldd	r30, Y+2	; 0x02
    14ce:	fb 81       	ldd	r31, Y+3	; 0x03
    14d0:	80 81       	ld	r24, Z
    14d2:	82 95       	swap	r24
    14d4:	86 95       	lsr	r24
    14d6:	86 95       	lsr	r24
    14d8:	83 70       	andi	r24, 0x03	; 3
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <GPIO_PIN_DIRECTION_INITIALIZE+0x66>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	99 f1       	breq	.+102    	; 0x155c <GPIO_PIN_DIRECTION_INITIALIZE+0xca>
    14f6:	63 c0       	rjmp	.+198    	; 0x15be <GPIO_PIN_DIRECTION_INITIALIZE+0x12c>
			case GPIO_INPUT:
				CLEAR_BIT(*(DDR_REG[Pin->PORT]),Pin->PIN);
    14f8:	ea 81       	ldd	r30, Y+2	; 0x02
    14fa:	fb 81       	ldd	r31, Y+3	; 0x03
    14fc:	80 81       	ld	r24, Z
    14fe:	87 70       	andi	r24, 0x07	; 7
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	fc 01       	movw	r30, r24
    150a:	e5 59       	subi	r30, 0x95	; 149
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	a0 81       	ld	r26, Z
    1510:	b1 81       	ldd	r27, Z+1	; 0x01
    1512:	ea 81       	ldd	r30, Y+2	; 0x02
    1514:	fb 81       	ldd	r31, Y+3	; 0x03
    1516:	80 81       	ld	r24, Z
    1518:	87 70       	andi	r24, 0x07	; 7
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	fc 01       	movw	r30, r24
    1524:	e5 59       	subi	r30, 0x95	; 149
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	01 90       	ld	r0, Z+
    152a:	f0 81       	ld	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	ea 81       	ldd	r30, Y+2	; 0x02
    1534:	fb 81       	ldd	r31, Y+3	; 0x03
    1536:	80 81       	ld	r24, Z
    1538:	86 95       	lsr	r24
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	87 70       	andi	r24, 0x07	; 7
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_PIN_DIRECTION_INITIALIZE+0xbe>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_PIN_DIRECTION_INITIALIZE+0xba>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	32 c0       	rjmp	.+100    	; 0x15c0 <GPIO_PIN_DIRECTION_INITIALIZE+0x12e>
				break;
			case GPIO_OUTPUT:
				SET_BIT(*(DDR_REG[Pin->PORT]),Pin->PIN);
    155c:	ea 81       	ldd	r30, Y+2	; 0x02
    155e:	fb 81       	ldd	r31, Y+3	; 0x03
    1560:	80 81       	ld	r24, Z
    1562:	87 70       	andi	r24, 0x07	; 7
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	fc 01       	movw	r30, r24
    156e:	e5 59       	subi	r30, 0x95	; 149
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	a0 81       	ld	r26, Z
    1574:	b1 81       	ldd	r27, Z+1	; 0x01
    1576:	ea 81       	ldd	r30, Y+2	; 0x02
    1578:	fb 81       	ldd	r31, Y+3	; 0x03
    157a:	80 81       	ld	r24, Z
    157c:	87 70       	andi	r24, 0x07	; 7
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	fc 01       	movw	r30, r24
    1588:	e5 59       	subi	r30, 0x95	; 149
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	01 90       	ld	r0, Z+
    158e:	f0 81       	ld	r31, Z
    1590:	e0 2d       	mov	r30, r0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	80 81       	ld	r24, Z
    159c:	86 95       	lsr	r24
    159e:	86 95       	lsr	r24
    15a0:	86 95       	lsr	r24
    15a2:	87 70       	andi	r24, 0x07	; 7
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_PIN_DIRECTION_INITIALIZE+0x122>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_PIN_DIRECTION_INITIALIZE+0x11e>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <GPIO_PIN_DIRECTION_INITIALIZE+0x12e>
				break;
			default:
				Retval = E_NOT_OK;
    15be:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	}
	return Retval;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <GPIO_PIN_GET_DIRECTION>:
#endif
#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_GET_DIRECTION (const PIN_CFG_T *Pin,DIRECTION_T *DIR){
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <GPIO_PIN_GET_DIRECTION+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <GPIO_PIN_GET_DIRECTION+0x8>
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	9b 83       	std	Y+3, r25	; 0x03
    15e2:	8a 83       	std	Y+2, r24	; 0x02
    15e4:	7d 83       	std	Y+5, r23	; 0x05
    15e6:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX) || NULL == DIR){
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	81 f0       	breq	.+32     	; 0x1614 <GPIO_PIN_GET_DIRECTION+0x42>
    15f4:	ea 81       	ldd	r30, Y+2	; 0x02
    15f6:	fb 81       	ldd	r31, Y+3	; 0x03
    15f8:	80 81       	ld	r24, Z
    15fa:	86 95       	lsr	r24
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	87 70       	andi	r24, 0x07	; 7
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	91 05       	cpc	r25, r1
    160a:	24 f4       	brge	.+8      	; 0x1614 <GPIO_PIN_GET_DIRECTION+0x42>
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	11 f4       	brne	.+4      	; 0x1618 <GPIO_PIN_GET_DIRECTION+0x46>
		Retval = E_NOT_OK;
    1614:	19 82       	std	Y+1, r1	; 0x01
    1616:	25 c0       	rjmp	.+74     	; 0x1662 <GPIO_PIN_GET_DIRECTION+0x90>
	}
	else{
		*DIR = READ_BIT(*(DDR_REG[Pin->PORT]),Pin->PIN);
    1618:	ea 81       	ldd	r30, Y+2	; 0x02
    161a:	fb 81       	ldd	r31, Y+3	; 0x03
    161c:	80 81       	ld	r24, Z
    161e:	87 70       	andi	r24, 0x07	; 7
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	fc 01       	movw	r30, r24
    162a:	e5 59       	subi	r30, 0x95	; 149
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	01 90       	ld	r0, Z+
    1630:	f0 81       	ld	r31, Z
    1632:	e0 2d       	mov	r30, r0
    1634:	80 81       	ld	r24, Z
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	ea 81       	ldd	r30, Y+2	; 0x02
    163c:	fb 81       	ldd	r31, Y+3	; 0x03
    163e:	80 81       	ld	r24, Z
    1640:	86 95       	lsr	r24
    1642:	86 95       	lsr	r24
    1644:	86 95       	lsr	r24
    1646:	87 70       	andi	r24, 0x07	; 7
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_PIN_GET_DIRECTION+0x82>
    1650:	55 95       	asr	r21
    1652:	47 95       	ror	r20
    1654:	8a 95       	dec	r24
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_PIN_GET_DIRECTION+0x7e>
    1658:	ca 01       	movw	r24, r20
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	ec 81       	ldd	r30, Y+4	; 0x04
    165e:	fd 81       	ldd	r31, Y+5	; 0x05
    1660:	80 83       	st	Z, r24
	}
	return Retval;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <GPIO_PIN_WRITE_LOGIC>:
#endif
#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_WRITE_LOGIC (const PIN_CFG_T *Pin,LOGIC_T LOG){
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <GPIO_PIN_WRITE_LOGIC+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <GPIO_PIN_WRITE_LOGIC+0x8>
    167c:	00 d0       	rcall	.+0      	; 0x167e <GPIO_PIN_WRITE_LOGIC+0xa>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX)){
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	61 f0       	breq	.+24     	; 0x16ac <GPIO_PIN_WRITE_LOGIC+0x38>
    1694:	ea 81       	ldd	r30, Y+2	; 0x02
    1696:	fb 81       	ldd	r31, Y+3	; 0x03
    1698:	80 81       	ld	r24, Z
    169a:	86 95       	lsr	r24
    169c:	86 95       	lsr	r24
    169e:	86 95       	lsr	r24
    16a0:	87 70       	andi	r24, 0x07	; 7
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	91 05       	cpc	r25, r1
    16aa:	14 f0       	brlt	.+4      	; 0x16b0 <GPIO_PIN_WRITE_LOGIC+0x3c>
		Retval = E_NOT_OK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	73 c0       	rjmp	.+230    	; 0x1796 <GPIO_PIN_WRITE_LOGIC+0x122>
	}
	else{
		switch(LOG){
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3e 83       	std	Y+6, r19	; 0x06
    16b8:	2d 83       	std	Y+5, r18	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	31 f0       	breq	.+12     	; 0x16ce <GPIO_PIN_WRITE_LOGIC+0x5a>
    16c2:	2d 81       	ldd	r18, Y+5	; 0x05
    16c4:	3e 81       	ldd	r19, Y+6	; 0x06
    16c6:	21 30       	cpi	r18, 0x01	; 1
    16c8:	31 05       	cpc	r19, r1
    16ca:	99 f1       	breq	.+102    	; 0x1732 <GPIO_PIN_WRITE_LOGIC+0xbe>
    16cc:	63 c0       	rjmp	.+198    	; 0x1794 <GPIO_PIN_WRITE_LOGIC+0x120>
		case GPIO_LOW:
			CLEAR_BIT(*(PORT_REG[Pin->PORT]),Pin->PIN);
    16ce:	ea 81       	ldd	r30, Y+2	; 0x02
    16d0:	fb 81       	ldd	r31, Y+3	; 0x03
    16d2:	80 81       	ld	r24, Z
    16d4:	87 70       	andi	r24, 0x07	; 7
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	fc 01       	movw	r30, r24
    16e0:	e5 58       	subi	r30, 0x85	; 133
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	a0 81       	ld	r26, Z
    16e6:	b1 81       	ldd	r27, Z+1	; 0x01
    16e8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ea:	fb 81       	ldd	r31, Y+3	; 0x03
    16ec:	80 81       	ld	r24, Z
    16ee:	87 70       	andi	r24, 0x07	; 7
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	fc 01       	movw	r30, r24
    16fa:	e5 58       	subi	r30, 0x85	; 133
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	01 90       	ld	r0, Z+
    1700:	f0 81       	ld	r31, Z
    1702:	e0 2d       	mov	r30, r0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	ea 81       	ldd	r30, Y+2	; 0x02
    170a:	fb 81       	ldd	r31, Y+3	; 0x03
    170c:	80 81       	ld	r24, Z
    170e:	86 95       	lsr	r24
    1710:	86 95       	lsr	r24
    1712:	86 95       	lsr	r24
    1714:	87 70       	andi	r24, 0x07	; 7
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_PIN_WRITE_LOGIC+0xb2>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_PIN_WRITE_LOGIC+0xae>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	32 c0       	rjmp	.+100    	; 0x1796 <GPIO_PIN_WRITE_LOGIC+0x122>
			break;
		case GPIO_HIGH:
			SET_BIT(*(PORT_REG[Pin->PORT]),Pin->PIN);
    1732:	ea 81       	ldd	r30, Y+2	; 0x02
    1734:	fb 81       	ldd	r31, Y+3	; 0x03
    1736:	80 81       	ld	r24, Z
    1738:	87 70       	andi	r24, 0x07	; 7
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	fc 01       	movw	r30, r24
    1744:	e5 58       	subi	r30, 0x85	; 133
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	a0 81       	ld	r26, Z
    174a:	b1 81       	ldd	r27, Z+1	; 0x01
    174c:	ea 81       	ldd	r30, Y+2	; 0x02
    174e:	fb 81       	ldd	r31, Y+3	; 0x03
    1750:	80 81       	ld	r24, Z
    1752:	87 70       	andi	r24, 0x07	; 7
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	fc 01       	movw	r30, r24
    175e:	e5 58       	subi	r30, 0x85	; 133
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	01 90       	ld	r0, Z+
    1764:	f0 81       	ld	r31, Z
    1766:	e0 2d       	mov	r30, r0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	ea 81       	ldd	r30, Y+2	; 0x02
    176e:	fb 81       	ldd	r31, Y+3	; 0x03
    1770:	80 81       	ld	r24, Z
    1772:	86 95       	lsr	r24
    1774:	86 95       	lsr	r24
    1776:	86 95       	lsr	r24
    1778:	87 70       	andi	r24, 0x07	; 7
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_PIN_WRITE_LOGIC+0x116>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_PIN_WRITE_LOGIC+0x112>
    178e:	84 2b       	or	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <GPIO_PIN_WRITE_LOGIC+0x122>
			break;
		default:
			Retval = E_NOT_OK;
    1794:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Retval;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
}
    1798:	26 96       	adiw	r28, 0x06	; 6
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <GPIO_PIN_READ_LOGIC>:
#endif
#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_READ_LOGIC (const PIN_CFG_T *Pin,LOGIC_T *LOG){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_PIN_READ_LOGIC+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_PIN_READ_LOGIC+0x8>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	7d 83       	std	Y+5, r23	; 0x05
    17be:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX) || NULL == LOG){
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	81 f0       	breq	.+32     	; 0x17ec <GPIO_PIN_READ_LOGIC+0x42>
    17cc:	ea 81       	ldd	r30, Y+2	; 0x02
    17ce:	fb 81       	ldd	r31, Y+3	; 0x03
    17d0:	80 81       	ld	r24, Z
    17d2:	86 95       	lsr	r24
    17d4:	86 95       	lsr	r24
    17d6:	86 95       	lsr	r24
    17d8:	87 70       	andi	r24, 0x07	; 7
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	91 05       	cpc	r25, r1
    17e2:	24 f4       	brge	.+8      	; 0x17ec <GPIO_PIN_READ_LOGIC+0x42>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <GPIO_PIN_READ_LOGIC+0x46>
		Retval = E_NOT_OK;
    17ec:	19 82       	std	Y+1, r1	; 0x01
    17ee:	25 c0       	rjmp	.+74     	; 0x183a <GPIO_PIN_READ_LOGIC+0x90>
	}
	else{
		*LOG  = READ_BIT(*(PIN_REG[Pin->PORT]),Pin->PIN);
    17f0:	ea 81       	ldd	r30, Y+2	; 0x02
    17f2:	fb 81       	ldd	r31, Y+3	; 0x03
    17f4:	80 81       	ld	r24, Z
    17f6:	87 70       	andi	r24, 0x07	; 7
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	fc 01       	movw	r30, r24
    1802:	ed 58       	subi	r30, 0x8D	; 141
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	01 90       	ld	r0, Z+
    1808:	f0 81       	ld	r31, Z
    180a:	e0 2d       	mov	r30, r0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	ea 81       	ldd	r30, Y+2	; 0x02
    1814:	fb 81       	ldd	r31, Y+3	; 0x03
    1816:	80 81       	ld	r24, Z
    1818:	86 95       	lsr	r24
    181a:	86 95       	lsr	r24
    181c:	86 95       	lsr	r24
    181e:	87 70       	andi	r24, 0x07	; 7
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <GPIO_PIN_READ_LOGIC+0x82>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <GPIO_PIN_READ_LOGIC+0x7e>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	ec 81       	ldd	r30, Y+4	; 0x04
    1836:	fd 81       	ldd	r31, Y+5	; 0x05
    1838:	80 83       	st	Z, r24
	}
	return Retval;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <GPIO_PIN_TOGGLE_LOGIC>:
#endif
#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_TOGGLE_LOGIC (const PIN_CFG_T *Pin){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <GPIO_PIN_TOGGLE_LOGIC+0x6>
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	9b 83       	std	Y+3, r25	; 0x03
    185a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX)){
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <GPIO_PIN_TOGGLE_LOGIC+0x34>
    1868:	ea 81       	ldd	r30, Y+2	; 0x02
    186a:	fb 81       	ldd	r31, Y+3	; 0x03
    186c:	80 81       	ld	r24, Z
    186e:	86 95       	lsr	r24
    1870:	86 95       	lsr	r24
    1872:	86 95       	lsr	r24
    1874:	87 70       	andi	r24, 0x07	; 7
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	91 05       	cpc	r25, r1
    187e:	14 f0       	brlt	.+4      	; 0x1884 <GPIO_PIN_TOGGLE_LOGIC+0x38>
		Retval = E_NOT_OK;
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	30 c0       	rjmp	.+96     	; 0x18e4 <GPIO_PIN_TOGGLE_LOGIC+0x98>
	}
	else{
		TOGGLE_BIT(*(PORT_REG[Pin->PORT]),Pin->PIN);
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	80 81       	ld	r24, Z
    188a:	87 70       	andi	r24, 0x07	; 7
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	fc 01       	movw	r30, r24
    1896:	e5 58       	subi	r30, 0x85	; 133
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	a0 81       	ld	r26, Z
    189c:	b1 81       	ldd	r27, Z+1	; 0x01
    189e:	ea 81       	ldd	r30, Y+2	; 0x02
    18a0:	fb 81       	ldd	r31, Y+3	; 0x03
    18a2:	80 81       	ld	r24, Z
    18a4:	87 70       	andi	r24, 0x07	; 7
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	fc 01       	movw	r30, r24
    18b0:	e5 58       	subi	r30, 0x85	; 133
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	01 90       	ld	r0, Z+
    18b6:	f0 81       	ld	r31, Z
    18b8:	e0 2d       	mov	r30, r0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	ea 81       	ldd	r30, Y+2	; 0x02
    18c0:	fb 81       	ldd	r31, Y+3	; 0x03
    18c2:	80 81       	ld	r24, Z
    18c4:	86 95       	lsr	r24
    18c6:	86 95       	lsr	r24
    18c8:	86 95       	lsr	r24
    18ca:	87 70       	andi	r24, 0x07	; 7
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_PIN_TOGGLE_LOGIC+0x90>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_PIN_TOGGLE_LOGIC+0x8c>
    18e0:	84 27       	eor	r24, r20
    18e2:	8c 93       	st	X, r24
	}
	return Retval;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <GPIO_PIN_INITIALIZE>:
#endif
#if GPIO_PIN_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PIN_INITIALIZE (const PIN_CFG_T *Pin){
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_PIN_INITIALIZE+0x6>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Pin || (Pin->PIN) >= (PORT_PIN_MAX)){
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 f0       	breq	.+24     	; 0x1926 <GPIO_PIN_INITIALIZE+0x34>
    190e:	ea 81       	ldd	r30, Y+2	; 0x02
    1910:	fb 81       	ldd	r31, Y+3	; 0x03
    1912:	80 81       	ld	r24, Z
    1914:	86 95       	lsr	r24
    1916:	86 95       	lsr	r24
    1918:	86 95       	lsr	r24
    191a:	87 70       	andi	r24, 0x07	; 7
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	88 30       	cpi	r24, 0x08	; 8
    1922:	91 05       	cpc	r25, r1
    1924:	14 f0       	brlt	.+4      	; 0x192a <GPIO_PIN_INITIALIZE+0x38>
		Retval = E_NOT_OK;
    1926:	19 82       	std	Y+1, r1	; 0x01
    1928:	12 c0       	rjmp	.+36     	; 0x194e <GPIO_PIN_INITIALIZE+0x5c>
	}
	else{
		Retval = GPIO_PIN_DIRECTION_INITIALIZE(Pin);
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	0e 94 49 0a 	call	0x1492	; 0x1492 <GPIO_PIN_DIRECTION_INITIALIZE>
    1932:	89 83       	std	Y+1, r24	; 0x01
		Retval = GPIO_PIN_WRITE_LOGIC(Pin,Pin->LOGIC);
    1934:	ea 81       	ldd	r30, Y+2	; 0x02
    1936:	fb 81       	ldd	r31, Y+3	; 0x03
    1938:	80 81       	ld	r24, Z
    193a:	88 1f       	adc	r24, r24
    193c:	88 27       	eor	r24, r24
    193e:	88 1f       	adc	r24, r24
    1940:	28 2f       	mov	r18, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	62 2f       	mov	r22, r18
    1948:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    194c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <GPIO_PORT_DIRECTION_INITIALIZE>:
#endif

						/*PORT Functions*/
#if GPIO_PORT_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PORT_DIRECTION_INITIALIZE (PORT_T PORT,uint8 DIR){
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <GPIO_PORT_DIRECTION_INITIALIZE+0x6>
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
	if(PORT >= (PORT_MAX)){
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	10 f0       	brcs	.+4      	; 0x197a <GPIO_PORT_DIRECTION_INITIALIZE+0x1e>
		Retval = E_NOT_OK;
    1976:	19 82       	std	Y+1, r1	; 0x01
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <GPIO_PORT_DIRECTION_INITIALIZE+0x38>
	}
	else{
		*(DDR_REG[PORT]) = DIR;
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	fc 01       	movw	r30, r24
    1986:	e5 59       	subi	r30, 0x95	; 149
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	01 90       	ld	r0, Z+
    198c:	f0 81       	ld	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	80 83       	st	Z, r24
	}
	return Retval;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <GPIO_PORT_GET_DIRECTION>:
#endif
#if GPIO_PORT_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PORT_GET_DIRECTION (PORT_T PORT ,uint8 *DIR){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <GPIO_PORT_GET_DIRECTION+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_PORT_GET_DIRECTION+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	7c 83       	std	Y+4, r23	; 0x04
    19b2:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
	if(PORT >= (PORT_MAX) || NULL == DIR){
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	20 f4       	brcc	.+8      	; 0x19c6 <GPIO_PORT_GET_DIRECTION+0x24>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	11 f4       	brne	.+4      	; 0x19ca <GPIO_PORT_GET_DIRECTION+0x28>
		Retval = E_NOT_OK;
    19c6:	19 82       	std	Y+1, r1	; 0x01
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <GPIO_PORT_GET_DIRECTION+0x46>
	}
	else{
		*DIR = *(DDR_REG[PORT]);
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	fc 01       	movw	r30, r24
    19d6:	e5 59       	subi	r30, 0x95	; 149
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	01 90       	ld	r0, Z+
    19dc:	f0 81       	ld	r31, Z
    19de:	e0 2d       	mov	r30, r0
    19e0:	80 81       	ld	r24, Z
    19e2:	eb 81       	ldd	r30, Y+3	; 0x03
    19e4:	fc 81       	ldd	r31, Y+4	; 0x04
    19e6:	80 83       	st	Z, r24
	}
	return Retval;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <GPIO_PORT_WRITE_LOGIC>:
#endif
#if GPIO_PORT_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PORT_WRITE_LOGIC (PORT_T PORT,uint8 LOG){
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <GPIO_PORT_WRITE_LOGIC+0x6>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	8a 83       	std	Y+2, r24	; 0x02
    1a06:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	if(PORT >= (PORT_MAX)){
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	10 f0       	brcs	.+4      	; 0x1a16 <GPIO_PORT_WRITE_LOGIC+0x1e>
		Retval = E_NOT_OK;
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <GPIO_PORT_WRITE_LOGIC+0x38>
	}
	else{
		*(PORT_REG[PORT]) = LOG;
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	fc 01       	movw	r30, r24
    1a22:	e5 58       	subi	r30, 0x85	; 133
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	01 90       	ld	r0, Z+
    1a28:	f0 81       	ld	r31, Z
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	80 83       	st	Z, r24
	}
	return Retval;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <GPIO_PORT_READ_LOGIC>:
#endif
#if GPIO_PORT_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PORT_READ_LOGIC (PORT_T PORT,uint8 *LOG){
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <GPIO_PORT_READ_LOGIC+0x6>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_PORT_READ_LOGIC+0x8>
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	7c 83       	std	Y+4, r23	; 0x04
    1a4e:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
	if(PORT >= (PORT_MAX) || NULL == LOG){
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	20 f4       	brcc	.+8      	; 0x1a62 <GPIO_PORT_READ_LOGIC+0x24>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <GPIO_PORT_READ_LOGIC+0x28>
		Retval = E_NOT_OK;
    1a62:	19 82       	std	Y+1, r1	; 0x01
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <GPIO_PORT_READ_LOGIC+0x46>
	}
	else{
		*LOG = *(PORT_REG[PORT]);
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	fc 01       	movw	r30, r24
    1a72:	e5 58       	subi	r30, 0x85	; 133
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	01 90       	ld	r0, Z+
    1a78:	f0 81       	ld	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	80 83       	st	Z, r24
	}
	return Retval;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <GPIO_PORT_TOGGLE_LOGIC>:
#endif
#if GPIO_PORT_CFG == GPIO_CFG_ENABLE
Std_ReturnType GPIO_PORT_TOGGLE_LOGIC (PORT_T PORT){
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <GPIO_PORT_TOGGLE_LOGIC+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	if(PORT >= (PORT_MAX)){
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	10 f0       	brcs	.+4      	; 0x1aae <GPIO_PORT_TOGGLE_LOGIC+0x1a>
		Retval = E_NOT_OK;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
    1aac:	18 c0       	rjmp	.+48     	; 0x1ade <GPIO_PORT_TOGGLE_LOGIC+0x4a>
	}
	else{
		*(PORT_REG[PORT]) ^= PORT_MASK;
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e5 58       	subi	r30, 0x85	; 133
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	a0 81       	ld	r26, Z
    1ac0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	fc 01       	movw	r30, r24
    1ace:	e5 58       	subi	r30, 0x85	; 133
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	01 90       	ld	r0, Z+
    1ad4:	f0 81       	ld	r31, Z
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 95       	com	r24
    1adc:	8c 93       	st	X, r24
	}
	return Retval;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <DATA_EEPROM_WRITE_1BYTE>:
 */

#include "HAL_EEPROM.h"


Std_ReturnType DATA_EEPROM_WRITE_1BYTE(uint16 *ADD , uint8 data){
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DATA_EEPROM_WRITE_1BYTE+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DATA_EEPROM_WRITE_1BYTE+0x8>
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	9c 83       	std	Y+4, r25	; 0x04
    1afa:	8b 83       	std	Y+3, r24	; 0x03
    1afc:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType Retval = E_OK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == ADD || *ADD > 0x3FF){
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	41 f0       	breq	.+16     	; 0x1b1a <DATA_EEPROM_WRITE_1BYTE+0x30>
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	24 e0       	ldi	r18, 0x04	; 4
    1b14:	80 30       	cpi	r24, 0x00	; 0
    1b16:	92 07       	cpc	r25, r18
    1b18:	10 f0       	brcs	.+4      	; 0x1b1e <DATA_EEPROM_WRITE_1BYTE+0x34>
		Retval = E_NOT_OK;
    1b1a:	1a 82       	std	Y+2, r1	; 0x02
    1b1c:	50 c0       	rjmp	.+160    	; 0x1bbe <DATA_EEPROM_WRITE_1BYTE+0xd4>
	}
	else{
		uint8 GIE_STATUS = ((SREG>>SREG_I)&0x01);
    1b1e:	ef e5       	ldi	r30, 0x5F	; 95
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 1f       	adc	r24, r24
    1b26:	88 27       	eor	r24, r24
    1b28:	88 1f       	adc	r24, r24
    1b2a:	89 83       	std	Y+1, r24	; 0x01

		EEARH = (uint8)((*ADD >> 8)&0x03);
    1b2c:	af e3       	ldi	r26, 0x3F	; 63
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	eb 81       	ldd	r30, Y+3	; 0x03
    1b32:	fc 81       	ldd	r31, Y+4	; 0x04
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	89 2f       	mov	r24, r25
    1b3a:	99 27       	eor	r25, r25
    1b3c:	83 70       	andi	r24, 0x03	; 3
    1b3e:	8c 93       	st	X, r24
		EEARL = (uint8)((*ADD)&0xFF);
    1b40:	ae e3       	ldi	r26, 0x3E	; 62
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	8c 93       	st	X, r24

		EEDR = data;
    1b4e:	ed e3       	ldi	r30, 0x3D	; 61
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	80 83       	st	Z, r24

		GLOBAL_INTERRUPT_DISABLE_SIGNAL();
    1b56:	af e5       	ldi	r26, 0x5F	; 95
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ef e5       	ldi	r30, 0x5F	; 95
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 77       	andi	r24, 0x7F	; 127
    1b62:	8c 93       	st	X, r24
		//EEPROM_READY_INTERRUPT_DISABLE();

		EEPROM_MASTER_WRITE_ENABLE();
    1b64:	ac e3       	ldi	r26, 0x3C	; 60
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	ec e3       	ldi	r30, 0x3C	; 60
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	84 60       	ori	r24, 0x04	; 4
    1b70:	8c 93       	st	X, r24
		EEPROM_WRITE_1BYTE();
    1b72:	ac e3       	ldi	r26, 0x3C	; 60
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ec e3       	ldi	r30, 0x3C	; 60
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	8c 93       	st	X, r24

		while(1 == ((EECR>>1)&0x01));
    1b80:	ec e3       	ldi	r30, 0x3C	; 60
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	86 95       	lsr	r24
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	88 23       	and	r24, r24
    1b92:	b1 f7       	brne	.-20     	; 0x1b80 <DATA_EEPROM_WRITE_1BYTE+0x96>

		if(1 == GIE_STATUS){
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	41 f4       	brne	.+16     	; 0x1baa <DATA_EEPROM_WRITE_1BYTE+0xc0>
			GLOBAL_INTERRUPT_ENABLE_SIGNAL();
    1b9a:	af e5       	ldi	r26, 0x5F	; 95
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ef e5       	ldi	r30, 0x5F	; 95
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 68       	ori	r24, 0x80	; 128
    1ba6:	8c 93       	st	X, r24
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <DATA_EEPROM_WRITE_1BYTE+0xd4>
			//EEPROM_READY_INTERRUPT_ENABLE();
		}
		else if(0 == GIE_STATUS){
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 23       	and	r24, r24
    1bae:	39 f4       	brne	.+14     	; 0x1bbe <DATA_EEPROM_WRITE_1BYTE+0xd4>
			GLOBAL_INTERRUPT_DISABLE_SIGNAL();
    1bb0:	af e5       	ldi	r26, 0x5F	; 95
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ef e5       	ldi	r30, 0x5F	; 95
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8f 77       	andi	r24, 0x7F	; 127
    1bbc:	8c 93       	st	X, r24
			//EEPROM_READY_INTERRUPT_DISABLE();
		}
		else{/*Nothing*/}

	}
	return Retval;
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <DATA_EEPROM_READ_1BYTE>:
Std_ReturnType DATA_EEPROM_READ_1BYTE(uint16 *ADD , uint8 *data){
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <DATA_EEPROM_READ_1BYTE+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <DATA_EEPROM_READ_1BYTE+0x8>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9b 83       	std	Y+3, r25	; 0x03
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	7d 83       	std	Y+5, r23	; 0x05
    1be4:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ADD || NULL == data || *ADD > 0x3FF){
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <DATA_EEPROM_READ_1BYTE+0x3a>
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	41 f0       	breq	.+16     	; 0x1c0a <DATA_EEPROM_READ_1BYTE+0x3a>
    1bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	24 e0       	ldi	r18, 0x04	; 4
    1c04:	80 30       	cpi	r24, 0x00	; 0
    1c06:	92 07       	cpc	r25, r18
    1c08:	10 f0       	brcs	.+4      	; 0x1c0e <DATA_EEPROM_READ_1BYTE+0x3e>
		Retval = E_NOT_OK;
    1c0a:	19 82       	std	Y+1, r1	; 0x01
    1c0c:	1e c0       	rjmp	.+60     	; 0x1c4a <DATA_EEPROM_READ_1BYTE+0x7a>
	}
	else{
		EEARH = (uint8)((*ADD >> 8)&0x03);
    1c0e:	af e3       	ldi	r26, 0x3F	; 63
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ea 81       	ldd	r30, Y+2	; 0x02
    1c14:	fb 81       	ldd	r31, Y+3	; 0x03
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	89 2f       	mov	r24, r25
    1c1c:	99 27       	eor	r25, r25
    1c1e:	83 70       	andi	r24, 0x03	; 3
    1c20:	8c 93       	st	X, r24
		EEARL = (uint8)((*ADD)&0xFF);
    1c22:	ae e3       	ldi	r26, 0x3E	; 62
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	8c 93       	st	X, r24

		EEPROM_READ_1BYTE();
    1c30:	ac e3       	ldi	r26, 0x3C	; 60
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ec e3       	ldi	r30, 0x3C	; 60
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	8c 93       	st	X, r24

		*data = EEDR;
    1c3e:	ed e3       	ldi	r30, 0x3D	; 61
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	80 83       	st	Z, r24
	}
	return Retval;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <RELAY_INITIALIZE>:
 */


#include "ECU_RELAY.h"

Std_ReturnType RELAY_INITIALIZE (const RELAY_T *relay){
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <RELAY_INITIALIZE+0x6>
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	9b 83       	std	Y+3, r25	; 0x03
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == relay){
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	9b 81       	ldd	r25, Y+3	; 0x03
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <RELAY_INITIALIZE+0x20>
		Retval = E_NOT_OK;
    1c78:	19 82       	std	Y+1, r1	; 0x01
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <RELAY_INITIALIZE+0x2a>
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(relay->RELAY_PIN));
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    1c84:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <RELAY_TURN_ON>:
Std_ReturnType RELAY_TURN_ON (const RELAY_T *relay){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <RELAY_TURN_ON+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <RELAY_TURN_ON+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == relay){
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <RELAY_TURN_ON+0x20>
		Retval = E_NOT_OK;
    1cb0:	1a 82       	std	Y+2, r1	; 0x02
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <RELAY_TURN_ON+0x30>
	}
	else{
		LOGIC_T log = (LOGIC_T)RELAY_ON;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
		Retval = GPIO_PIN_WRITE_LOGIC(&(relay->RELAY_PIN),log);
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	69 81       	ldd	r22, Y+1	; 0x01
    1cbe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Retval;
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <RELAY_TURN_OFF>:
Std_ReturnType RELAY_TURN_OFF (const RELAY_T *relay){
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <RELAY_TURN_OFF+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <RELAY_TURN_OFF+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == relay){
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	11 f4       	brne	.+4      	; 0x1cf4 <RELAY_TURN_OFF+0x20>
		Retval = E_NOT_OK;
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <RELAY_TURN_OFF+0x2e>
	}
	else{
		LOGIC_T log = (LOGIC_T)RELAY_OFF;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
		Retval = GPIO_PIN_WRITE_LOGIC(&(relay->RELAY_PIN),log);
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	69 81       	ldd	r22, Y+1	; 0x01
    1cfc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1d00:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Retval;
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <RELAY_TOGGLE>:
Std_ReturnType RELAY_TOGGLE (const RELAY_T *relay){
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <RELAY_TOGGLE+0x6>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == relay){
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <RELAY_TOGGLE+0x20>
		Retval = E_NOT_OK;
    1d2e:	19 82       	std	Y+1, r1	; 0x01
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <RELAY_TOGGLE+0x2a>
	}
	else{
		Retval = GPIO_PIN_TOGGLE_LOGIC(&(relay->RELAY_PIN));
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_PIN_TOGGLE_LOGIC>
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <RELAY_GET_STATUS>:
Std_ReturnType RELAY_GET_STATUS (const RELAY_T *relay , LOGIC_T *relay_st){
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <RELAY_GET_STATUS+0x6>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <RELAY_GET_STATUS+0x8>
    1d52:	0f 92       	push	r0
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	9b 83       	std	Y+3, r25	; 0x03
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	7d 83       	std	Y+5, r23	; 0x05
    1d5e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == relay || NULL == relay_st){
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	21 f0       	breq	.+8      	; 0x1d74 <RELAY_GET_STATUS+0x2a>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <RELAY_GET_STATUS+0x2e>
		Retval = E_NOT_OK;
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	08 c0       	rjmp	.+16     	; 0x1d88 <RELAY_GET_STATUS+0x3e>
	}
	else{
		Retval = GPIO_PIN_READ_LOGIC(&(relay->RELAY_PIN) , relay_st);
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d80:	b9 01       	movw	r22, r18
    1d82:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    1d86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LED_INITIALIZE>:


#include "ECU_LED.h"


Std_ReturnType LED_INITIALIZE(const LED_T *led){
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <LED_INITIALIZE+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9b 83       	std	Y+3, r25	; 0x03
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led){
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	11 f4       	brne	.+4      	; 0x1dba <LED_INITIALIZE+0x20>
		Retval = E_NOT_OK;
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <LED_INITIALIZE+0x2a>
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(led->LED_Pin));
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <LED_TURN_ON>:
Std_ReturnType LED_TURN_ON(const LED_T *led){
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <LED_TURN_ON+0x6>
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led){
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <LED_TURN_ON+0x20>
		Retval = E_NOT_OK;
    1dee:	19 82       	std	Y+1, r1	; 0x01
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <LED_TURN_ON+0x2c>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(led->LED_Pin),(LOGIC_T)LED_ON);
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LED_TURN_OFF>:
Std_ReturnType LED_TURN_OFF(const LED_T *led){
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <LED_TURN_OFF+0x6>
    1e12:	0f 92       	push	r0
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	9b 83       	std	Y+3, r25	; 0x03
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led){
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <LED_TURN_OFF+0x20>
		Retval = E_NOT_OK;
    1e28:	19 82       	std	Y+1, r1	; 0x01
    1e2a:	06 c0       	rjmp	.+12     	; 0x1e38 <LED_TURN_OFF+0x2c>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(led->LED_Pin),(LOGIC_T)LED_OFF);
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1e36:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LED_TOGGLE>:
Std_ReturnType LED_TOGGLE(const LED_T *led){
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LED_TOGGLE+0x6>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9b 83       	std	Y+3, r25	; 0x03
    1e54:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led){
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <LED_TOGGLE+0x20>
		Retval = E_NOT_OK;
    1e62:	19 82       	std	Y+1, r1	; 0x01
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <LED_TOGGLE+0x2a>
	}
	else{
		Retval = GPIO_PIN_TOGGLE_LOGIC(&(led->LED_Pin));
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_PIN_TOGGLE_LOGIC>
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <LED_GET_LOGIC>:
Std_ReturnType LED_GET_LOGIC(const LED_T *led,LOGIC_T *LOG){
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <LED_GET_LOGIC+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <LED_GET_LOGIC+0x8>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	7d 83       	std	Y+5, r23	; 0x05
    1e92:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led || NULL == LOG){
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <LED_GET_LOGIC+0x2a>
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <LED_GET_LOGIC+0x2e>
		Retval = E_NOT_OK;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <LED_GET_LOGIC+0x3e>
	}
	else{
		Retval = GPIO_PIN_READ_LOGIC(&(led->LED_Pin),LOG);
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    1eba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <KEYPAD_INITIALIZE>:
													   {'1' , '2' , '3' , '-'} ,
													   {'C' , '0' , '=' , '+'}};

#if KEYPAD_CFG_ENABLE == KEYPAD_CFG

Std_ReturnType KEYPAD_INITIALIZE(const KEYPAD_T *keypad){
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <KEYPAD_INITIALIZE+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <KEYPAD_INITIALIZE+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	9d 83       	std	Y+5, r25	; 0x05
    1ede:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType Retval = E_OK;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == keypad){
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	11 f4       	brne	.+4      	; 0x1ef0 <KEYPAD_INITIALIZE+0x22>
		Retval = E_NOT_OK;
    1eec:	1b 82       	std	Y+3, r1	; 0x03
    1eee:	27 c0       	rjmp	.+78     	; 0x1f3e <KEYPAD_INITIALIZE+0x70>
	}
	else{
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
    1ef0:	1a 82       	std	Y+2, r1	; 0x02
    1ef2:	0d c0       	rjmp	.+26     	; 0x1f0e <KEYPAD_INITIALIZE+0x40>
			Retval = GPIO_PIN_INITIALIZE(&(keypad->KEYPAD_ROWS_PINS[r]));
    1ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	82 0f       	add	r24, r18
    1f00:	93 1f       	adc	r25, r19
    1f02:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    1f06:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
	if(NULL == keypad){
		Retval = E_NOT_OK;
	}
	else{
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	80 f3       	brcs	.-32     	; 0x1ef4 <KEYPAD_INITIALIZE+0x26>
			Retval = GPIO_PIN_INITIALIZE(&(keypad->KEYPAD_ROWS_PINS[r]));
		}
		for(uint8 c = 0 ; c < (KEYPAD_COLUMNS) ; c++){
    1f14:	19 82       	std	Y+1, r1	; 0x01
    1f16:	10 c0       	rjmp	.+32     	; 0x1f38 <KEYPAD_INITIALIZE+0x6a>
			Retval = GPIO_PIN_DIRECTION_INITIALIZE(&(keypad->KEYPAD_COLUMNS_PINS[c]));
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	2c 5f       	subi	r18, 0xFC	; 252
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	82 0f       	add	r24, r18
    1f2a:	93 1f       	adc	r25, r19
    1f2c:	0e 94 49 0a 	call	0x1492	; 0x1492 <GPIO_PIN_DIRECTION_INITIALIZE>
    1f30:	8b 83       	std	Y+3, r24	; 0x03
	}
	else{
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
			Retval = GPIO_PIN_INITIALIZE(&(keypad->KEYPAD_ROWS_PINS[r]));
		}
		for(uint8 c = 0 ; c < (KEYPAD_COLUMNS) ; c++){
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	68 f3       	brcs	.-38     	; 0x1f18 <KEYPAD_INITIALIZE+0x4a>
			Retval = GPIO_PIN_DIRECTION_INITIALIZE(&(keypad->KEYPAD_COLUMNS_PINS[c]));
		}
	}
	return Retval;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <KEYPAD_GET_DATA>:

#endif

#if KEYPAD_CFG_ENABLE == KEYPAD_CFG

Std_ReturnType KEYPAD_GET_DATA(const KEYPAD_T *keypad , uint8 *data){
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	29 97       	sbiw	r28, 0x09	; 9
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	9f 83       	std	Y+7, r25	; 0x07
    1f66:	8e 83       	std	Y+6, r24	; 0x06
    1f68:	79 87       	std	Y+9, r23	; 0x09
    1f6a:	68 87       	std	Y+8, r22	; 0x08
	Std_ReturnType Retval = E_OK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8c 83       	std	Y+4, r24	; 0x04
	if(NULL == keypad || NULL == data){
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	21 f0       	breq	.+8      	; 0x1f80 <KEYPAD_GET_DATA+0x30>
    1f78:	88 85       	ldd	r24, Y+8	; 0x08
    1f7a:	99 85       	ldd	r25, Y+9	; 0x09
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <KEYPAD_GET_DATA+0x34>
		Retval = E_NOT_OK;
    1f80:	1c 82       	std	Y+4, r1	; 0x04
    1f82:	7b c0       	rjmp	.+246    	; 0x207a <KEYPAD_GET_DATA+0x12a>
	}
	else{
		LOGIC_T log = GPIO_LOW;
    1f84:	1d 82       	std	Y+5, r1	; 0x05
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
    1f86:	1b 82       	std	Y+3, r1	; 0x03
    1f88:	74 c0       	rjmp	.+232    	; 0x2072 <KEYPAD_GET_DATA+0x122>
			for(uint8 i = 0 ; i < (KEYPAD_ROWS) ; i++){
    1f8a:	1a 82       	std	Y+2, r1	; 0x02
    1f8c:	0e c0       	rjmp	.+28     	; 0x1faa <KEYPAD_GET_DATA+0x5a>
				Retval = GPIO_PIN_WRITE_LOGIC(&(keypad->KEYPAD_ROWS_PINS[i]) , GPIO_LOW);
    1f8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f90:	3f 81       	ldd	r19, Y+7	; 0x07
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1fa2:	8c 83       	std	Y+4, r24	; 0x04
		Retval = E_NOT_OK;
	}
	else{
		LOGIC_T log = GPIO_LOW;
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
			for(uint8 i = 0 ; i < (KEYPAD_ROWS) ; i++){
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	78 f3       	brcs	.-34     	; 0x1f8e <KEYPAD_GET_DATA+0x3e>
				Retval = GPIO_PIN_WRITE_LOGIC(&(keypad->KEYPAD_ROWS_PINS[i]) , GPIO_LOW);
			}
			Retval = GPIO_PIN_WRITE_LOGIC(&(keypad->KEYPAD_ROWS_PINS[r]) , GPIO_HIGH);
    1fb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    1fc4:	8c 83       	std	Y+4, r24	; 0x04
			for(uint8 c = 0 ; c < (KEYPAD_COLUMNS) ; c++){
    1fc6:	19 82       	std	Y+1, r1	; 0x01
    1fc8:	4d c0       	rjmp	.+154    	; 0x2064 <KEYPAD_GET_DATA+0x114>
				Retval = GPIO_PIN_READ_LOGIC(&(keypad->KEYPAD_COLUMNS_PINS[c]) , &log);
    1fca:	8e 81       	ldd	r24, Y+6	; 0x06
    1fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fce:	9c 01       	movw	r18, r24
    1fd0:	2c 5f       	subi	r18, 0xFC	; 252
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	82 0f       	add	r24, r18
    1fdc:	93 1f       	adc	r25, r19
    1fde:	9e 01       	movw	r18, r28
    1fe0:	2b 5f       	subi	r18, 0xFB	; 251
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    1fea:	8c 83       	std	Y+4, r24	; 0x04
				if(KEYPAD_ACTIVE_HIGH == keypad->KEYPAD_CON){
    1fec:	ee 81       	ldd	r30, Y+6	; 0x06
    1fee:	ff 81       	ldd	r31, Y+7	; 0x07
    1ff0:	80 85       	ldd	r24, Z+8	; 0x08
    1ff2:	88 23       	and	r24, r24
    1ff4:	c1 f4       	brne	.+48     	; 0x2026 <KEYPAD_GET_DATA+0xd6>
					if(GPIO_HIGH == log){
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	89 f5       	brne	.+98     	; 0x205e <KEYPAD_GET_DATA+0x10e>
						*data = keypad_semi_calc[r][c];
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	48 2f       	mov	r20, r24
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	ca 01       	movw	r24, r20
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	fc 01       	movw	r30, r24
    2018:	ed 57       	subi	r30, 0x7D	; 125
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	e8 85       	ldd	r30, Y+8	; 0x08
    2020:	f9 85       	ldd	r31, Y+9	; 0x09
    2022:	80 83       	st	Z, r24
    2024:	1c c0       	rjmp	.+56     	; 0x205e <KEYPAD_GET_DATA+0x10e>
					}
					else{}
				}
				else if(KEYPAD_ACTIVE_LOW == keypad->KEYPAD_CON){
    2026:	ee 81       	ldd	r30, Y+6	; 0x06
    2028:	ff 81       	ldd	r31, Y+7	; 0x07
    202a:	80 85       	ldd	r24, Z+8	; 0x08
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	b9 f4       	brne	.+46     	; 0x205e <KEYPAD_GET_DATA+0x10e>
					if(GPIO_LOW == log){
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	88 23       	and	r24, r24
    2034:	a1 f4       	brne	.+40     	; 0x205e <KEYPAD_GET_DATA+0x10e>
						*data = keypad_semi_calc[r][c];
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	48 2f       	mov	r20, r24
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	ca 01       	movw	r24, r20
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	82 0f       	add	r24, r18
    204e:	93 1f       	adc	r25, r19
    2050:	fc 01       	movw	r30, r24
    2052:	ed 57       	subi	r30, 0x7D	; 125
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	e8 85       	ldd	r30, Y+8	; 0x08
    205a:	f9 85       	ldd	r31, Y+9	; 0x09
    205c:	80 83       	st	Z, r24
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
			for(uint8 i = 0 ; i < (KEYPAD_ROWS) ; i++){
				Retval = GPIO_PIN_WRITE_LOGIC(&(keypad->KEYPAD_ROWS_PINS[i]) , GPIO_LOW);
			}
			Retval = GPIO_PIN_WRITE_LOGIC(&(keypad->KEYPAD_ROWS_PINS[r]) , GPIO_HIGH);
			for(uint8 c = 0 ; c < (KEYPAD_COLUMNS) ; c++){
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f4       	brcc	.+2      	; 0x206c <KEYPAD_GET_DATA+0x11c>
    206a:	af cf       	rjmp	.-162    	; 0x1fca <KEYPAD_GET_DATA+0x7a>
	if(NULL == keypad || NULL == data){
		Retval = E_NOT_OK;
	}
	else{
		LOGIC_T log = GPIO_LOW;
		for(uint8 r = 0 ; r < (KEYPAD_ROWS) ; r++){
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	8b 83       	std	Y+3, r24	; 0x03
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	08 f4       	brcc	.+2      	; 0x207a <KEYPAD_GET_DATA+0x12a>
    2078:	88 cf       	rjmp	.-240    	; 0x1f8a <KEYPAD_GET_DATA+0x3a>
				}
				else{}
			}
		}
	}
	return Retval;
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    207c:	29 96       	adiw	r28, 0x09	; 9
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <DC_MOTOR_INITIALIZE>:

#include "ECU_DC_MOTOR.h"

#if DC_MOTOR_CFG == (DC_MOTOR_CFG_ENABLE)

Std_ReturnType DC_MOTOR_INITIALIZE(const DC_MOTOR_T *motor){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <DC_MOTOR_INITIALIZE+0x6>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == motor){
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	9b 81       	ldd	r25, Y+3	; 0x03
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	11 f4       	brne	.+4      	; 0x20ae <DC_MOTOR_INITIALIZE+0x20>
		Retval = E_NOT_OK;
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	0b c0       	rjmp	.+22     	; 0x20c4 <DC_MOTOR_INITIALIZE+0x36>
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(motor->DC_MOTOR_PIN[0]));
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    20b6:	89 83       	std	Y+1, r24	; 0x01
		Retval = GPIO_PIN_INITIALIZE(&(motor->DC_MOTOR_PIN[1]));
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    20c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <DC_MOTOR_ROTATE_CW>:

#endif

#if DC_MOTOR_CFG == (DC_MOTOR_CFG_ENABLE)

Std_ReturnType DC_MOTOR_ROTATE_CW(const DC_MOTOR_T *motor){
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <DC_MOTOR_ROTATE_CW+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <DC_MOTOR_ROTATE_CW+0x8>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9d 83       	std	Y+5, r25	; 0x05
    20e2:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType Retval = E_OK;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == motor){
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <DC_MOTOR_ROTATE_CW+0x22>
			Retval = E_NOT_OK;
    20f0:	1b 82       	std	Y+3, r1	; 0x03
    20f2:	10 c0       	rjmp	.+32     	; 0x2114 <DC_MOTOR_ROTATE_CW+0x42>
		}
		else{
			LOGIC_T IN1 = (LOGIC_T)DC_MOTOR_ON;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	8a 83       	std	Y+2, r24	; 0x02
			LOGIC_T IN2 = (LOGIC_T)DC_MOTOR_OFF;
    20f8:	19 82       	std	Y+1, r1	; 0x01
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[0]) , IN1);
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2100:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2104:	8b 83       	std	Y+3, r24	; 0x03
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[1]) , IN2);
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	69 81       	ldd	r22, Y+1	; 0x01
    210e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2112:	8b 83       	std	Y+3, r24	; 0x03
		}
		return Retval;
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <DC_MOTOR_ROTATE_CCW>:

#endif

#if DC_MOTOR_CFG == (DC_MOTOR_CFG_ENABLE)

Std_ReturnType DC_MOTOR_ROTATE_CCW(const DC_MOTOR_T *motor){
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <DC_MOTOR_ROTATE_CCW+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <DC_MOTOR_ROTATE_CCW+0x8>
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType Retval = E_OK;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == motor){
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	11 f4       	brne	.+4      	; 0x2148 <DC_MOTOR_ROTATE_CCW+0x22>
			Retval = E_NOT_OK;
    2144:	1b 82       	std	Y+3, r1	; 0x03
    2146:	10 c0       	rjmp	.+32     	; 0x2168 <DC_MOTOR_ROTATE_CCW+0x42>
		}
		else{
			LOGIC_T IN1 = (LOGIC_T)DC_MOTOR_OFF;
    2148:	1a 82       	std	Y+2, r1	; 0x02
			LOGIC_T IN2 = (LOGIC_T)DC_MOTOR_ON;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[0]) , IN1);
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	6a 81       	ldd	r22, Y+2	; 0x02
    2154:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2158:	8b 83       	std	Y+3, r24	; 0x03
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[1]) , IN2);
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	69 81       	ldd	r22, Y+1	; 0x01
    2162:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2166:	8b 83       	std	Y+3, r24	; 0x03
		}
		return Retval;
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <DC_MOTOR_STOP>:

#endif

#if DC_MOTOR_CFG == (DC_MOTOR_CFG_ENABLE)

Std_ReturnType DC_MOTOR_STOP(const DC_MOTOR_T *motor){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <DC_MOTOR_STOP+0x6>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <DC_MOTOR_STOP+0x8>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9d 83       	std	Y+5, r25	; 0x05
    218a:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType Retval = E_OK;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == motor){
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	11 f4       	brne	.+4      	; 0x219c <DC_MOTOR_STOP+0x22>
			Retval = E_NOT_OK;
    2198:	1b 82       	std	Y+3, r1	; 0x03
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <DC_MOTOR_STOP+0x40>
		}
		else{
			LOGIC_T IN1 = (LOGIC_T)DC_MOTOR_OFF;
    219c:	1a 82       	std	Y+2, r1	; 0x02
			LOGIC_T IN2 = (LOGIC_T)DC_MOTOR_OFF;
    219e:	19 82       	std	Y+1, r1	; 0x01
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[0]) , IN1);
    21a0:	8c 81       	ldd	r24, Y+4	; 0x04
    21a2:	9d 81       	ldd	r25, Y+5	; 0x05
    21a4:	6a 81       	ldd	r22, Y+2	; 0x02
    21a6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    21aa:	8b 83       	std	Y+3, r24	; 0x03
			Retval = GPIO_PIN_WRITE_LOGIC(&(motor->DC_MOTOR_PIN[1]) , IN2);
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	69 81       	ldd	r22, Y+1	; 0x01
    21b4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		}
		return Retval;
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <DC_MOTOR_GET_ROTATION_DIRECTION>:

#endif

#if DC_MOTOR_CFG == (DC_MOTOR_CFG_ENABLE)

Std_ReturnType DC_MOTOR_GET_ROTATION_DIRECTION(const DC_MOTOR_T *motor ,DC_MOTOR_ROTATE *rot){
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	27 97       	sbiw	r28, 0x07	; 7
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	9d 83       	std	Y+5, r25	; 0x05
    21e2:	8c 83       	std	Y+4, r24	; 0x04
    21e4:	7f 83       	std	Y+7, r23	; 0x07
    21e6:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Retval = E_OK;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == motor || NULL == rot){
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	21 f0       	breq	.+8      	; 0x21fc <DC_MOTOR_GET_ROTATION_DIRECTION+0x30>
    21f4:	8e 81       	ldd	r24, Y+6	; 0x06
    21f6:	9f 81       	ldd	r25, Y+7	; 0x07
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	11 f4       	brne	.+4      	; 0x2200 <DC_MOTOR_GET_ROTATION_DIRECTION+0x34>
			Retval = E_NOT_OK;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	2e c0       	rjmp	.+92     	; 0x225c <DC_MOTOR_GET_ROTATION_DIRECTION+0x90>
		}
		else{
			LOGIC_T IN1 = (LOGIC_T)DC_MOTOR_OFF;
    2200:	1a 82       	std	Y+2, r1	; 0x02
			LOGIC_T IN2 = (LOGIC_T)DC_MOTOR_OFF;
    2202:	1b 82       	std	Y+3, r1	; 0x03
			Retval = GPIO_PIN_READ_LOGIC(&(motor->DC_MOTOR_PIN[0]) , &(IN1));
    2204:	8c 81       	ldd	r24, Y+4	; 0x04
    2206:	9d 81       	ldd	r25, Y+5	; 0x05
    2208:	9e 01       	movw	r18, r28
    220a:	2e 5f       	subi	r18, 0xFE	; 254
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	b9 01       	movw	r22, r18
    2210:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    2214:	89 83       	std	Y+1, r24	; 0x01
			Retval = GPIO_PIN_READ_LOGIC(&(motor->DC_MOTOR_PIN[1]) , &(IN2));
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	9e 01       	movw	r18, r28
    221e:	2d 5f       	subi	r18, 0xFD	; 253
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	b9 01       	movw	r22, r18
    2224:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    2228:	89 83       	std	Y+1, r24	; 0x01
			if(IN1 == (LOGIC_T)DC_MOTOR_ON && IN2 == (LOGIC_T)DC_MOTOR_OFF){
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	41 f4       	brne	.+16     	; 0x2240 <DC_MOTOR_GET_ROTATION_DIRECTION+0x74>
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	88 23       	and	r24, r24
    2234:	29 f4       	brne	.+10     	; 0x2240 <DC_MOTOR_GET_ROTATION_DIRECTION+0x74>
				*rot = DC_MOTOR_CW;
    2236:	ee 81       	ldd	r30, Y+6	; 0x06
    2238:	ff 81       	ldd	r31, Y+7	; 0x07
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	80 83       	st	Z, r24
    223e:	0e c0       	rjmp	.+28     	; 0x225c <DC_MOTOR_GET_ROTATION_DIRECTION+0x90>
			}
			else if (IN1 == (LOGIC_T)DC_MOTOR_OFF && IN2 == (LOGIC_T)DC_MOTOR_ON){
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	88 23       	and	r24, r24
    2244:	41 f4       	brne	.+16     	; 0x2256 <DC_MOTOR_GET_ROTATION_DIRECTION+0x8a>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	29 f4       	brne	.+10     	; 0x2256 <DC_MOTOR_GET_ROTATION_DIRECTION+0x8a>
				*rot = DC_MOTOR_CCW;
    224c:	ee 81       	ldd	r30, Y+6	; 0x06
    224e:	ff 81       	ldd	r31, Y+7	; 0x07
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	80 83       	st	Z, r24
    2254:	03 c0       	rjmp	.+6      	; 0x225c <DC_MOTOR_GET_ROTATION_DIRECTION+0x90>
			}
			else{
				*rot = DC_MOTOR_STOPED;
    2256:	ee 81       	ldd	r30, Y+6	; 0x06
    2258:	ff 81       	ldd	r31, Y+7	; 0x07
    225a:	10 82       	st	Z, r1
			}

		}
		return Retval;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
}
    225e:	27 96       	adiw	r28, 0x07	; 7
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <CHR_LCD_4BIT_INITIALIZE>:

/********** MAIN Functions  ***********/

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_INITIALIZE(const CHR_LCD_4BIT_T *lcd){
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	e9 97       	sbiw	r28, 0x39	; 57
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	99 af       	std	Y+57, r25	; 0x39
    2286:	88 af       	std	Y+56, r24	; 0x38
	Std_ReturnType Retval = E_OK;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	8f ab       	std	Y+55, r24	; 0x37
	if(NULL == lcd){
    228c:	88 ad       	ldd	r24, Y+56	; 0x38
    228e:	99 ad       	ldd	r25, Y+57	; 0x39
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	11 f4       	brne	.+4      	; 0x2298 <CHR_LCD_4BIT_INITIALIZE+0x28>
		Retval = E_NOT_OK;
    2294:	1f aa       	std	Y+55, r1	; 0x37
    2296:	fc c1       	rjmp	.+1016   	; 0x2690 <CHR_LCD_4BIT_INITIALIZE+0x420>
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(lcd->RS_PIN));
    2298:	88 ad       	ldd	r24, Y+56	; 0x38
    229a:	99 ad       	ldd	r25, Y+57	; 0x39
    229c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    22a0:	8f ab       	std	Y+55, r24	; 0x37
		Retval = GPIO_PIN_INITIALIZE(&(lcd->EN_PIN));
    22a2:	88 ad       	ldd	r24, Y+56	; 0x38
    22a4:	99 ad       	ldd	r25, Y+57	; 0x39
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    22ac:	8f ab       	std	Y+55, r24	; 0x37
		for(int i = 0; i < 4 ; i++){
    22ae:	1e aa       	std	Y+54, r1	; 0x36
    22b0:	1d aa       	std	Y+53, r1	; 0x35
    22b2:	11 c0       	rjmp	.+34     	; 0x22d6 <CHR_LCD_4BIT_INITIALIZE+0x66>
			Retval = GPIO_PIN_INITIALIZE(&(lcd->LCD_DATA_PINS[i]));
    22b4:	88 ad       	ldd	r24, Y+56	; 0x38
    22b6:	99 ad       	ldd	r25, Y+57	; 0x39
    22b8:	9c 01       	movw	r18, r24
    22ba:	2e 5f       	subi	r18, 0xFE	; 254
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	8d a9       	ldd	r24, Y+53	; 0x35
    22c0:	9e a9       	ldd	r25, Y+54	; 0x36
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    22ca:	8f ab       	std	Y+55, r24	; 0x37
		Retval = E_NOT_OK;
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(lcd->RS_PIN));
		Retval = GPIO_PIN_INITIALIZE(&(lcd->EN_PIN));
		for(int i = 0; i < 4 ; i++){
    22cc:	8d a9       	ldd	r24, Y+53	; 0x35
    22ce:	9e a9       	ldd	r25, Y+54	; 0x36
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	9e ab       	std	Y+54, r25	; 0x36
    22d4:	8d ab       	std	Y+53, r24	; 0x35
    22d6:	8d a9       	ldd	r24, Y+53	; 0x35
    22d8:	9e a9       	ldd	r25, Y+54	; 0x36
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	91 05       	cpc	r25, r1
    22de:	54 f3       	brlt	.-44     	; 0x22b4 <CHR_LCD_4BIT_INITIALIZE+0x44>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 ea       	ldi	r26, 0xA0	; 160
    22e6:	b1 e4       	ldi	r27, 0x41	; 65
    22e8:	89 ab       	std	Y+49, r24	; 0x31
    22ea:	9a ab       	std	Y+50, r25	; 0x32
    22ec:	ab ab       	std	Y+51, r26	; 0x33
    22ee:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8d a7       	std	Y+45, r24	; 0x2d
    230a:	9e a7       	std	Y+46, r25	; 0x2e
    230c:	af a7       	std	Y+47, r26	; 0x2f
    230e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2310:	6d a5       	ldd	r22, Y+45	; 0x2d
    2312:	7e a5       	ldd	r23, Y+46	; 0x2e
    2314:	8f a5       	ldd	r24, Y+47	; 0x2f
    2316:	98 a9       	ldd	r25, Y+48	; 0x30
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <CHR_LCD_4BIT_INITIALIZE+0xc2>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9c a7       	std	Y+44, r25	; 0x2c
    232e:	8b a7       	std	Y+43, r24	; 0x2b
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <CHR_LCD_4BIT_INITIALIZE+0x140>
	else if (__tmp > 65535)
    2332:	6d a5       	ldd	r22, Y+45	; 0x2d
    2334:	7e a5       	ldd	r23, Y+46	; 0x2e
    2336:	8f a5       	ldd	r24, Y+47	; 0x2f
    2338:	98 a9       	ldd	r25, Y+48	; 0x30
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <CHR_LCD_4BIT_INITIALIZE+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	69 a9       	ldd	r22, Y+49	; 0x31
    234c:	7a a9       	ldd	r23, Y+50	; 0x32
    234e:	8b a9       	ldd	r24, Y+51	; 0x33
    2350:	9c a9       	ldd	r25, Y+52	; 0x34
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9c a7       	std	Y+44, r25	; 0x2c
    2370:	8b a7       	std	Y+43, r24	; 0x2b
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <CHR_LCD_4BIT_INITIALIZE+0x122>
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9a a7       	std	Y+42, r25	; 0x2a
    237a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237c:	89 a5       	ldd	r24, Y+41	; 0x29
    237e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <CHR_LCD_4BIT_INITIALIZE+0x110>
    2384:	9a a7       	std	Y+42, r25	; 0x2a
    2386:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8b a5       	ldd	r24, Y+43	; 0x2b
    238a:	9c a5       	ldd	r25, Y+44	; 0x2c
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9c a7       	std	Y+44, r25	; 0x2c
    2390:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8b a5       	ldd	r24, Y+43	; 0x2b
    2394:	9c a5       	ldd	r25, Y+44	; 0x2c
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <CHR_LCD_4BIT_INITIALIZE+0x104>
    239a:	14 c0       	rjmp	.+40     	; 0x23c4 <CHR_LCD_4BIT_INITIALIZE+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	6d a5       	ldd	r22, Y+45	; 0x2d
    239e:	7e a5       	ldd	r23, Y+46	; 0x2e
    23a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a2:	98 a9       	ldd	r25, Y+48	; 0x30
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9c a7       	std	Y+44, r25	; 0x2c
    23ae:	8b a7       	std	Y+43, r24	; 0x2b
    23b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b4:	98 a7       	std	Y+40, r25	; 0x28
    23b6:	8f a3       	std	Y+39, r24	; 0x27
    23b8:	8f a1       	ldd	r24, Y+39	; 0x27
    23ba:	98 a5       	ldd	r25, Y+40	; 0x28
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <CHR_LCD_4BIT_INITIALIZE+0x14c>
    23c0:	98 a7       	std	Y+40, r25	; 0x28
    23c2:	8f a3       	std	Y+39, r24	; 0x27
			Retval = GPIO_PIN_INITIALIZE(&(lcd->LCD_DATA_PINS[i]));
		}
		_delay_ms(20);
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    23c4:	88 ad       	ldd	r24, Y+56	; 0x38
    23c6:	99 ad       	ldd	r25, Y+57	; 0x39
    23c8:	68 e3       	ldi	r22, 0x38	; 56
    23ca:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    23ce:	8f ab       	std	Y+55, r24	; 0x37
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 ea       	ldi	r26, 0xA0	; 160
    23d6:	b0 e4       	ldi	r27, 0x40	; 64
    23d8:	8b a3       	std	Y+35, r24	; 0x23
    23da:	9c a3       	std	Y+36, r25	; 0x24
    23dc:	ad a3       	std	Y+37, r26	; 0x25
    23de:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6b a1       	ldd	r22, Y+35	; 0x23
    23e2:	7c a1       	ldd	r23, Y+36	; 0x24
    23e4:	8d a1       	ldd	r24, Y+37	; 0x25
    23e6:	9e a1       	ldd	r25, Y+38	; 0x26
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8f 8f       	std	Y+31, r24	; 0x1f
    23fa:	98 a3       	std	Y+32, r25	; 0x20
    23fc:	a9 a3       	std	Y+33, r26	; 0x21
    23fe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2400:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2402:	78 a1       	ldd	r23, Y+32	; 0x20
    2404:	89 a1       	ldd	r24, Y+33	; 0x21
    2406:	9a a1       	ldd	r25, Y+34	; 0x22
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <CHR_LCD_4BIT_INITIALIZE+0x1b2>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9e 8f       	std	Y+30, r25	; 0x1e
    241e:	8d 8f       	std	Y+29, r24	; 0x1d
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <CHR_LCD_4BIT_INITIALIZE+0x230>
	else if (__tmp > 65535)
    2422:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2424:	78 a1       	ldd	r23, Y+32	; 0x20
    2426:	89 a1       	ldd	r24, Y+33	; 0x21
    2428:	9a a1       	ldd	r25, Y+34	; 0x22
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <CHR_LCD_4BIT_INITIALIZE+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6b a1       	ldd	r22, Y+35	; 0x23
    243c:	7c a1       	ldd	r23, Y+36	; 0x24
    243e:	8d a1       	ldd	r24, Y+37	; 0x25
    2440:	9e a1       	ldd	r25, Y+38	; 0x26
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 8f       	std	Y+30, r25	; 0x1e
    2460:	8d 8f       	std	Y+29, r24	; 0x1d
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <CHR_LCD_4BIT_INITIALIZE+0x212>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 8f       	std	Y+28, r25	; 0x1c
    246a:	8b 8f       	std	Y+27, r24	; 0x1b
    246c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <CHR_LCD_4BIT_INITIALIZE+0x200>
    2474:	9c 8f       	std	Y+28, r25	; 0x1c
    2476:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9e 8f       	std	Y+30, r25	; 0x1e
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <CHR_LCD_4BIT_INITIALIZE+0x1f4>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <CHR_LCD_4BIT_INITIALIZE+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    248e:	78 a1       	ldd	r23, Y+32	; 0x20
    2490:	89 a1       	ldd	r24, Y+33	; 0x21
    2492:	9a a1       	ldd	r25, Y+34	; 0x22
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 8f       	std	Y+30, r25	; 0x1e
    249e:	8d 8f       	std	Y+29, r24	; 0x1d
    24a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a4:	9a 8f       	std	Y+26, r25	; 0x1a
    24a6:	89 8f       	std	Y+25, r24	; 0x19
    24a8:	89 8d       	ldd	r24, Y+25	; 0x19
    24aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <CHR_LCD_4BIT_INITIALIZE+0x23c>
    24b0:	9a 8f       	std	Y+26, r25	; 0x1a
    24b2:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    24b4:	88 ad       	ldd	r24, Y+56	; 0x38
    24b6:	99 ad       	ldd	r25, Y+57	; 0x39
    24b8:	68 e3       	ldi	r22, 0x38	; 56
    24ba:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    24be:	8f ab       	std	Y+55, r24	; 0x37
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a6 e1       	ldi	r26, 0x16	; 22
    24c6:	b3 e4       	ldi	r27, 0x43	; 67
    24c8:	8d 8b       	std	Y+21, r24	; 0x15
    24ca:	9e 8b       	std	Y+22, r25	; 0x16
    24cc:	af 8b       	std	Y+23, r26	; 0x17
    24ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d0:	6d 89       	ldd	r22, Y+21	; 0x15
    24d2:	7e 89       	ldd	r23, Y+22	; 0x16
    24d4:	8f 89       	ldd	r24, Y+23	; 0x17
    24d6:	98 8d       	ldd	r25, Y+24	; 0x18
    24d8:	2b ea       	ldi	r18, 0xAB	; 171
    24da:	3a ea       	ldi	r19, 0xAA	; 170
    24dc:	4a e2       	ldi	r20, 0x2A	; 42
    24de:	50 e4       	ldi	r21, 0x40	; 64
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	89 8b       	std	Y+17, r24	; 0x11
    24ea:	9a 8b       	std	Y+18, r25	; 0x12
    24ec:	ab 8b       	std	Y+19, r26	; 0x13
    24ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24f0:	69 89       	ldd	r22, Y+17	; 0x11
    24f2:	7a 89       	ldd	r23, Y+18	; 0x12
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	1c f4       	brge	.+6      	; 0x250e <CHR_LCD_4BIT_INITIALIZE+0x29e>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	88 8b       	std	Y+16, r24	; 0x10
    250c:	91 c0       	rjmp	.+290    	; 0x2630 <CHR_LCD_4BIT_INITIALIZE+0x3c0>
	else if (__tmp > 255)
    250e:	69 89       	ldd	r22, Y+17	; 0x11
    2510:	7a 89       	ldd	r23, Y+18	; 0x12
    2512:	8b 89       	ldd	r24, Y+19	; 0x13
    2514:	9c 89       	ldd	r25, Y+20	; 0x14
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	53 e4       	ldi	r21, 0x43	; 67
    251e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <CHR_LCD_4BIT_INITIALIZE+0x2b8>
    2526:	7b c0       	rjmp	.+246    	; 0x261e <CHR_LCD_4BIT_INITIALIZE+0x3ae>
	{
		_delay_ms(__us / 1000.0);
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a e7       	ldi	r20, 0x7A	; 122
    2536:	54 e4       	ldi	r21, 0x44	; 68
    2538:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8c 87       	std	Y+12, r24	; 0x0c
    2542:	9d 87       	std	Y+13, r25	; 0x0d
    2544:	ae 87       	std	Y+14, r26	; 0x0e
    2546:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2548:	6c 85       	ldd	r22, Y+12	; 0x0c
    254a:	7d 85       	ldd	r23, Y+13	; 0x0d
    254c:	8e 85       	ldd	r24, Y+14	; 0x0e
    254e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	4a ef       	ldi	r20, 0xFA	; 250
    2556:	54 e4       	ldi	r21, 0x44	; 68
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	88 87       	std	Y+8, r24	; 0x08
    2562:	99 87       	std	Y+9, r25	; 0x09
    2564:	aa 87       	std	Y+10, r26	; 0x0a
    2566:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2568:	68 85       	ldd	r22, Y+8	; 0x08
    256a:	79 85       	ldd	r23, Y+9	; 0x09
    256c:	8a 85       	ldd	r24, Y+10	; 0x0a
    256e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	2c f4       	brge	.+10     	; 0x258a <CHR_LCD_4BIT_INITIALIZE+0x31a>
		__ticks = 1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9f 83       	std	Y+7, r25	; 0x07
    2586:	8e 83       	std	Y+6, r24	; 0x06
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <CHR_LCD_4BIT_INITIALIZE+0x398>
	else if (__tmp > 65535)
    258a:	68 85       	ldd	r22, Y+8	; 0x08
    258c:	79 85       	ldd	r23, Y+9	; 0x09
    258e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2590:	9b 85       	ldd	r25, Y+11	; 0x0b
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	4c f5       	brge	.+82     	; 0x25f4 <CHR_LCD_4BIT_INITIALIZE+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    25a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    25a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9f 83       	std	Y+7, r25	; 0x07
    25c8:	8e 83       	std	Y+6, r24	; 0x06
    25ca:	0f c0       	rjmp	.+30     	; 0x25ea <CHR_LCD_4BIT_INITIALIZE+0x37a>
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9d 83       	std	Y+5, r25	; 0x05
    25d2:	8c 83       	std	Y+4, r24	; 0x04
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <CHR_LCD_4BIT_INITIALIZE+0x368>
    25dc:	9d 83       	std	Y+5, r25	; 0x05
    25de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	8e 81       	ldd	r24, Y+6	; 0x06
    25e2:	9f 81       	ldd	r25, Y+7	; 0x07
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9f 83       	std	Y+7, r25	; 0x07
    25e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ea:	8e 81       	ldd	r24, Y+6	; 0x06
    25ec:	9f 81       	ldd	r25, Y+7	; 0x07
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	69 f7       	brne	.-38     	; 0x25cc <CHR_LCD_4BIT_INITIALIZE+0x35c>
    25f2:	24 c0       	rjmp	.+72     	; 0x263c <CHR_LCD_4BIT_INITIALIZE+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	68 85       	ldd	r22, Y+8	; 0x08
    25f6:	79 85       	ldd	r23, Y+9	; 0x09
    25f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9f 83       	std	Y+7, r25	; 0x07
    2606:	8e 83       	std	Y+6, r24	; 0x06
    2608:	8e 81       	ldd	r24, Y+6	; 0x06
    260a:	9f 81       	ldd	r25, Y+7	; 0x07
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <CHR_LCD_4BIT_INITIALIZE+0x3a4>
    2618:	9b 83       	std	Y+3, r25	; 0x03
    261a:	8a 83       	std	Y+2, r24	; 0x02
    261c:	0f c0       	rjmp	.+30     	; 0x263c <CHR_LCD_4BIT_INITIALIZE+0x3cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    261e:	69 89       	ldd	r22, Y+17	; 0x11
    2620:	7a 89       	ldd	r23, Y+18	; 0x12
    2622:	8b 89       	ldd	r24, Y+19	; 0x13
    2624:	9c 89       	ldd	r25, Y+20	; 0x14
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	88 8b       	std	Y+16, r24	; 0x10
    2630:	88 89       	ldd	r24, Y+16	; 0x10
    2632:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	8a 95       	dec	r24
    2638:	f1 f7       	brne	.-4      	; 0x2636 <CHR_LCD_4BIT_INITIALIZE+0x3c6>
    263a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    263c:	88 ad       	ldd	r24, Y+56	; 0x38
    263e:	99 ad       	ldd	r25, Y+57	; 0x39
    2640:	68 e3       	ldi	r22, 0x38	; 56
    2642:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    2646:	8f ab       	std	Y+55, r24	; 0x37

		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_CLEAR_DISPLAY);
    2648:	88 ad       	ldd	r24, Y+56	; 0x38
    264a:	99 ad       	ldd	r25, Y+57	; 0x39
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    2652:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_CURSOR_HOME);
    2654:	88 ad       	ldd	r24, Y+56	; 0x38
    2656:	99 ad       	ldd	r25, Y+57	; 0x39
    2658:	62 e0       	ldi	r22, 0x02	; 2
    265a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    265e:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_ENS_INC_SFT_OFF);
    2660:	88 ad       	ldd	r24, Y+56	; 0x38
    2662:	99 ad       	ldd	r25, Y+57	; 0x39
    2664:	66 e0       	ldi	r22, 0x06	; 6
    2666:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    266a:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_DSP_ON_ULC_OFF_BLC_OFF);
    266c:	88 ad       	ldd	r24, Y+56	; 0x38
    266e:	99 ad       	ldd	r25, Y+57	; 0x39
    2670:	6c e0       	ldi	r22, 0x0C	; 12
    2672:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    2676:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_4BIT_2DL_F58);
    2678:	88 ad       	ldd	r24, Y+56	; 0x38
    267a:	99 ad       	ldd	r25, Y+57	; 0x39
    267c:	68 e2       	ldi	r22, 0x28	; 40
    267e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    2682:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , CHR_LCD_DDRAM_STA);
    2684:	88 ad       	ldd	r24, Y+56	; 0x38
    2686:	99 ad       	ldd	r25, Y+57	; 0x39
    2688:	60 e8       	ldi	r22, 0x80	; 128
    268a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    268e:	8f ab       	std	Y+55, r24	; 0x37
	}
	return Retval;
    2690:	8f a9       	ldd	r24, Y+55	; 0x37
}
    2692:	e9 96       	adiw	r28, 0x39	; 57
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <CHR_LCD_4BIT_SEND_COMMAND>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_COMMAND(const CHR_LCD_4BIT_T *lcd , uint8 command){
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <CHR_LCD_4BIT_SEND_COMMAND+0x6>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <CHR_LCD_4BIT_SEND_COMMAND+0x8>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9b 83       	std	Y+3, r25	; 0x03
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	11 f4       	brne	.+4      	; 0x26c6 <CHR_LCD_4BIT_SEND_COMMAND+0x22>
		Retval = E_NOT_OK;
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	20 c0       	rjmp	.+64     	; 0x2706 <CHR_LCD_4BIT_SEND_COMMAND+0x62>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    26d0:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_4BIT(lcd , (command >> 4));
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	28 2f       	mov	r18, r24
    26d6:	22 95       	swap	r18
    26d8:	2f 70       	andi	r18, 0x0F	; 15
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	62 2f       	mov	r22, r18
    26e0:	0e 94 24 19 	call	0x3248	; 0x3248 <CHR_LCD_4BIT_SEND_4BIT>
    26e4:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_ENABLE_SIGNAL(lcd);
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ea:	0e 94 67 19 	call	0x32ce	; 0x32ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL>
    26ee:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_4BIT(lcd , (command));
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	6c 81       	ldd	r22, Y+4	; 0x04
    26f6:	0e 94 24 19 	call	0x3248	; 0x3248 <CHR_LCD_4BIT_SEND_4BIT>
    26fa:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_ENABLE_SIGNAL(lcd);
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	0e 94 67 19 	call	0x32ce	; 0x32ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL>
    2704:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <CHR_LCD_4BIT_SEND_CHAR_DATA>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_CHAR_DATA(const CHR_LCD_4BIT_T *lcd , uint8 data){
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	00 d0       	rcall	.+0      	; 0x271c <CHR_LCD_4BIT_SEND_CHAR_DATA+0x6>
    271c:	00 d0       	rcall	.+0      	; 0x271e <CHR_LCD_4BIT_SEND_CHAR_DATA+0x8>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9b 83       	std	Y+3, r25	; 0x03
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	11 f4       	brne	.+4      	; 0x2738 <CHR_LCD_4BIT_SEND_CHAR_DATA+0x22>
		Retval = E_NOT_OK;
    2734:	19 82       	std	Y+1, r1	; 0x01
    2736:	20 c0       	rjmp	.+64     	; 0x2778 <CHR_LCD_4BIT_SEND_CHAR_DATA+0x62>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_HIGH);
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2742:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_4BIT(lcd , (data >> 4));
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	28 2f       	mov	r18, r24
    2748:	22 95       	swap	r18
    274a:	2f 70       	andi	r18, 0x0F	; 15
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	62 2f       	mov	r22, r18
    2752:	0e 94 24 19 	call	0x3248	; 0x3248 <CHR_LCD_4BIT_SEND_4BIT>
    2756:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_ENABLE_SIGNAL(lcd);
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	0e 94 67 19 	call	0x32ce	; 0x32ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL>
    2760:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_4BIT(lcd , (data));
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	6c 81       	ldd	r22, Y+4	; 0x04
    2768:	0e 94 24 19 	call	0x3248	; 0x3248 <CHR_LCD_4BIT_SEND_4BIT>
    276c:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_ENABLE_SIGNAL(lcd);
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	9b 81       	ldd	r25, Y+3	; 0x03
    2772:	0e 94 67 19 	call	0x32ce	; 0x32ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL>
    2776:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <CHR_LCD_4BIT_SEND_CHAR_POS>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_CHAR_POS(const CHR_LCD_4BIT_T *lcd , uint8 data , uint8 row , uint8 column){
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <CHR_LCD_4BIT_SEND_CHAR_POS+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <CHR_LCD_4BIT_SEND_CHAR_POS+0x8>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <CHR_LCD_4BIT_SEND_CHAR_POS+0xa>
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	9b 83       	std	Y+3, r25	; 0x03
    2798:	8a 83       	std	Y+2, r24	; 0x02
    279a:	6c 83       	std	Y+4, r22	; 0x04
    279c:	4d 83       	std	Y+5, r20	; 0x05
    279e:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType Retval = E_OK;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	11 f4       	brne	.+4      	; 0x27b0 <CHR_LCD_4BIT_SEND_CHAR_POS+0x28>
		Retval = E_NOT_OK;
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	0d c0       	rjmp	.+26     	; 0x27ca <CHR_LCD_4BIT_SEND_CHAR_POS+0x42>
	}
	else{
		Retval = CHR_LCD_4BIT_SET_CURSOR(lcd , row , column);
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	9b 81       	ldd	r25, Y+3	; 0x03
    27b4:	6d 81       	ldd	r22, Y+5	; 0x05
    27b6:	4e 81       	ldd	r20, Y+6	; 0x06
    27b8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <CHR_LCD_4BIT_SET_CURSOR>
    27bc:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_4BIT_SEND_CHAR_DATA(lcd , data);
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	6c 81       	ldd	r22, Y+4	; 0x04
    27c4:	0e 94 8b 13 	call	0x2716	; 0x2716 <CHR_LCD_4BIT_SEND_CHAR_DATA>
    27c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    27cc:	26 96       	adiw	r28, 0x06	; 6
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <CHR_LCD_4BIT_SEND_STRING>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_STRING(const CHR_LCD_4BIT_T *lcd , uint8 *str){
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <CHR_LCD_4BIT_SEND_STRING+0x6>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <CHR_LCD_4BIT_SEND_STRING+0x8>
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9b 83       	std	Y+3, r25	; 0x03
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	7d 83       	std	Y+5, r23	; 0x05
    27f2:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str){
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	21 f0       	breq	.+8      	; 0x2808 <CHR_LCD_4BIT_SEND_STRING+0x2a>
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	9d 81       	ldd	r25, Y+5	; 0x05
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	81 f4       	brne	.+32     	; 0x2828 <CHR_LCD_4BIT_SEND_STRING+0x4a>
		Retval = E_NOT_OK;
    2808:	19 82       	std	Y+1, r1	; 0x01
    280a:	13 c0       	rjmp	.+38     	; 0x2832 <CHR_LCD_4BIT_SEND_STRING+0x54>
	}
	else{
		while(*str){
			Retval = CHR_LCD_4BIT_SEND_CHAR_DATA(lcd , *str++);
    280c:	ec 81       	ldd	r30, Y+4	; 0x04
    280e:	fd 81       	ldd	r31, Y+5	; 0x05
    2810:	20 81       	ld	r18, Z
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	9d 81       	ldd	r25, Y+5	; 0x05
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	9d 83       	std	Y+5, r25	; 0x05
    281a:	8c 83       	std	Y+4, r24	; 0x04
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	9b 81       	ldd	r25, Y+3	; 0x03
    2820:	62 2f       	mov	r22, r18
    2822:	0e 94 8b 13 	call	0x2716	; 0x2716 <CHR_LCD_4BIT_SEND_CHAR_DATA>
    2826:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType Retval = E_OK;
	if(NULL == lcd || NULL == str){
		Retval = E_NOT_OK;
	}
	else{
		while(*str){
    2828:	ec 81       	ldd	r30, Y+4	; 0x04
    282a:	fd 81       	ldd	r31, Y+5	; 0x05
    282c:	80 81       	ld	r24, Z
    282e:	88 23       	and	r24, r24
    2830:	69 f7       	brne	.-38     	; 0x280c <CHR_LCD_4BIT_SEND_STRING+0x2e>
			Retval = CHR_LCD_4BIT_SEND_CHAR_DATA(lcd , *str++);
		}
	}
	return Retval;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <CHR_LCD_4BIT_SEND_STRING_POS>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_STRING_POS(const CHR_LCD_4BIT_T *lcd , uint8 *str , uint8 row , uint8 column){
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	27 97       	sbiw	r28, 0x07	; 7
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	9b 83       	std	Y+3, r25	; 0x03
    285a:	8a 83       	std	Y+2, r24	; 0x02
    285c:	7d 83       	std	Y+5, r23	; 0x05
    285e:	6c 83       	std	Y+4, r22	; 0x04
    2860:	4e 83       	std	Y+6, r20	; 0x06
    2862:	2f 83       	std	Y+7, r18	; 0x07
	Std_ReturnType Retval = E_OK;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str){
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	21 f0       	breq	.+8      	; 0x2878 <CHR_LCD_4BIT_SEND_STRING_POS+0x34>
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	9d 81       	ldd	r25, Y+5	; 0x05
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	b1 f4       	brne	.+44     	; 0x28a4 <CHR_LCD_4BIT_SEND_STRING_POS+0x60>
		Retval = E_NOT_OK;
    2878:	19 82       	std	Y+1, r1	; 0x01
    287a:	19 c0       	rjmp	.+50     	; 0x28ae <CHR_LCD_4BIT_SEND_STRING_POS+0x6a>
	}
	else{
		while(*str){
			Retval = CHR_LCD_4BIT_SEND_CHAR_POS(lcd , *str++ , row ,column++);
    287c:	ec 81       	ldd	r30, Y+4	; 0x04
    287e:	fd 81       	ldd	r31, Y+5	; 0x05
    2880:	20 81       	ld	r18, Z
    2882:	8c 81       	ldd	r24, Y+4	; 0x04
    2884:	9d 81       	ldd	r25, Y+5	; 0x05
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	9d 83       	std	Y+5, r25	; 0x05
    288a:	8c 83       	std	Y+4, r24	; 0x04
    288c:	3f 81       	ldd	r19, Y+7	; 0x07
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	8f 83       	std	Y+7, r24	; 0x07
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	62 2f       	mov	r22, r18
    289a:	4e 81       	ldd	r20, Y+6	; 0x06
    289c:	23 2f       	mov	r18, r19
    289e:	0e 94 c4 13 	call	0x2788	; 0x2788 <CHR_LCD_4BIT_SEND_CHAR_POS>
    28a2:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType Retval = E_OK;
	if(NULL == lcd || NULL == str){
		Retval = E_NOT_OK;
	}
	else{
		while(*str){
    28a4:	ec 81       	ldd	r30, Y+4	; 0x04
    28a6:	fd 81       	ldd	r31, Y+5	; 0x05
    28a8:	80 81       	ld	r24, Z
    28aa:	88 23       	and	r24, r24
    28ac:	39 f7       	brne	.-50     	; 0x287c <CHR_LCD_4BIT_SEND_STRING_POS+0x38>
			Retval = CHR_LCD_4BIT_SEND_CHAR_POS(lcd , *str++ , row ,column++);
		}
	}
	return Retval;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b0:	27 96       	adiw	r28, 0x07	; 7
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <CHR_LCD_4BIT_SEND_CUSTOM_CHAR>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_4BIT_CFG

Std_ReturnType CHR_LCD_4BIT_SEND_CUSTOM_CHAR(const CHR_LCD_4BIT_T *lcd , uint8 row , uint8 column , uint8 chr[] , uint8 mem_pos){
    28c2:	0f 93       	push	r16
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	2a 97       	sbiw	r28, 0x0a	; 10
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	9d 83       	std	Y+5, r25	; 0x05
    28da:	8c 83       	std	Y+4, r24	; 0x04
    28dc:	6e 83       	std	Y+6, r22	; 0x06
    28de:	4f 83       	std	Y+7, r20	; 0x07
    28e0:	39 87       	std	Y+9, r19	; 0x09
    28e2:	28 87       	std	Y+8, r18	; 0x08
    28e4:	0a 87       	std	Y+10, r16	; 0x0a
	Std_ReturnType Retval = E_OK;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	11 f4       	brne	.+4      	; 0x28f6 <CHR_LCD_4BIT_SEND_CUSTOM_CHAR+0x34>
		Retval = E_NOT_OK;
    28f2:	1b 82       	std	Y+3, r1	; 0x03
    28f4:	34 c0       	rjmp	.+104    	; 0x295e <CHR_LCD_4BIT_SEND_CUSTOM_CHAR+0x9c>
	}
	else{
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (CHR_LCD_CGRAM_STA+(mem_pos*8)));
    28f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	08 96       	adiw	r24, 0x08	; 8
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	28 2f       	mov	r18, r24
    290c:	8c 81       	ldd	r24, Y+4	; 0x04
    290e:	9d 81       	ldd	r25, Y+5	; 0x05
    2910:	62 2f       	mov	r22, r18
    2912:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    2916:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0 ; i < 8 ; i++){
    2918:	1a 82       	std	Y+2, r1	; 0x02
    291a:	19 82       	std	Y+1, r1	; 0x01
    291c:	13 c0       	rjmp	.+38     	; 0x2944 <CHR_LCD_4BIT_SEND_CUSTOM_CHAR+0x82>
			Retval = CHR_LCD_4BIT_SEND_CHAR_DATA(lcd ,chr[i]);
    291e:	29 81       	ldd	r18, Y+1	; 0x01
    2920:	3a 81       	ldd	r19, Y+2	; 0x02
    2922:	88 85       	ldd	r24, Y+8	; 0x08
    2924:	99 85       	ldd	r25, Y+9	; 0x09
    2926:	fc 01       	movw	r30, r24
    2928:	e2 0f       	add	r30, r18
    292a:	f3 1f       	adc	r31, r19
    292c:	20 81       	ld	r18, Z
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	62 2f       	mov	r22, r18
    2934:	0e 94 8b 13 	call	0x2716	; 0x2716 <CHR_LCD_4BIT_SEND_CHAR_DATA>
    2938:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
		Retval = E_NOT_OK;
	}
	else{
		Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (CHR_LCD_CGRAM_STA+(mem_pos*8)));
		for(int i = 0 ; i < 8 ; i++){
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	88 30       	cpi	r24, 0x08	; 8
    294a:	91 05       	cpc	r25, r1
    294c:	44 f3       	brlt	.-48     	; 0x291e <CHR_LCD_4BIT_SEND_CUSTOM_CHAR+0x5c>
			Retval = CHR_LCD_4BIT_SEND_CHAR_DATA(lcd ,chr[i]);
		}
		Retval = CHR_LCD_4BIT_SEND_CHAR_POS(lcd , mem_pos , row , column);
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	9d 81       	ldd	r25, Y+5	; 0x05
    2952:	6a 85       	ldd	r22, Y+10	; 0x0a
    2954:	4e 81       	ldd	r20, Y+6	; 0x06
    2956:	2f 81       	ldd	r18, Y+7	; 0x07
    2958:	0e 94 c4 13 	call	0x2788	; 0x2788 <CHR_LCD_4BIT_SEND_CHAR_POS>
    295c:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Retval;
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2960:	2a 96       	adiw	r28, 0x0a	; 10
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	0f 91       	pop	r16
    2972:	08 95       	ret

00002974 <CHR_LCD_8BIT_INITIALIZE>:



#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_INITIALIZE(const CHR_LCD_8BIT_T *lcd){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	e9 97       	sbiw	r28, 0x39	; 57
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	99 af       	std	Y+57, r25	; 0x39
    298a:	88 af       	std	Y+56, r24	; 0x38
	Std_ReturnType Retval = E_OK;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	8f ab       	std	Y+55, r24	; 0x37
	if(NULL == lcd){
    2990:	88 ad       	ldd	r24, Y+56	; 0x38
    2992:	99 ad       	ldd	r25, Y+57	; 0x39
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	11 f4       	brne	.+4      	; 0x299c <CHR_LCD_8BIT_INITIALIZE+0x28>
		Retval = E_NOT_OK;
    2998:	1f aa       	std	Y+55, r1	; 0x37
    299a:	02 c2       	rjmp	.+1028   	; 0x2da0 <CHR_LCD_8BIT_INITIALIZE+0x42c>
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(lcd->RS_PIN));
    299c:	88 ad       	ldd	r24, Y+56	; 0x38
    299e:	99 ad       	ldd	r25, Y+57	; 0x39
    29a0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    29a4:	8f ab       	std	Y+55, r24	; 0x37
		Retval = GPIO_PIN_INITIALIZE(&(lcd->EN_PIN));
    29a6:	88 ad       	ldd	r24, Y+56	; 0x38
    29a8:	99 ad       	ldd	r25, Y+57	; 0x39
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    29b0:	8f ab       	std	Y+55, r24	; 0x37
		for(int i = 0; i < 8 ; i++){
    29b2:	1e aa       	std	Y+54, r1	; 0x36
    29b4:	1d aa       	std	Y+53, r1	; 0x35
    29b6:	11 c0       	rjmp	.+34     	; 0x29da <CHR_LCD_8BIT_INITIALIZE+0x66>
			Retval = GPIO_PIN_INITIALIZE(&(lcd->LCD_DATA_PINS[i]));
    29b8:	88 ad       	ldd	r24, Y+56	; 0x38
    29ba:	99 ad       	ldd	r25, Y+57	; 0x39
    29bc:	9c 01       	movw	r18, r24
    29be:	2e 5f       	subi	r18, 0xFE	; 254
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	8d a9       	ldd	r24, Y+53	; 0x35
    29c4:	9e a9       	ldd	r25, Y+54	; 0x36
    29c6:	82 0f       	add	r24, r18
    29c8:	93 1f       	adc	r25, r19
    29ca:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    29ce:	8f ab       	std	Y+55, r24	; 0x37
		Retval = E_NOT_OK;
	}
	else{
		Retval = GPIO_PIN_INITIALIZE(&(lcd->RS_PIN));
		Retval = GPIO_PIN_INITIALIZE(&(lcd->EN_PIN));
		for(int i = 0; i < 8 ; i++){
    29d0:	8d a9       	ldd	r24, Y+53	; 0x35
    29d2:	9e a9       	ldd	r25, Y+54	; 0x36
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	9e ab       	std	Y+54, r25	; 0x36
    29d8:	8d ab       	std	Y+53, r24	; 0x35
    29da:	8d a9       	ldd	r24, Y+53	; 0x35
    29dc:	9e a9       	ldd	r25, Y+54	; 0x36
    29de:	88 30       	cpi	r24, 0x08	; 8
    29e0:	91 05       	cpc	r25, r1
    29e2:	54 f3       	brlt	.-44     	; 0x29b8 <CHR_LCD_8BIT_INITIALIZE+0x44>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a0 ea       	ldi	r26, 0xA0	; 160
    29ea:	b1 e4       	ldi	r27, 0x41	; 65
    29ec:	89 ab       	std	Y+49, r24	; 0x31
    29ee:	9a ab       	std	Y+50, r25	; 0x32
    29f0:	ab ab       	std	Y+51, r26	; 0x33
    29f2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f4:	69 a9       	ldd	r22, Y+49	; 0x31
    29f6:	7a a9       	ldd	r23, Y+50	; 0x32
    29f8:	8b a9       	ldd	r24, Y+51	; 0x33
    29fa:	9c a9       	ldd	r25, Y+52	; 0x34
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	4a ef       	ldi	r20, 0xFA	; 250
    2a02:	54 e4       	ldi	r21, 0x44	; 68
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8d a7       	std	Y+45, r24	; 0x2d
    2a0e:	9e a7       	std	Y+46, r25	; 0x2e
    2a10:	af a7       	std	Y+47, r26	; 0x2f
    2a12:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2a14:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a16:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <CHR_LCD_8BIT_INITIALIZE+0xc2>
		__ticks = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c a7       	std	Y+44, r25	; 0x2c
    2a32:	8b a7       	std	Y+43, r24	; 0x2b
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <CHR_LCD_8BIT_INITIALIZE+0x140>
	else if (__tmp > 65535)
    2a36:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a38:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	3f ef       	ldi	r19, 0xFF	; 255
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	57 e4       	ldi	r21, 0x47	; 71
    2a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	4c f5       	brge	.+82     	; 0x2aa0 <CHR_LCD_8BIT_INITIALIZE+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a50:	7a a9       	ldd	r23, Y+50	; 0x32
    2a52:	8b a9       	ldd	r24, Y+51	; 0x33
    2a54:	9c a9       	ldd	r25, Y+52	; 0x34
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c a7       	std	Y+44, r25	; 0x2c
    2a74:	8b a7       	std	Y+43, r24	; 0x2b
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <CHR_LCD_8BIT_INITIALIZE+0x122>
    2a78:	88 ec       	ldi	r24, 0xC8	; 200
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9a a7       	std	Y+42, r25	; 0x2a
    2a7e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a80:	89 a5       	ldd	r24, Y+41	; 0x29
    2a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <CHR_LCD_8BIT_INITIALIZE+0x110>
    2a88:	9a a7       	std	Y+42, r25	; 0x2a
    2a8a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9c a7       	std	Y+44, r25	; 0x2c
    2a94:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a98:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	69 f7       	brne	.-38     	; 0x2a78 <CHR_LCD_8BIT_INITIALIZE+0x104>
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <CHR_LCD_8BIT_INITIALIZE+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2aa2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9c a7       	std	Y+44, r25	; 0x2c
    2ab2:	8b a7       	std	Y+43, r24	; 0x2b
    2ab4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ab8:	98 a7       	std	Y+40, r25	; 0x28
    2aba:	8f a3       	std	Y+39, r24	; 0x27
    2abc:	8f a1       	ldd	r24, Y+39	; 0x27
    2abe:	98 a5       	ldd	r25, Y+40	; 0x28
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <CHR_LCD_8BIT_INITIALIZE+0x14c>
    2ac4:	98 a7       	std	Y+40, r25	; 0x28
    2ac6:	8f a3       	std	Y+39, r24	; 0x27
			Retval = GPIO_PIN_INITIALIZE(&(lcd->LCD_DATA_PINS[i]));
		}
		_delay_ms(20);
        Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
    2ac8:	88 ad       	ldd	r24, Y+56	; 0x38
    2aca:	99 ad       	ldd	r25, Y+57	; 0x39
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2ad2:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    2ad4:	88 ad       	ldd	r24, Y+56	; 0x38
    2ad6:	99 ad       	ldd	r25, Y+57	; 0x39
    2ad8:	68 e3       	ldi	r22, 0x38	; 56
    2ada:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2ade:	8f ab       	std	Y+55, r24	; 0x37
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae6:	b0 e4       	ldi	r27, 0x40	; 64
    2ae8:	8b a3       	std	Y+35, r24	; 0x23
    2aea:	9c a3       	std	Y+36, r25	; 0x24
    2aec:	ad a3       	std	Y+37, r26	; 0x25
    2aee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6b a1       	ldd	r22, Y+35	; 0x23
    2af2:	7c a1       	ldd	r23, Y+36	; 0x24
    2af4:	8d a1       	ldd	r24, Y+37	; 0x25
    2af6:	9e a1       	ldd	r25, Y+38	; 0x26
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a ef       	ldi	r20, 0xFA	; 250
    2afe:	54 e4       	ldi	r21, 0x44	; 68
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8f 8f       	std	Y+31, r24	; 0x1f
    2b0a:	98 a3       	std	Y+32, r25	; 0x20
    2b0c:	a9 a3       	std	Y+33, r26	; 0x21
    2b0e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2b10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b12:	78 a1       	ldd	r23, Y+32	; 0x20
    2b14:	89 a1       	ldd	r24, Y+33	; 0x21
    2b16:	9a a1       	ldd	r25, Y+34	; 0x22
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <CHR_LCD_8BIT_INITIALIZE+0x1be>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b2e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <CHR_LCD_8BIT_INITIALIZE+0x23c>
	else if (__tmp > 65535)
    2b32:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b34:	78 a1       	ldd	r23, Y+32	; 0x20
    2b36:	89 a1       	ldd	r24, Y+33	; 0x21
    2b38:	9a a1       	ldd	r25, Y+34	; 0x22
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <CHR_LCD_8BIT_INITIALIZE+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b50:	9e a1       	ldd	r25, Y+38	; 0x26
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b70:	8d 8f       	std	Y+29, r24	; 0x1d
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <CHR_LCD_8BIT_INITIALIZE+0x21e>
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 8f       	std	Y+28, r25	; 0x1c
    2b7a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <CHR_LCD_8BIT_INITIALIZE+0x20c>
    2b84:	9c 8f       	std	Y+28, r25	; 0x1c
    2b86:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b90:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <CHR_LCD_8BIT_INITIALIZE+0x200>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <CHR_LCD_8BIT_INITIALIZE+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b9e:	78 a1       	ldd	r23, Y+32	; 0x20
    2ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9e 8f       	std	Y+30, r25	; 0x1e
    2bae:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bb4:	9a 8f       	std	Y+26, r25	; 0x1a
    2bb6:	89 8f       	std	Y+25, r24	; 0x19
    2bb8:	89 8d       	ldd	r24, Y+25	; 0x19
    2bba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <CHR_LCD_8BIT_INITIALIZE+0x248>
    2bc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc2:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    2bc4:	88 ad       	ldd	r24, Y+56	; 0x38
    2bc6:	99 ad       	ldd	r25, Y+57	; 0x39
    2bc8:	68 e3       	ldi	r22, 0x38	; 56
    2bca:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2bce:	8f ab       	std	Y+55, r24	; 0x37
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a6 e1       	ldi	r26, 0x16	; 22
    2bd6:	b3 e4       	ldi	r27, 0x43	; 67
    2bd8:	8d 8b       	std	Y+21, r24	; 0x15
    2bda:	9e 8b       	std	Y+22, r25	; 0x16
    2bdc:	af 8b       	std	Y+23, r26	; 0x17
    2bde:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	2b ea       	ldi	r18, 0xAB	; 171
    2bea:	3a ea       	ldi	r19, 0xAA	; 170
    2bec:	4a e2       	ldi	r20, 0x2A	; 42
    2bee:	50 e4       	ldi	r21, 0x40	; 64
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	89 8b       	std	Y+17, r24	; 0x11
    2bfa:	9a 8b       	std	Y+18, r25	; 0x12
    2bfc:	ab 8b       	std	Y+19, r26	; 0x13
    2bfe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c00:	69 89       	ldd	r22, Y+17	; 0x11
    2c02:	7a 89       	ldd	r23, Y+18	; 0x12
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	1c f4       	brge	.+6      	; 0x2c1e <CHR_LCD_8BIT_INITIALIZE+0x2aa>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	88 8b       	std	Y+16, r24	; 0x10
    2c1c:	91 c0       	rjmp	.+290    	; 0x2d40 <CHR_LCD_8BIT_INITIALIZE+0x3cc>
	else if (__tmp > 255)
    2c1e:	69 89       	ldd	r22, Y+17	; 0x11
    2c20:	7a 89       	ldd	r23, Y+18	; 0x12
    2c22:	8b 89       	ldd	r24, Y+19	; 0x13
    2c24:	9c 89       	ldd	r25, Y+20	; 0x14
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	53 e4       	ldi	r21, 0x43	; 67
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <CHR_LCD_8BIT_INITIALIZE+0x2c4>
    2c36:	7b c0       	rjmp	.+246    	; 0x2d2e <CHR_LCD_8BIT_INITIALIZE+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a e7       	ldi	r20, 0x7A	; 122
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8c 87       	std	Y+12, r24	; 0x0c
    2c52:	9d 87       	std	Y+13, r25	; 0x0d
    2c54:	ae 87       	std	Y+14, r26	; 0x0e
    2c56:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a ef       	ldi	r20, 0xFA	; 250
    2c66:	54 e4       	ldi	r21, 0x44	; 68
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	88 87       	std	Y+8, r24	; 0x08
    2c72:	99 87       	std	Y+9, r25	; 0x09
    2c74:	aa 87       	std	Y+10, r26	; 0x0a
    2c76:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c78:	68 85       	ldd	r22, Y+8	; 0x08
    2c7a:	79 85       	ldd	r23, Y+9	; 0x09
    2c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <CHR_LCD_8BIT_INITIALIZE+0x326>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9f 83       	std	Y+7, r25	; 0x07
    2c96:	8e 83       	std	Y+6, r24	; 0x06
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <CHR_LCD_8BIT_INITIALIZE+0x3a4>
	else if (__tmp > 65535)
    2c9a:	68 85       	ldd	r22, Y+8	; 0x08
    2c9c:	79 85       	ldd	r23, Y+9	; 0x09
    2c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <CHR_LCD_8BIT_INITIALIZE+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9f 83       	std	Y+7, r25	; 0x07
    2cd8:	8e 83       	std	Y+6, r24	; 0x06
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <CHR_LCD_8BIT_INITIALIZE+0x386>
    2cdc:	88 ec       	ldi	r24, 0xC8	; 200
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9d 83       	std	Y+5, r25	; 0x05
    2ce2:	8c 83       	std	Y+4, r24	; 0x04
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <CHR_LCD_8BIT_INITIALIZE+0x374>
    2cec:	9d 83       	std	Y+5, r25	; 0x05
    2cee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9f 83       	std	Y+7, r25	; 0x07
    2cf8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <CHR_LCD_8BIT_INITIALIZE+0x368>
    2d02:	24 c0       	rjmp	.+72     	; 0x2d4c <CHR_LCD_8BIT_INITIALIZE+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	68 85       	ldd	r22, Y+8	; 0x08
    2d06:	79 85       	ldd	r23, Y+9	; 0x09
    2d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9f 83       	std	Y+7, r25	; 0x07
    2d16:	8e 83       	std	Y+6, r24	; 0x06
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	9b 83       	std	Y+3, r25	; 0x03
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <CHR_LCD_8BIT_INITIALIZE+0x3b0>
    2d28:	9b 83       	std	Y+3, r25	; 0x03
    2d2a:	8a 83       	std	Y+2, r24	; 0x02
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <CHR_LCD_8BIT_INITIALIZE+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d2e:	69 89       	ldd	r22, Y+17	; 0x11
    2d30:	7a 89       	ldd	r23, Y+18	; 0x12
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	88 8b       	std	Y+16, r24	; 0x10
    2d40:	88 89       	ldd	r24, Y+16	; 0x10
    2d42:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	8a 95       	dec	r24
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <CHR_LCD_8BIT_INITIALIZE+0x3d2>
    2d4a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    2d4c:	88 ad       	ldd	r24, Y+56	; 0x38
    2d4e:	99 ad       	ldd	r25, Y+57	; 0x39
    2d50:	68 e3       	ldi	r22, 0x38	; 56
    2d52:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d56:	8f ab       	std	Y+55, r24	; 0x37

		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_CLEAR_DISPLAY);
    2d58:	88 ad       	ldd	r24, Y+56	; 0x38
    2d5a:	99 ad       	ldd	r25, Y+57	; 0x39
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d62:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_CURSOR_HOME);
    2d64:	88 ad       	ldd	r24, Y+56	; 0x38
    2d66:	99 ad       	ldd	r25, Y+57	; 0x39
    2d68:	62 e0       	ldi	r22, 0x02	; 2
    2d6a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d6e:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_ENS_INC_SFT_OFF);
    2d70:	88 ad       	ldd	r24, Y+56	; 0x38
    2d72:	99 ad       	ldd	r25, Y+57	; 0x39
    2d74:	66 e0       	ldi	r22, 0x06	; 6
    2d76:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d7a:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_DSP_ON_ULC_OFF_BLC_OFF);
    2d7c:	88 ad       	ldd	r24, Y+56	; 0x38
    2d7e:	99 ad       	ldd	r25, Y+57	; 0x39
    2d80:	6c e0       	ldi	r22, 0x0C	; 12
    2d82:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d86:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_FNS_8BIT_2DL_F58);
    2d88:	88 ad       	ldd	r24, Y+56	; 0x38
    2d8a:	99 ad       	ldd	r25, Y+57	; 0x39
    2d8c:	68 e3       	ldi	r22, 0x38	; 56
    2d8e:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d92:	8f ab       	std	Y+55, r24	; 0x37
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , CHR_LCD_DDRAM_STA);
    2d94:	88 ad       	ldd	r24, Y+56	; 0x38
    2d96:	99 ad       	ldd	r25, Y+57	; 0x39
    2d98:	60 e8       	ldi	r22, 0x80	; 128
    2d9a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    2d9e:	8f ab       	std	Y+55, r24	; 0x37
	}
	return Retval;
    2da0:	8f a9       	ldd	r24, Y+55	; 0x37
}
    2da2:	e9 96       	adiw	r28, 0x39	; 57
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <CHR_LCD_8BIT_SEND_COMMAND>:

#endif
#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_COMMAND(const CHR_LCD_8BIT_T *lcd , uint8 command){
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <CHR_LCD_8BIT_SEND_COMMAND+0x6>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <CHR_LCD_8BIT_SEND_COMMAND+0x8>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <CHR_LCD_8BIT_SEND_COMMAND+0xa>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	9d 83       	std	Y+5, r25	; 0x05
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
    2dc6:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Retval = E_OK;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <CHR_LCD_8BIT_SEND_COMMAND+0x24>
		Retval = E_NOT_OK;
    2dd4:	1b 82       	std	Y+3, r1	; 0x03
    2dd6:	32 c0       	rjmp	.+100    	; 0x2e3c <CHR_LCD_8BIT_SEND_COMMAND+0x88>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2de2:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < 8 ; i++){
    2de4:	1a 82       	std	Y+2, r1	; 0x02
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	1f c0       	rjmp	.+62     	; 0x2e28 <CHR_LCD_8BIT_SEND_COMMAND+0x74>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , ((command >> i) & 0x01));
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	9c 01       	movw	r18, r24
    2df0:	2e 5f       	subi	r18, 0xFE	; 254
    2df2:	3f 4f       	sbci	r19, 0xFF	; 255
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	a9 01       	movw	r20, r18
    2dfa:	48 0f       	add	r20, r24
    2dfc:	59 1f       	adc	r21, r25
    2dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	09 80       	ldd	r0, Y+1	; 0x01
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <CHR_LCD_8BIT_SEND_COMMAND+0x58>
    2e08:	95 95       	asr	r25
    2e0a:	87 95       	ror	r24
    2e0c:	0a 94       	dec	r0
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <CHR_LCD_8BIT_SEND_COMMAND+0x54>
    2e10:	28 2f       	mov	r18, r24
    2e12:	21 70       	andi	r18, 0x01	; 1
    2e14:	ca 01       	movw	r24, r20
    2e16:	62 2f       	mov	r22, r18
    2e18:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
		Retval = E_NOT_OK;
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
		for(int i = 0; i < 8 ; i++){
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	88 30       	cpi	r24, 0x08	; 8
    2e2e:	91 05       	cpc	r25, r1
    2e30:	e4 f2       	brlt	.-72     	; 0x2dea <CHR_LCD_8BIT_SEND_COMMAND+0x36>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , ((command >> i) & 0x01));
		}
		Retval = CHR_LCD_8BIT_SEND_ENABLE_SIGNAL(lcd);
    2e32:	8c 81       	ldd	r24, Y+4	; 0x04
    2e34:	9d 81       	ldd	r25, Y+5	; 0x05
    2e36:	0e 94 c3 1a 	call	0x3586	; 0x3586 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL>
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Retval;
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e3e:	26 96       	adiw	r28, 0x06	; 6
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <CHR_LCD_8BIT_SEND_CHAR_DATA>:

#endif
#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_CHAR_DATA(const CHR_LCD_8BIT_T *lcd , uint8 data){
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x6>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x8>
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <CHR_LCD_8BIT_SEND_CHAR_DATA+0xa>
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	9d 83       	std	Y+5, r25	; 0x05
    2e60:	8c 83       	std	Y+4, r24	; 0x04
    2e62:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Retval = E_OK;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
    2e68:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x24>
		Retval = E_NOT_OK;
    2e70:	1b 82       	std	Y+3, r1	; 0x03
    2e72:	32 c0       	rjmp	.+100    	; 0x2ed8 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x88>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_HIGH);
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < 8 ; i++){
    2e80:	1a 82       	std	Y+2, r1	; 0x02
    2e82:	19 82       	std	Y+1, r1	; 0x01
    2e84:	1f c0       	rjmp	.+62     	; 0x2ec4 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x74>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , ((data >> i) & 0x01));
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	9c 01       	movw	r18, r24
    2e8c:	2e 5f       	subi	r18, 0xFE	; 254
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	a9 01       	movw	r20, r18
    2e96:	48 0f       	add	r20, r24
    2e98:	59 1f       	adc	r21, r25
    2e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	09 80       	ldd	r0, Y+1	; 0x01
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x58>
    2ea4:	95 95       	asr	r25
    2ea6:	87 95       	ror	r24
    2ea8:	0a 94       	dec	r0
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x54>
    2eac:	28 2f       	mov	r18, r24
    2eae:	21 70       	andi	r18, 0x01	; 1
    2eb0:	ca 01       	movw	r24, r20
    2eb2:	62 2f       	mov	r22, r18
    2eb4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    2eb8:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
		Retval = E_NOT_OK;
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_HIGH);
		for(int i = 0; i < 8 ; i++){
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	88 30       	cpi	r24, 0x08	; 8
    2eca:	91 05       	cpc	r25, r1
    2ecc:	e4 f2       	brlt	.-72     	; 0x2e86 <CHR_LCD_8BIT_SEND_CHAR_DATA+0x36>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , ((data >> i) & 0x01));
		}
		Retval = CHR_LCD_8BIT_SEND_ENABLE_SIGNAL(lcd);
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL>
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Retval;
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2eda:	26 96       	adiw	r28, 0x06	; 6
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <CHR_LCD_8BIT_SEND_CHAR_POS>:

#endif
#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_CHAR_POS(const CHR_LCD_8BIT_T *lcd , uint8 data , uint8 row , uint8 column){
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <CHR_LCD_8BIT_SEND_CHAR_POS+0x6>
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <CHR_LCD_8BIT_SEND_CHAR_POS+0x8>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <CHR_LCD_8BIT_SEND_CHAR_POS+0xa>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9b 83       	std	Y+3, r25	; 0x03
    2efc:	8a 83       	std	Y+2, r24	; 0x02
    2efe:	6c 83       	std	Y+4, r22	; 0x04
    2f00:	4d 83       	std	Y+5, r20	; 0x05
    2f02:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType Retval = E_OK;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <CHR_LCD_8BIT_SEND_CHAR_POS+0x28>
		Retval = E_NOT_OK;
    2f10:	19 82       	std	Y+1, r1	; 0x01
    2f12:	0d c0       	rjmp	.+26     	; 0x2f2e <CHR_LCD_8BIT_SEND_CHAR_POS+0x42>
	}
	else{
		Retval = CHR_LCD_8BIT_SET_CURSOR(lcd , row , column);
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	9b 81       	ldd	r25, Y+3	; 0x03
    2f18:	6d 81       	ldd	r22, Y+5	; 0x05
    2f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f1c:	0e 94 ad 1b 	call	0x375a	; 0x375a <CHR_LCD_8BIT_SET_CURSOR>
    2f20:	89 83       	std	Y+1, r24	; 0x01
		Retval = CHR_LCD_8BIT_SEND_CHAR_DATA(lcd , data);
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	9b 81       	ldd	r25, Y+3	; 0x03
    2f26:	6c 81       	ldd	r22, Y+4	; 0x04
    2f28:	0e 94 28 17 	call	0x2e50	; 0x2e50 <CHR_LCD_8BIT_SEND_CHAR_DATA>
    2f2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f30:	26 96       	adiw	r28, 0x06	; 6
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <CHR_LCD_8BIT_SEND_STRING>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_STRING(const CHR_LCD_8BIT_T *lcd , uint8 *str){
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <CHR_LCD_8BIT_SEND_STRING+0x6>
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <CHR_LCD_8BIT_SEND_STRING+0x8>
    2f4a:	0f 92       	push	r0
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	7d 83       	std	Y+5, r23	; 0x05
    2f56:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Retval = E_OK;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str){
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <CHR_LCD_8BIT_SEND_STRING+0x2a>
    2f64:	8c 81       	ldd	r24, Y+4	; 0x04
    2f66:	9d 81       	ldd	r25, Y+5	; 0x05
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	79 f4       	brne	.+30     	; 0x2f8a <CHR_LCD_8BIT_SEND_STRING+0x48>
		Retval = E_NOT_OK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
    2f6e:	12 c0       	rjmp	.+36     	; 0x2f94 <CHR_LCD_8BIT_SEND_STRING+0x52>
	}
	else{
		while(*str){
			CHR_LCD_8BIT_SEND_CHAR_DATA(lcd , *str++);
    2f70:	ec 81       	ldd	r30, Y+4	; 0x04
    2f72:	fd 81       	ldd	r31, Y+5	; 0x05
    2f74:	20 81       	ld	r18, Z
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	9d 83       	std	Y+5, r25	; 0x05
    2f7e:	8c 83       	std	Y+4, r24	; 0x04
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	62 2f       	mov	r22, r18
    2f86:	0e 94 28 17 	call	0x2e50	; 0x2e50 <CHR_LCD_8BIT_SEND_CHAR_DATA>
	Std_ReturnType Retval = E_OK;
	if(NULL == lcd || NULL == str){
		Retval = E_NOT_OK;
	}
	else{
		while(*str){
    2f8a:	ec 81       	ldd	r30, Y+4	; 0x04
    2f8c:	fd 81       	ldd	r31, Y+5	; 0x05
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 23       	and	r24, r24
    2f92:	71 f7       	brne	.-36     	; 0x2f70 <CHR_LCD_8BIT_SEND_STRING+0x2e>
			CHR_LCD_8BIT_SEND_CHAR_DATA(lcd , *str++);
		}
	}
	return Retval;
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <CHR_LCD_8BIT_SEND_STRING_POS>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_STRING_POS(const CHR_LCD_8BIT_T *lcd , uint8 *str , uint8 row , uint8 column){
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	27 97       	sbiw	r28, 0x07	; 7
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	9b 83       	std	Y+3, r25	; 0x03
    2fbc:	8a 83       	std	Y+2, r24	; 0x02
    2fbe:	7d 83       	std	Y+5, r23	; 0x05
    2fc0:	6c 83       	std	Y+4, r22	; 0x04
    2fc2:	4e 83       	std	Y+6, r20	; 0x06
    2fc4:	2f 83       	std	Y+7, r18	; 0x07
	Std_ReturnType Retval = E_OK;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str){
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	21 f0       	breq	.+8      	; 0x2fda <CHR_LCD_8BIT_SEND_STRING_POS+0x34>
    2fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	a9 f4       	brne	.+42     	; 0x3004 <CHR_LCD_8BIT_SEND_STRING_POS+0x5e>
		Retval = E_NOT_OK;
    2fda:	19 82       	std	Y+1, r1	; 0x01
    2fdc:	18 c0       	rjmp	.+48     	; 0x300e <CHR_LCD_8BIT_SEND_STRING_POS+0x68>
	}
	else{
		while(*str){
			CHR_LCD_8BIT_SEND_CHAR_POS(lcd , *str++ , row , column++);
    2fde:	ec 81       	ldd	r30, Y+4	; 0x04
    2fe0:	fd 81       	ldd	r31, Y+5	; 0x05
    2fe2:	20 81       	ld	r18, Z
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	9d 83       	std	Y+5, r25	; 0x05
    2fec:	8c 83       	std	Y+4, r24	; 0x04
    2fee:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff2:	8f 5f       	subi	r24, 0xFF	; 255
    2ff4:	8f 83       	std	Y+7, r24	; 0x07
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	62 2f       	mov	r22, r18
    2ffc:	4e 81       	ldd	r20, Y+6	; 0x06
    2ffe:	23 2f       	mov	r18, r19
    3000:	0e 94 76 17 	call	0x2eec	; 0x2eec <CHR_LCD_8BIT_SEND_CHAR_POS>
	Std_ReturnType Retval = E_OK;
	if(NULL == lcd || NULL == str){
		Retval = E_NOT_OK;
	}
	else{
		while(*str){
    3004:	ec 81       	ldd	r30, Y+4	; 0x04
    3006:	fd 81       	ldd	r31, Y+5	; 0x05
    3008:	80 81       	ld	r24, Z
    300a:	88 23       	and	r24, r24
    300c:	41 f7       	brne	.-48     	; 0x2fde <CHR_LCD_8BIT_SEND_STRING_POS+0x38>
			CHR_LCD_8BIT_SEND_CHAR_POS(lcd , *str++ , row , column++);
		}
	}
	return Retval;
    300e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3010:	27 96       	adiw	r28, 0x07	; 7
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <CHR_LCD_8BIT_SEND_CUSTOM_CHAR>:

#endif

#if CHR_LCD_CFG_ENABLE == CHR_LCD_8BIT_CFG

Std_ReturnType CHR_LCD_8BIT_SEND_CUSTOM_CHAR(const CHR_LCD_8BIT_T *lcd , uint8 row , uint8 column , uint8 chr[] , uint8 mem_pos){
    3022:	0f 93       	push	r16
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	2a 97       	sbiw	r28, 0x0a	; 10
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	9d 83       	std	Y+5, r25	; 0x05
    303a:	8c 83       	std	Y+4, r24	; 0x04
    303c:	6e 83       	std	Y+6, r22	; 0x06
    303e:	4f 83       	std	Y+7, r20	; 0x07
    3040:	39 87       	std	Y+9, r19	; 0x09
    3042:	28 87       	std	Y+8, r18	; 0x08
    3044:	0a 87       	std	Y+10, r16	; 0x0a
	Std_ReturnType Retval = E_OK;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
    304a:	8c 81       	ldd	r24, Y+4	; 0x04
    304c:	9d 81       	ldd	r25, Y+5	; 0x05
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	11 f4       	brne	.+4      	; 0x3056 <CHR_LCD_8BIT_SEND_CUSTOM_CHAR+0x34>
		Retval = E_NOT_OK;
    3052:	1b 82       	std	Y+3, r1	; 0x03
    3054:	34 c0       	rjmp	.+104    	; 0x30be <CHR_LCD_8BIT_SEND_CUSTOM_CHAR+0x9c>
	}
	else{
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (CHR_LCD_CGRAM_STA + mem_pos*8));
    3056:	8a 85       	ldd	r24, Y+10	; 0x0a
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	08 96       	adiw	r24, 0x08	; 8
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	28 2f       	mov	r18, r24
    306c:	8c 81       	ldd	r24, Y+4	; 0x04
    306e:	9d 81       	ldd	r25, Y+5	; 0x05
    3070:	62 2f       	mov	r22, r18
    3072:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    3076:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < 8 ; i++){
    3078:	1a 82       	std	Y+2, r1	; 0x02
    307a:	19 82       	std	Y+1, r1	; 0x01
    307c:	13 c0       	rjmp	.+38     	; 0x30a4 <CHR_LCD_8BIT_SEND_CUSTOM_CHAR+0x82>
			Retval = CHR_LCD_8BIT_SEND_CHAR_DATA(lcd , chr[i]);
    307e:	29 81       	ldd	r18, Y+1	; 0x01
    3080:	3a 81       	ldd	r19, Y+2	; 0x02
    3082:	88 85       	ldd	r24, Y+8	; 0x08
    3084:	99 85       	ldd	r25, Y+9	; 0x09
    3086:	fc 01       	movw	r30, r24
    3088:	e2 0f       	add	r30, r18
    308a:	f3 1f       	adc	r31, r19
    308c:	20 81       	ld	r18, Z
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	9d 81       	ldd	r25, Y+5	; 0x05
    3092:	62 2f       	mov	r22, r18
    3094:	0e 94 28 17 	call	0x2e50	; 0x2e50 <CHR_LCD_8BIT_SEND_CHAR_DATA>
    3098:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
		Retval = E_NOT_OK;
	}
	else{
		Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (CHR_LCD_CGRAM_STA + mem_pos*8));
		for(int i = 0; i < 8 ; i++){
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	01 96       	adiw	r24, 0x01	; 1
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	88 30       	cpi	r24, 0x08	; 8
    30aa:	91 05       	cpc	r25, r1
    30ac:	44 f3       	brlt	.-48     	; 0x307e <CHR_LCD_8BIT_SEND_CUSTOM_CHAR+0x5c>
			Retval = CHR_LCD_8BIT_SEND_CHAR_DATA(lcd , chr[i]);
		}
		Retval = CHR_LCD_8BIT_SEND_CHAR_POS(lcd , mem_pos , row ,column);
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	9d 81       	ldd	r25, Y+5	; 0x05
    30b2:	6a 85       	ldd	r22, Y+10	; 0x0a
    30b4:	4e 81       	ldd	r20, Y+6	; 0x06
    30b6:	2f 81       	ldd	r18, Y+7	; 0x07
    30b8:	0e 94 76 17 	call	0x2eec	; 0x2eec <CHR_LCD_8BIT_SEND_CHAR_POS>
    30bc:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Retval;
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30c0:	2a 96       	adiw	r28, 0x0a	; 10
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <CONVERT_CHAR_TO_STRING>:

#endif

Std_ReturnType CONVERT_CHAR_TO_STRING(uint8 data , uint8 *str){
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	00 d0       	rcall	.+0      	; 0x30da <CONVERT_CHAR_TO_STRING+0x6>
    30da:	00 d0       	rcall	.+0      	; 0x30dc <CONVERT_CHAR_TO_STRING+0x8>
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	8a 83       	std	Y+2, r24	; 0x02
    30e2:	7c 83       	std	Y+4, r23	; 0x04
    30e4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str){
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	11 f4       	brne	.+4      	; 0x30f6 <CONVERT_CHAR_TO_STRING+0x22>
		Retval = E_NOT_OK;
    30f2:	19 82       	std	Y+1, r1	; 0x01
    30f4:	25 c0       	rjmp	.+74     	; 0x3140 <CONVERT_CHAR_TO_STRING+0x6c>
	}
	else{
		memset(str,'\0',4);
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	70 e0       	ldi	r23, 0x00	; 0
    30fe:	44 e0       	ldi	r20, 0x04	; 4
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <memset>
		sprintf(str,"%i",data);
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	00 d0       	rcall	.+0      	; 0x310e <CONVERT_CHAR_TO_STRING+0x3a>
    310e:	00 d0       	rcall	.+0      	; 0x3110 <CONVERT_CHAR_TO_STRING+0x3c>
    3110:	00 d0       	rcall	.+0      	; 0x3112 <CONVERT_CHAR_TO_STRING+0x3e>
    3112:	ed b7       	in	r30, 0x3d	; 61
    3114:	fe b7       	in	r31, 0x3e	; 62
    3116:	31 96       	adiw	r30, 0x01	; 1
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	9c 81       	ldd	r25, Y+4	; 0x04
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24
    3120:	80 e6       	ldi	r24, 0x60	; 96
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	93 83       	std	Z+3, r25	; 0x03
    3126:	82 83       	std	Z+2, r24	; 0x02
    3128:	35 83       	std	Z+5, r19	; 0x05
    312a:	24 83       	std	Z+4, r18	; 0x04
    312c:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <sprintf>
    3130:	8d b7       	in	r24, 0x3d	; 61
    3132:	9e b7       	in	r25, 0x3e	; 62
    3134:	06 96       	adiw	r24, 0x06	; 6
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	9e bf       	out	0x3e, r25	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	8d bf       	out	0x3d, r24	; 61
	}
	return Retval;
    3140:	89 81       	ldd	r24, Y+1	; 0x01
}
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <CONVERT_SHORT_TO_STRING>:
Std_ReturnType CONVERT_SHORT_TO_STRING(uint8 data , uint8 *str){
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	00 d0       	rcall	.+0      	; 0x3156 <CONVERT_SHORT_TO_STRING+0x6>
    3156:	00 d0       	rcall	.+0      	; 0x3158 <CONVERT_SHORT_TO_STRING+0x8>
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	8a 83       	std	Y+2, r24	; 0x02
    315e:	7c 83       	std	Y+4, r23	; 0x04
    3160:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str){
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	11 f4       	brne	.+4      	; 0x3172 <CONVERT_SHORT_TO_STRING+0x22>
		Retval = E_NOT_OK;
    316e:	19 82       	std	Y+1, r1	; 0x01
    3170:	25 c0       	rjmp	.+74     	; 0x31bc <CONVERT_SHORT_TO_STRING+0x6c>
	}
	else{
		memset(str,'\0',6);
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	70 e0       	ldi	r23, 0x00	; 0
    317a:	46 e0       	ldi	r20, 0x06	; 6
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <memset>
		sprintf(str,"%i",data);
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	00 d0       	rcall	.+0      	; 0x318a <CONVERT_SHORT_TO_STRING+0x3a>
    318a:	00 d0       	rcall	.+0      	; 0x318c <CONVERT_SHORT_TO_STRING+0x3c>
    318c:	00 d0       	rcall	.+0      	; 0x318e <CONVERT_SHORT_TO_STRING+0x3e>
    318e:	ed b7       	in	r30, 0x3d	; 61
    3190:	fe b7       	in	r31, 0x3e	; 62
    3192:	31 96       	adiw	r30, 0x01	; 1
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	80 83       	st	Z, r24
    319c:	80 e6       	ldi	r24, 0x60	; 96
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	93 83       	std	Z+3, r25	; 0x03
    31a2:	82 83       	std	Z+2, r24	; 0x02
    31a4:	35 83       	std	Z+5, r19	; 0x05
    31a6:	24 83       	std	Z+4, r18	; 0x04
    31a8:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <sprintf>
    31ac:	8d b7       	in	r24, 0x3d	; 61
    31ae:	9e b7       	in	r25, 0x3e	; 62
    31b0:	06 96       	adiw	r24, 0x06	; 6
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	9e bf       	out	0x3e, r25	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	8d bf       	out	0x3d, r24	; 61
	}
	return Retval;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <CONVERT_INT_TO_STRING>:
Std_ReturnType CONVERT_INT_TO_STRING(uint8 data , uint8 *str){
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <CONVERT_INT_TO_STRING+0x6>
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <CONVERT_INT_TO_STRING+0x8>
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	8a 83       	std	Y+2, r24	; 0x02
    31da:	7c 83       	std	Y+4, r23	; 0x04
    31dc:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Retval = E_OK;
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str){
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	11 f4       	brne	.+4      	; 0x31ee <CONVERT_INT_TO_STRING+0x22>
		Retval = E_NOT_OK;
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	25 c0       	rjmp	.+74     	; 0x3238 <CONVERT_INT_TO_STRING+0x6c>
	}
	else{
		memset(str,'\0',11);
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	4b e0       	ldi	r20, 0x0B	; 11
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <memset>
		sprintf(str,"%i",data);
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	00 d0       	rcall	.+0      	; 0x3206 <CONVERT_INT_TO_STRING+0x3a>
    3206:	00 d0       	rcall	.+0      	; 0x3208 <CONVERT_INT_TO_STRING+0x3c>
    3208:	00 d0       	rcall	.+0      	; 0x320a <CONVERT_INT_TO_STRING+0x3e>
    320a:	ed b7       	in	r30, 0x3d	; 61
    320c:	fe b7       	in	r31, 0x3e	; 62
    320e:	31 96       	adiw	r30, 0x01	; 1
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	80 e6       	ldi	r24, 0x60	; 96
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	93 83       	std	Z+3, r25	; 0x03
    321e:	82 83       	std	Z+2, r24	; 0x02
    3220:	35 83       	std	Z+5, r19	; 0x05
    3222:	24 83       	std	Z+4, r18	; 0x04
    3224:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <sprintf>
    3228:	8d b7       	in	r24, 0x3d	; 61
    322a:	9e b7       	in	r25, 0x3e	; 62
    322c:	06 96       	adiw	r24, 0x06	; 6
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	9e bf       	out	0x3e, r25	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	8d bf       	out	0x3d, r24	; 61
	}
	return Retval;
    3238:	89 81       	ldd	r24, Y+1	; 0x01
}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <CHR_LCD_4BIT_SEND_4BIT>:

/********** Helper Functions  ***********/

static Std_ReturnType CHR_LCD_4BIT_SEND_4BIT(const CHR_LCD_4BIT_T *lcd , uint8 data){
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <CHR_LCD_4BIT_SEND_4BIT+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <CHR_LCD_4BIT_SEND_4BIT+0x8>
    3250:	00 d0       	rcall	.+0      	; 0x3252 <CHR_LCD_4BIT_SEND_4BIT+0xa>
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	9d 83       	std	Y+5, r25	; 0x05
    3258:	8c 83       	std	Y+4, r24	; 0x04
    325a:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Retval = E_OK;
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == lcd){
    3260:	8c 81       	ldd	r24, Y+4	; 0x04
    3262:	9d 81       	ldd	r25, Y+5	; 0x05
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	11 f4       	brne	.+4      	; 0x326c <CHR_LCD_4BIT_SEND_4BIT+0x24>
		Retval = E_NOT_OK;
    3268:	1b 82       	std	Y+3, r1	; 0x03
    326a:	27 c0       	rjmp	.+78     	; 0x32ba <CHR_LCD_4BIT_SEND_4BIT+0x72>
	}
	else{
		for(int i = 0; i < 4 ; i++){
    326c:	1a 82       	std	Y+2, r1	; 0x02
    326e:	19 82       	std	Y+1, r1	; 0x01
    3270:	1f c0       	rjmp	.+62     	; 0x32b0 <CHR_LCD_4BIT_SEND_4BIT+0x68>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , (data >> i)&0x01);
    3272:	8c 81       	ldd	r24, Y+4	; 0x04
    3274:	9d 81       	ldd	r25, Y+5	; 0x05
    3276:	9c 01       	movw	r18, r24
    3278:	2e 5f       	subi	r18, 0xFE	; 254
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	a9 01       	movw	r20, r18
    3282:	48 0f       	add	r20, r24
    3284:	59 1f       	adc	r21, r25
    3286:	8e 81       	ldd	r24, Y+6	; 0x06
    3288:	88 2f       	mov	r24, r24
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	09 80       	ldd	r0, Y+1	; 0x01
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <CHR_LCD_4BIT_SEND_4BIT+0x4c>
    3290:	95 95       	asr	r25
    3292:	87 95       	ror	r24
    3294:	0a 94       	dec	r0
    3296:	e2 f7       	brpl	.-8      	; 0x3290 <CHR_LCD_4BIT_SEND_4BIT+0x48>
    3298:	28 2f       	mov	r18, r24
    329a:	21 70       	andi	r18, 0x01	; 1
    329c:	ca 01       	movw	r24, r20
    329e:	62 2f       	mov	r22, r18
    32a0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    32a4:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
	if(NULL == lcd){
		Retval = E_NOT_OK;
	}
	else{
		for(int i = 0; i < 4 ; i++){
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	84 30       	cpi	r24, 0x04	; 4
    32b6:	91 05       	cpc	r25, r1
    32b8:	e4 f2       	brlt	.-72     	; 0x3272 <CHR_LCD_4BIT_SEND_4BIT+0x2a>
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->LCD_DATA_PINS[i]) , (data >> i)&0x01);
		}
	}
	return Retval;
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32bc:	26 96       	adiw	r28, 0x06	; 6
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL>:

static Std_ReturnType CHR_LCD_4BIT_SEND_ENABLE_SIGNAL(const CHR_LCD_4BIT_T *lcd){
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	6b 97       	sbiw	r28, 0x1b	; 27
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	9b 8f       	std	Y+27, r25	; 0x1b
    32e4:	8a 8f       	std	Y+26, r24	; 0x1a
	Std_ReturnType Retval = E_OK;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd){
    32ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x28>
		Retval = E_NOT_OK;
    32f2:	19 8e       	std	Y+25, r1	; 0x19
    32f4:	cc c0       	rjmp	.+408    	; 0x348e <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x1c0>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->EN_PIN) , GPIO_HIGH);
    32f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    3302:	89 8f       	std	Y+25, r24	; 0x19
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 ea       	ldi	r26, 0xA0	; 160
    330a:	b0 e4       	ldi	r27, 0x40	; 64
    330c:	8d 8b       	std	Y+21, r24	; 0x15
    330e:	9e 8b       	std	Y+22, r25	; 0x16
    3310:	af 8b       	std	Y+23, r26	; 0x17
    3312:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3314:	6d 89       	ldd	r22, Y+21	; 0x15
    3316:	7e 89       	ldd	r23, Y+22	; 0x16
    3318:	8f 89       	ldd	r24, Y+23	; 0x17
    331a:	98 8d       	ldd	r25, Y+24	; 0x18
    331c:	2b ea       	ldi	r18, 0xAB	; 171
    331e:	3a ea       	ldi	r19, 0xAA	; 170
    3320:	4a e2       	ldi	r20, 0x2A	; 42
    3322:	50 e4       	ldi	r21, 0x40	; 64
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	89 8b       	std	Y+17, r24	; 0x11
    332e:	9a 8b       	std	Y+18, r25	; 0x12
    3330:	ab 8b       	std	Y+19, r26	; 0x13
    3332:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3334:	69 89       	ldd	r22, Y+17	; 0x11
    3336:	7a 89       	ldd	r23, Y+18	; 0x12
    3338:	8b 89       	ldd	r24, Y+19	; 0x13
    333a:	9c 89       	ldd	r25, Y+20	; 0x14
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	1c f4       	brge	.+6      	; 0x3352 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x84>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	88 8b       	std	Y+16, r24	; 0x10
    3350:	91 c0       	rjmp	.+290    	; 0x3474 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x1a6>
	else if (__tmp > 255)
    3352:	69 89       	ldd	r22, Y+17	; 0x11
    3354:	7a 89       	ldd	r23, Y+18	; 0x12
    3356:	8b 89       	ldd	r24, Y+19	; 0x13
    3358:	9c 89       	ldd	r25, Y+20	; 0x14
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	4f e7       	ldi	r20, 0x7F	; 127
    3360:	53 e4       	ldi	r21, 0x43	; 67
    3362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3366:	18 16       	cp	r1, r24
    3368:	0c f0       	brlt	.+2      	; 0x336c <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x9e>
    336a:	7b c0       	rjmp	.+246    	; 0x3462 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x194>
	{
		_delay_ms(__us / 1000.0);
    336c:	6d 89       	ldd	r22, Y+21	; 0x15
    336e:	7e 89       	ldd	r23, Y+22	; 0x16
    3370:	8f 89       	ldd	r24, Y+23	; 0x17
    3372:	98 8d       	ldd	r25, Y+24	; 0x18
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	4a e7       	ldi	r20, 0x7A	; 122
    337a:	54 e4       	ldi	r21, 0x44	; 68
    337c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8c 87       	std	Y+12, r24	; 0x0c
    3386:	9d 87       	std	Y+13, r25	; 0x0d
    3388:	ae 87       	std	Y+14, r26	; 0x0e
    338a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338c:	6c 85       	ldd	r22, Y+12	; 0x0c
    338e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3390:	8e 85       	ldd	r24, Y+14	; 0x0e
    3392:	9f 85       	ldd	r25, Y+15	; 0x0f
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	4a ef       	ldi	r20, 0xFA	; 250
    339a:	54 e4       	ldi	r21, 0x44	; 68
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	88 87       	std	Y+8, r24	; 0x08
    33a6:	99 87       	std	Y+9, r25	; 0x09
    33a8:	aa 87       	std	Y+10, r26	; 0x0a
    33aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33ac:	68 85       	ldd	r22, Y+8	; 0x08
    33ae:	79 85       	ldd	r23, Y+9	; 0x09
    33b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e8       	ldi	r20, 0x80	; 128
    33ba:	5f e3       	ldi	r21, 0x3F	; 63
    33bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c0:	88 23       	and	r24, r24
    33c2:	2c f4       	brge	.+10     	; 0x33ce <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x100>
		__ticks = 1;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9f 83       	std	Y+7, r25	; 0x07
    33ca:	8e 83       	std	Y+6, r24	; 0x06
    33cc:	3f c0       	rjmp	.+126    	; 0x344c <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x17e>
	else if (__tmp > 65535)
    33ce:	68 85       	ldd	r22, Y+8	; 0x08
    33d0:	79 85       	ldd	r23, Y+9	; 0x09
    33d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	4c f5       	brge	.+82     	; 0x3438 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    33e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    33ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    33ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9f 83       	std	Y+7, r25	; 0x07
    340c:	8e 83       	std	Y+6, r24	; 0x06
    340e:	0f c0       	rjmp	.+30     	; 0x342e <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x160>
    3410:	88 ec       	ldi	r24, 0xC8	; 200
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	9d 83       	std	Y+5, r25	; 0x05
    3416:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	9d 81       	ldd	r25, Y+5	; 0x05
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x14e>
    3420:	9d 83       	std	Y+5, r25	; 0x05
    3422:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	8e 81       	ldd	r24, Y+6	; 0x06
    3426:	9f 81       	ldd	r25, Y+7	; 0x07
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	9f 83       	std	Y+7, r25	; 0x07
    342c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	8e 81       	ldd	r24, Y+6	; 0x06
    3430:	9f 81       	ldd	r25, Y+7	; 0x07
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	69 f7       	brne	.-38     	; 0x3410 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x142>
    3436:	24 c0       	rjmp	.+72     	; 0x3480 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	68 85       	ldd	r22, Y+8	; 0x08
    343a:	79 85       	ldd	r23, Y+9	; 0x09
    343c:	8a 85       	ldd	r24, Y+10	; 0x0a
    343e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9f 83       	std	Y+7, r25	; 0x07
    344a:	8e 83       	std	Y+6, r24	; 0x06
    344c:	8e 81       	ldd	r24, Y+6	; 0x06
    344e:	9f 81       	ldd	r25, Y+7	; 0x07
    3450:	9b 83       	std	Y+3, r25	; 0x03
    3452:	8a 83       	std	Y+2, r24	; 0x02
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x18a>
    345c:	9b 83       	std	Y+3, r25	; 0x03
    345e:	8a 83       	std	Y+2, r24	; 0x02
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3462:	69 89       	ldd	r22, Y+17	; 0x11
    3464:	7a 89       	ldd	r23, Y+18	; 0x12
    3466:	8b 89       	ldd	r24, Y+19	; 0x13
    3468:	9c 89       	ldd	r25, Y+20	; 0x14
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	88 8b       	std	Y+16, r24	; 0x10
    3474:	88 89       	ldd	r24, Y+16	; 0x10
    3476:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	8a 95       	dec	r24
    347c:	f1 f7       	brne	.-4      	; 0x347a <CHR_LCD_4BIT_SEND_ENABLE_SIGNAL+0x1ac>
    347e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->EN_PIN) , GPIO_LOW);
    3480:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3482:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3484:	01 96       	adiw	r24, 0x01	; 1
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    348c:	89 8f       	std	Y+25, r24	; 0x19
	}
	return Retval;
    348e:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3490:	6b 96       	adiw	r28, 0x1b	; 27
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <CHR_LCD_4BIT_SET_CURSOR>:

static Std_ReturnType CHR_LCD_4BIT_SET_CURSOR(const CHR_LCD_4BIT_T *lcd , uint8 row , uint8 column){
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	27 97       	sbiw	r28, 0x07	; 7
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	9b 83       	std	Y+3, r25	; 0x03
    34b8:	8a 83       	std	Y+2, r24	; 0x02
    34ba:	6c 83       	std	Y+4, r22	; 0x04
    34bc:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType Retval = E_OK;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == lcd){
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	9b 81       	ldd	r25, Y+3	; 0x03
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	11 f4       	brne	.+4      	; 0x34ce <CHR_LCD_4BIT_SET_CURSOR+0x2c>
			Retval = E_NOT_OK;
    34ca:	19 82       	std	Y+1, r1	; 0x01
    34cc:	52 c0       	rjmp	.+164    	; 0x3572 <CHR_LCD_4BIT_SET_CURSOR+0xd0>
		}
		else{
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
    34ce:	8a 81       	ldd	r24, Y+2	; 0x02
    34d0:	9b 81       	ldd	r25, Y+3	; 0x03
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    34d8:	89 83       	std	Y+1, r24	; 0x01
			column--;
    34da:	8d 81       	ldd	r24, Y+5	; 0x05
    34dc:	81 50       	subi	r24, 0x01	; 1
    34de:	8d 83       	std	Y+5, r24	; 0x05
			switch(row){
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	3f 83       	std	Y+7, r19	; 0x07
    34e8:	2e 83       	std	Y+6, r18	; 0x06
    34ea:	8e 81       	ldd	r24, Y+6	; 0x06
    34ec:	9f 81       	ldd	r25, Y+7	; 0x07
    34ee:	82 30       	cpi	r24, 0x02	; 2
    34f0:	91 05       	cpc	r25, r1
    34f2:	01 f1       	breq	.+64     	; 0x3534 <CHR_LCD_4BIT_SET_CURSOR+0x92>
    34f4:	2e 81       	ldd	r18, Y+6	; 0x06
    34f6:	3f 81       	ldd	r19, Y+7	; 0x07
    34f8:	23 30       	cpi	r18, 0x03	; 3
    34fa:	31 05       	cpc	r19, r1
    34fc:	34 f4       	brge	.+12     	; 0x350a <CHR_LCD_4BIT_SET_CURSOR+0x68>
    34fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3500:	9f 81       	ldd	r25, Y+7	; 0x07
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	91 05       	cpc	r25, r1
    3506:	61 f0       	breq	.+24     	; 0x3520 <CHR_LCD_4BIT_SET_CURSOR+0x7e>
    3508:	33 c0       	rjmp	.+102    	; 0x3570 <CHR_LCD_4BIT_SET_CURSOR+0xce>
    350a:	2e 81       	ldd	r18, Y+6	; 0x06
    350c:	3f 81       	ldd	r19, Y+7	; 0x07
    350e:	23 30       	cpi	r18, 0x03	; 3
    3510:	31 05       	cpc	r19, r1
    3512:	d1 f0       	breq	.+52     	; 0x3548 <CHR_LCD_4BIT_SET_CURSOR+0xa6>
    3514:	8e 81       	ldd	r24, Y+6	; 0x06
    3516:	9f 81       	ldd	r25, Y+7	; 0x07
    3518:	84 30       	cpi	r24, 0x04	; 4
    351a:	91 05       	cpc	r25, r1
    351c:	f9 f0       	breq	.+62     	; 0x355c <CHR_LCD_4BIT_SET_CURSOR+0xba>
    351e:	28 c0       	rjmp	.+80     	; 0x3570 <CHR_LCD_4BIT_SET_CURSOR+0xce>
			case ROW1:
				Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (0x80+column));
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	28 2f       	mov	r18, r24
    3524:	20 58       	subi	r18, 0x80	; 128
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	9b 81       	ldd	r25, Y+3	; 0x03
    352a:	62 2f       	mov	r22, r18
    352c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	1f c0       	rjmp	.+62     	; 0x3572 <CHR_LCD_4BIT_SET_CURSOR+0xd0>
				break;
			case ROW2:
				Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (0xC0+column));
    3534:	8d 81       	ldd	r24, Y+5	; 0x05
    3536:	28 2f       	mov	r18, r24
    3538:	20 54       	subi	r18, 0x40	; 64
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	62 2f       	mov	r22, r18
    3540:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	15 c0       	rjmp	.+42     	; 0x3572 <CHR_LCD_4BIT_SET_CURSOR+0xd0>
				break;
			case ROW3:
				Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (0x94+column));
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	28 2f       	mov	r18, r24
    354c:	2c 56       	subi	r18, 0x6C	; 108
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	62 2f       	mov	r22, r18
    3554:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	0b c0       	rjmp	.+22     	; 0x3572 <CHR_LCD_4BIT_SET_CURSOR+0xd0>
				break;
			case ROW4:
				Retval = CHR_LCD_4BIT_SEND_COMMAND(lcd , (0xD4+column));
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	28 2f       	mov	r18, r24
    3560:	2c 52       	subi	r18, 0x2C	; 44
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	62 2f       	mov	r22, r18
    3568:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CHR_LCD_4BIT_SEND_COMMAND>
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <CHR_LCD_4BIT_SET_CURSOR+0xd0>
				break;
			default:
				Retval = E_NOT_OK;
    3570:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
		}
		return Retval;
    3572:	89 81       	ldd	r24, Y+1	; 0x01
}
    3574:	27 96       	adiw	r28, 0x07	; 7
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL>:

static Std_ReturnType CHR_LCD_8BIT_SEND_ENABLE_SIGNAL(const CHR_LCD_8BIT_T *lcd){
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	6b 97       	sbiw	r28, 0x1b	; 27
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	9b 8f       	std	Y+27, r25	; 0x1b
    359c:	8a 8f       	std	Y+26, r24	; 0x1a
	Std_ReturnType Retval = E_OK;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd){
    35a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	11 f4       	brne	.+4      	; 0x35ae <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x28>
		Retval = E_NOT_OK;
    35aa:	19 8e       	std	Y+25, r1	; 0x19
    35ac:	cc c0       	rjmp	.+408    	; 0x3746 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x1c0>
	}
	else{
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->EN_PIN) , GPIO_HIGH);
    35ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    35ba:	89 8f       	std	Y+25, r24	; 0x19
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a0 ea       	ldi	r26, 0xA0	; 160
    35c2:	b0 e4       	ldi	r27, 0x40	; 64
    35c4:	8d 8b       	std	Y+21, r24	; 0x15
    35c6:	9e 8b       	std	Y+22, r25	; 0x16
    35c8:	af 8b       	std	Y+23, r26	; 0x17
    35ca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35cc:	6d 89       	ldd	r22, Y+21	; 0x15
    35ce:	7e 89       	ldd	r23, Y+22	; 0x16
    35d0:	8f 89       	ldd	r24, Y+23	; 0x17
    35d2:	98 8d       	ldd	r25, Y+24	; 0x18
    35d4:	2b ea       	ldi	r18, 0xAB	; 171
    35d6:	3a ea       	ldi	r19, 0xAA	; 170
    35d8:	4a e2       	ldi	r20, 0x2A	; 42
    35da:	50 e4       	ldi	r21, 0x40	; 64
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	89 8b       	std	Y+17, r24	; 0x11
    35e6:	9a 8b       	std	Y+18, r25	; 0x12
    35e8:	ab 8b       	std	Y+19, r26	; 0x13
    35ea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    35ec:	69 89       	ldd	r22, Y+17	; 0x11
    35ee:	7a 89       	ldd	r23, Y+18	; 0x12
    35f0:	8b 89       	ldd	r24, Y+19	; 0x13
    35f2:	9c 89       	ldd	r25, Y+20	; 0x14
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	1c f4       	brge	.+6      	; 0x360a <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x84>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	88 8b       	std	Y+16, r24	; 0x10
    3608:	91 c0       	rjmp	.+290    	; 0x372c <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x1a6>
	else if (__tmp > 255)
    360a:	69 89       	ldd	r22, Y+17	; 0x11
    360c:	7a 89       	ldd	r23, Y+18	; 0x12
    360e:	8b 89       	ldd	r24, Y+19	; 0x13
    3610:	9c 89       	ldd	r25, Y+20	; 0x14
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4f e7       	ldi	r20, 0x7F	; 127
    3618:	53 e4       	ldi	r21, 0x43	; 67
    361a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    361e:	18 16       	cp	r1, r24
    3620:	0c f0       	brlt	.+2      	; 0x3624 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x9e>
    3622:	7b c0       	rjmp	.+246    	; 0x371a <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x194>
	{
		_delay_ms(__us / 1000.0);
    3624:	6d 89       	ldd	r22, Y+21	; 0x15
    3626:	7e 89       	ldd	r23, Y+22	; 0x16
    3628:	8f 89       	ldd	r24, Y+23	; 0x17
    362a:	98 8d       	ldd	r25, Y+24	; 0x18
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	4a e7       	ldi	r20, 0x7A	; 122
    3632:	54 e4       	ldi	r21, 0x44	; 68
    3634:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	8c 87       	std	Y+12, r24	; 0x0c
    363e:	9d 87       	std	Y+13, r25	; 0x0d
    3640:	ae 87       	std	Y+14, r26	; 0x0e
    3642:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3644:	6c 85       	ldd	r22, Y+12	; 0x0c
    3646:	7d 85       	ldd	r23, Y+13	; 0x0d
    3648:	8e 85       	ldd	r24, Y+14	; 0x0e
    364a:	9f 85       	ldd	r25, Y+15	; 0x0f
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	4a ef       	ldi	r20, 0xFA	; 250
    3652:	54 e4       	ldi	r21, 0x44	; 68
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	88 87       	std	Y+8, r24	; 0x08
    365e:	99 87       	std	Y+9, r25	; 0x09
    3660:	aa 87       	std	Y+10, r26	; 0x0a
    3662:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3664:	68 85       	ldd	r22, Y+8	; 0x08
    3666:	79 85       	ldd	r23, Y+9	; 0x09
    3668:	8a 85       	ldd	r24, Y+10	; 0x0a
    366a:	9b 85       	ldd	r25, Y+11	; 0x0b
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e8       	ldi	r20, 0x80	; 128
    3672:	5f e3       	ldi	r21, 0x3F	; 63
    3674:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3678:	88 23       	and	r24, r24
    367a:	2c f4       	brge	.+10     	; 0x3686 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x100>
		__ticks = 1;
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	9f 83       	std	Y+7, r25	; 0x07
    3682:	8e 83       	std	Y+6, r24	; 0x06
    3684:	3f c0       	rjmp	.+126    	; 0x3704 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x17e>
	else if (__tmp > 65535)
    3686:	68 85       	ldd	r22, Y+8	; 0x08
    3688:	79 85       	ldd	r23, Y+9	; 0x09
    368a:	8a 85       	ldd	r24, Y+10	; 0x0a
    368c:	9b 85       	ldd	r25, Y+11	; 0x0b
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	57 e4       	ldi	r21, 0x47	; 71
    3696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	4c f5       	brge	.+82     	; 0x36f0 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369e:	6c 85       	ldd	r22, Y+12	; 0x0c
    36a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    36a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e2       	ldi	r20, 0x20	; 32
    36ac:	51 e4       	ldi	r21, 0x41	; 65
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9f 83       	std	Y+7, r25	; 0x07
    36c4:	8e 83       	std	Y+6, r24	; 0x06
    36c6:	0f c0       	rjmp	.+30     	; 0x36e6 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x160>
    36c8:	88 ec       	ldi	r24, 0xC8	; 200
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	9d 83       	std	Y+5, r25	; 0x05
    36ce:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36d0:	8c 81       	ldd	r24, Y+4	; 0x04
    36d2:	9d 81       	ldd	r25, Y+5	; 0x05
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x14e>
    36d8:	9d 83       	std	Y+5, r25	; 0x05
    36da:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36dc:	8e 81       	ldd	r24, Y+6	; 0x06
    36de:	9f 81       	ldd	r25, Y+7	; 0x07
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	9f 83       	std	Y+7, r25	; 0x07
    36e4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e6:	8e 81       	ldd	r24, Y+6	; 0x06
    36e8:	9f 81       	ldd	r25, Y+7	; 0x07
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	69 f7       	brne	.-38     	; 0x36c8 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x142>
    36ee:	24 c0       	rjmp	.+72     	; 0x3738 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f0:	68 85       	ldd	r22, Y+8	; 0x08
    36f2:	79 85       	ldd	r23, Y+9	; 0x09
    36f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    36f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9f 83       	std	Y+7, r25	; 0x07
    3702:	8e 83       	std	Y+6, r24	; 0x06
    3704:	8e 81       	ldd	r24, Y+6	; 0x06
    3706:	9f 81       	ldd	r25, Y+7	; 0x07
    3708:	9b 83       	std	Y+3, r25	; 0x03
    370a:	8a 83       	std	Y+2, r24	; 0x02
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x18a>
    3714:	9b 83       	std	Y+3, r25	; 0x03
    3716:	8a 83       	std	Y+2, r24	; 0x02
    3718:	0f c0       	rjmp	.+30     	; 0x3738 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    371a:	69 89       	ldd	r22, Y+17	; 0x11
    371c:	7a 89       	ldd	r23, Y+18	; 0x12
    371e:	8b 89       	ldd	r24, Y+19	; 0x13
    3720:	9c 89       	ldd	r25, Y+20	; 0x14
    3722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	88 8b       	std	Y+16, r24	; 0x10
    372c:	88 89       	ldd	r24, Y+16	; 0x10
    372e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	8a 95       	dec	r24
    3734:	f1 f7       	brne	.-4      	; 0x3732 <CHR_LCD_8BIT_SEND_ENABLE_SIGNAL+0x1ac>
    3736:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
		Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->EN_PIN) , GPIO_LOW);
    3738:	8a 8d       	ldd	r24, Y+26	; 0x1a
    373a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    373c:	01 96       	adiw	r24, 0x01	; 1
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    3744:	89 8f       	std	Y+25, r24	; 0x19
	}
	return Retval;
    3746:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3748:	6b 96       	adiw	r28, 0x1b	; 27
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <CHR_LCD_8BIT_SET_CURSOR>:

static Std_ReturnType CHR_LCD_8BIT_SET_CURSOR(const CHR_LCD_8BIT_T *lcd , uint8 row , uint8 column){
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	27 97       	sbiw	r28, 0x07	; 7
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	9b 83       	std	Y+3, r25	; 0x03
    3770:	8a 83       	std	Y+2, r24	; 0x02
    3772:	6c 83       	std	Y+4, r22	; 0x04
    3774:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType Retval = E_OK;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == lcd){
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	11 f4       	brne	.+4      	; 0x3786 <CHR_LCD_8BIT_SET_CURSOR+0x2c>
			Retval = E_NOT_OK;
    3782:	19 82       	std	Y+1, r1	; 0x01
    3784:	52 c0       	rjmp	.+164    	; 0x382a <CHR_LCD_8BIT_SET_CURSOR+0xd0>
		}
		else{
			Retval = GPIO_PIN_WRITE_LOGIC(&(lcd->RS_PIN) , GPIO_LOW);
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	9b 81       	ldd	r25, Y+3	; 0x03
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    3790:	89 83       	std	Y+1, r24	; 0x01
			column--;
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	8d 83       	std	Y+5, r24	; 0x05
			switch(row){
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	3f 83       	std	Y+7, r19	; 0x07
    37a0:	2e 83       	std	Y+6, r18	; 0x06
    37a2:	8e 81       	ldd	r24, Y+6	; 0x06
    37a4:	9f 81       	ldd	r25, Y+7	; 0x07
    37a6:	82 30       	cpi	r24, 0x02	; 2
    37a8:	91 05       	cpc	r25, r1
    37aa:	01 f1       	breq	.+64     	; 0x37ec <CHR_LCD_8BIT_SET_CURSOR+0x92>
    37ac:	2e 81       	ldd	r18, Y+6	; 0x06
    37ae:	3f 81       	ldd	r19, Y+7	; 0x07
    37b0:	23 30       	cpi	r18, 0x03	; 3
    37b2:	31 05       	cpc	r19, r1
    37b4:	34 f4       	brge	.+12     	; 0x37c2 <CHR_LCD_8BIT_SET_CURSOR+0x68>
    37b6:	8e 81       	ldd	r24, Y+6	; 0x06
    37b8:	9f 81       	ldd	r25, Y+7	; 0x07
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	91 05       	cpc	r25, r1
    37be:	61 f0       	breq	.+24     	; 0x37d8 <CHR_LCD_8BIT_SET_CURSOR+0x7e>
    37c0:	33 c0       	rjmp	.+102    	; 0x3828 <CHR_LCD_8BIT_SET_CURSOR+0xce>
    37c2:	2e 81       	ldd	r18, Y+6	; 0x06
    37c4:	3f 81       	ldd	r19, Y+7	; 0x07
    37c6:	23 30       	cpi	r18, 0x03	; 3
    37c8:	31 05       	cpc	r19, r1
    37ca:	d1 f0       	breq	.+52     	; 0x3800 <CHR_LCD_8BIT_SET_CURSOR+0xa6>
    37cc:	8e 81       	ldd	r24, Y+6	; 0x06
    37ce:	9f 81       	ldd	r25, Y+7	; 0x07
    37d0:	84 30       	cpi	r24, 0x04	; 4
    37d2:	91 05       	cpc	r25, r1
    37d4:	f9 f0       	breq	.+62     	; 0x3814 <CHR_LCD_8BIT_SET_CURSOR+0xba>
    37d6:	28 c0       	rjmp	.+80     	; 0x3828 <CHR_LCD_8BIT_SET_CURSOR+0xce>
			case ROW1:
				Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (0x80+column));
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	28 2f       	mov	r18, r24
    37dc:	20 58       	subi	r18, 0x80	; 128
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	62 2f       	mov	r22, r18
    37e4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    37e8:	89 83       	std	Y+1, r24	; 0x01
    37ea:	1f c0       	rjmp	.+62     	; 0x382a <CHR_LCD_8BIT_SET_CURSOR+0xd0>
				break;
			case ROW2:
				Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (0xC0+column));
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	28 2f       	mov	r18, r24
    37f0:	20 54       	subi	r18, 0x40	; 64
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	9b 81       	ldd	r25, Y+3	; 0x03
    37f6:	62 2f       	mov	r22, r18
    37f8:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	15 c0       	rjmp	.+42     	; 0x382a <CHR_LCD_8BIT_SET_CURSOR+0xd0>
				break;
			case ROW3:
				Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (0x94+column));
    3800:	8d 81       	ldd	r24, Y+5	; 0x05
    3802:	28 2f       	mov	r18, r24
    3804:	2c 56       	subi	r18, 0x6C	; 108
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	62 2f       	mov	r22, r18
    380c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	0b c0       	rjmp	.+22     	; 0x382a <CHR_LCD_8BIT_SET_CURSOR+0xd0>
				break;
			case ROW4:
				Retval = CHR_LCD_8BIT_SEND_COMMAND(lcd , (0xD4+column));
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	28 2f       	mov	r18, r24
    3818:	2c 52       	subi	r18, 0x2C	; 44
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	9b 81       	ldd	r25, Y+3	; 0x03
    381e:	62 2f       	mov	r22, r18
    3820:	0e 94 da 16 	call	0x2db4	; 0x2db4 <CHR_LCD_8BIT_SEND_COMMAND>
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	01 c0       	rjmp	.+2      	; 0x382a <CHR_LCD_8BIT_SET_CURSOR+0xd0>
				break;
			default:
				Retval = E_NOT_OK;
    3828:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
		}
		return Retval;
    382a:	89 81       	ldd	r24, Y+1	; 0x01
}
    382c:	27 96       	adiw	r28, 0x07	; 7
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <BTN_INITIALIZE>:
 *      Author: Mohamed Elahmady
 */

#include "ECU_BTN.h"

Std_ReturnType BTN_INITIALIZE(const BTN_T *btn){
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <BTN_INITIALIZE+0x6>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	9b 83       	std	Y+3, r25	; 0x03
    384c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Retval = E_OK;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn){
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	11 f4       	brne	.+4      	; 0x385e <BTN_INITIALIZE+0x20>
		Retval = E_NOT_OK;
    385a:	19 82       	std	Y+1, r1	; 0x01
    385c:	05 c0       	rjmp	.+10     	; 0x3868 <BTN_INITIALIZE+0x2a>
	}
	else{
		Retval = GPIO_PIN_DIRECTION_INITIALIZE(&(btn->PIN));
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	0e 94 49 0a 	call	0x1492	; 0x1492 <GPIO_PIN_DIRECTION_INITIALIZE>
    3866:	89 83       	std	Y+1, r24	; 0x01
	}
	return Retval;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
}
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <BTN_GET_STATUS>:
Std_ReturnType BTN_GET_STATUS(const BTN_T *btn,BTN_STATUS *btn_st){
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	00 d0       	rcall	.+0      	; 0x387c <BTN_GET_STATUS+0x6>
    387c:	00 d0       	rcall	.+0      	; 0x387e <BTN_GET_STATUS+0x8>
    387e:	00 d0       	rcall	.+0      	; 0x3880 <BTN_GET_STATUS+0xa>
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	9c 83       	std	Y+4, r25	; 0x04
    3886:	8b 83       	std	Y+3, r24	; 0x03
    3888:	7e 83       	std	Y+6, r23	; 0x06
    388a:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType Retval = E_OK;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn || NULL == btn_st){
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	9c 81       	ldd	r25, Y+4	; 0x04
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	21 f0       	breq	.+8      	; 0x38a0 <BTN_GET_STATUS+0x2a>
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	11 f4       	brne	.+4      	; 0x38a4 <BTN_GET_STATUS+0x2e>
		Retval = E_NOT_OK;
    38a0:	19 82       	std	Y+1, r1	; 0x01
    38a2:	2d c0       	rjmp	.+90     	; 0x38fe <BTN_GET_STATUS+0x88>
	}
	else{
		LOGIC_T log = GPIO_LOW;
    38a4:	1a 82       	std	Y+2, r1	; 0x02
		Retval = GPIO_PIN_READ_LOGIC(&(btn->PIN),&log);
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	9c 81       	ldd	r25, Y+4	; 0x04
    38aa:	9e 01       	movw	r18, r28
    38ac:	2e 5f       	subi	r18, 0xFE	; 254
    38ae:	3f 4f       	sbci	r19, 0xFF	; 255
    38b0:	b9 01       	movw	r22, r18
    38b2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_PIN_READ_LOGIC>
    38b6:	89 83       	std	Y+1, r24	; 0x01
		if(BTN_ACTIVE_HIGH == btn->BTN_CON){
    38b8:	eb 81       	ldd	r30, Y+3	; 0x03
    38ba:	fc 81       	ldd	r31, Y+4	; 0x04
    38bc:	81 81       	ldd	r24, Z+1	; 0x01
    38be:	88 23       	and	r24, r24
    38c0:	61 f4       	brne	.+24     	; 0x38da <BTN_GET_STATUS+0x64>
			if(GPIO_HIGH == log){
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	21 f4       	brne	.+8      	; 0x38d0 <BTN_GET_STATUS+0x5a>
				*btn_st = BTN_PRESSED;
    38c8:	ed 81       	ldd	r30, Y+5	; 0x05
    38ca:	fe 81       	ldd	r31, Y+6	; 0x06
    38cc:	10 82       	st	Z, r1
    38ce:	17 c0       	rjmp	.+46     	; 0x38fe <BTN_GET_STATUS+0x88>
			}
			else{
				*btn_st = BTN_RELEASED;
    38d0:	ed 81       	ldd	r30, Y+5	; 0x05
    38d2:	fe 81       	ldd	r31, Y+6	; 0x06
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	80 83       	st	Z, r24
    38d8:	12 c0       	rjmp	.+36     	; 0x38fe <BTN_GET_STATUS+0x88>
			}
		}
		else if(BTN_ACTIVE_LOW == btn->BTN_CON){
    38da:	eb 81       	ldd	r30, Y+3	; 0x03
    38dc:	fc 81       	ldd	r31, Y+4	; 0x04
    38de:	81 81       	ldd	r24, Z+1	; 0x01
    38e0:	81 30       	cpi	r24, 0x01	; 1
    38e2:	61 f4       	brne	.+24     	; 0x38fc <BTN_GET_STATUS+0x86>
			if(GPIO_HIGH == log){
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	29 f4       	brne	.+10     	; 0x38f4 <BTN_GET_STATUS+0x7e>
				*btn_st = BTN_RELEASED;
    38ea:	ed 81       	ldd	r30, Y+5	; 0x05
    38ec:	fe 81       	ldd	r31, Y+6	; 0x06
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	80 83       	st	Z, r24
    38f2:	05 c0       	rjmp	.+10     	; 0x38fe <BTN_GET_STATUS+0x88>
			}
			else{
				*btn_st = BTN_PRESSED;
    38f4:	ed 81       	ldd	r30, Y+5	; 0x05
    38f6:	fe 81       	ldd	r31, Y+6	; 0x06
    38f8:	10 82       	st	Z, r1
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <BTN_GET_STATUS+0x88>
			}
		}
		else{
			Retval = E_NOT_OK;
    38fc:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Retval;
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3900:	26 96       	adiw	r28, 0x06	; 6
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <SEGMENT_INITIALIZE>:
 *      Author: Mohamed Elahmady
 */

#include "ECU_7_Segment.h"

Std_ReturnType SEGMENT_INITIALIZE(const SEGMENT_T *seg){
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	00 d0       	rcall	.+0      	; 0x3918 <SEGMENT_INITIALIZE+0x6>
    3918:	00 d0       	rcall	.+0      	; 0x391a <SEGMENT_INITIALIZE+0x8>
    391a:	0f 92       	push	r0
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	9d 83       	std	Y+5, r25	; 0x05
    3922:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType Retval = E_OK;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL== seg){
    3928:	8c 81       	ldd	r24, Y+4	; 0x04
    392a:	9d 81       	ldd	r25, Y+5	; 0x05
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	11 f4       	brne	.+4      	; 0x3934 <SEGMENT_INITIALIZE+0x22>
		Retval = E_NOT_OK;
    3930:	1b 82       	std	Y+3, r1	; 0x03
    3932:	16 c0       	rjmp	.+44     	; 0x3960 <SEGMENT_INITIALIZE+0x4e>
	}
	else{
		for(int i = 0 ; i < SEGMENT_DECODER_LIMIT ; i++){
    3934:	1a 82       	std	Y+2, r1	; 0x02
    3936:	19 82       	std	Y+1, r1	; 0x01
    3938:	0e c0       	rjmp	.+28     	; 0x3956 <SEGMENT_INITIALIZE+0x44>
			Retval = GPIO_PIN_INITIALIZE(&(seg->SEGMENT_PINS[i]));
    393a:	2c 81       	ldd	r18, Y+4	; 0x04
    393c:	3d 81       	ldd	r19, Y+5	; 0x05
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	82 0f       	add	r24, r18
    3944:	93 1f       	adc	r25, r19
    3946:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_PIN_INITIALIZE>
    394a:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
	if(NULL== seg){
		Retval = E_NOT_OK;
	}
	else{
		for(int i = 0 ; i < SEGMENT_DECODER_LIMIT ; i++){
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	84 30       	cpi	r24, 0x04	; 4
    395c:	91 05       	cpc	r25, r1
    395e:	6c f3       	brlt	.-38     	; 0x393a <SEGMENT_INITIALIZE+0x28>
			Retval = GPIO_PIN_INITIALIZE(&(seg->SEGMENT_PINS[i]));
		}
	}
	return Retval;
    3960:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <SEGMENT_WRITE_VALUE>:
Std_ReturnType SEGMENT_WRITE_VALUE(const SEGMENT_T *seg , uint8 number){
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <SEGMENT_WRITE_VALUE+0x6>
    3978:	00 d0       	rcall	.+0      	; 0x397a <SEGMENT_WRITE_VALUE+0x8>
    397a:	00 d0       	rcall	.+0      	; 0x397c <SEGMENT_WRITE_VALUE+0xa>
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	9d 83       	std	Y+5, r25	; 0x05
    3982:	8c 83       	std	Y+4, r24	; 0x04
    3984:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Retval = E_OK;
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	8b 83       	std	Y+3, r24	; 0x03
		if(NULL== seg || number > SEGMENT_DIGIT_LIMIT){
    398a:	8c 81       	ldd	r24, Y+4	; 0x04
    398c:	9d 81       	ldd	r25, Y+5	; 0x05
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	19 f0       	breq	.+6      	; 0x3998 <SEGMENT_WRITE_VALUE+0x26>
    3992:	8e 81       	ldd	r24, Y+6	; 0x06
    3994:	8a 30       	cpi	r24, 0x0A	; 10
    3996:	10 f0       	brcs	.+4      	; 0x399c <SEGMENT_WRITE_VALUE+0x2a>
			Retval = E_NOT_OK;
    3998:	1b 82       	std	Y+3, r1	; 0x03
    399a:	24 c0       	rjmp	.+72     	; 0x39e4 <SEGMENT_WRITE_VALUE+0x72>
		}
		else{
			for(int i = 0 ; i < SEGMENT_DECODER_LIMIT ; i++){
    399c:	1a 82       	std	Y+2, r1	; 0x02
    399e:	19 82       	std	Y+1, r1	; 0x01
    39a0:	1c c0       	rjmp	.+56     	; 0x39da <SEGMENT_WRITE_VALUE+0x68>
				Retval = GPIO_PIN_WRITE_LOGIC(&(seg->SEGMENT_PINS[i]) , ((number >> i) & 0x01));
    39a2:	2c 81       	ldd	r18, Y+4	; 0x04
    39a4:	3d 81       	ldd	r19, Y+5	; 0x05
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	a9 01       	movw	r20, r18
    39ac:	48 0f       	add	r20, r24
    39ae:	59 1f       	adc	r21, r25
    39b0:	8e 81       	ldd	r24, Y+6	; 0x06
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	09 80       	ldd	r0, Y+1	; 0x01
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <SEGMENT_WRITE_VALUE+0x4c>
    39ba:	95 95       	asr	r25
    39bc:	87 95       	ror	r24
    39be:	0a 94       	dec	r0
    39c0:	e2 f7       	brpl	.-8      	; 0x39ba <SEGMENT_WRITE_VALUE+0x48>
    39c2:	28 2f       	mov	r18, r24
    39c4:	21 70       	andi	r18, 0x01	; 1
    39c6:	ca 01       	movw	r24, r20
    39c8:	62 2f       	mov	r22, r18
    39ca:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_PIN_WRITE_LOGIC>
    39ce:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType Retval = E_OK;
		if(NULL== seg || number > SEGMENT_DIGIT_LIMIT){
			Retval = E_NOT_OK;
		}
		else{
			for(int i = 0 ; i < SEGMENT_DECODER_LIMIT ; i++){
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	01 96       	adiw	r24, 0x01	; 1
    39d6:	9a 83       	std	Y+2, r25	; 0x02
    39d8:	89 83       	std	Y+1, r24	; 0x01
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	9a 81       	ldd	r25, Y+2	; 0x02
    39de:	84 30       	cpi	r24, 0x04	; 4
    39e0:	91 05       	cpc	r25, r1
    39e2:	fc f2       	brlt	.-66     	; 0x39a2 <SEGMENT_WRITE_VALUE+0x30>
				Retval = GPIO_PIN_WRITE_LOGIC(&(seg->SEGMENT_PINS[i]) , ((number >> i) & 0x01));
			}
		}
		return Retval;
    39e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39e6:	26 96       	adiw	r28, 0x06	; 6
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	f8 94       	cli
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	cf 91       	pop	r28
    39f4:	df 91       	pop	r29
    39f6:	08 95       	ret

000039f8 <ECU_INITIALIZE>:
//	.LED_Pin.PORT = PORTC_IND,
//	.LED_Pin.PIN = GPIO_PIN0,
//	.LED_Pin.DIRECTION = GPIO_OUTPUT,
//	.LED_Pin.LOGIC = GPIO_LOW
//};
void ECU_INITIALIZE(void){
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	0f 92       	push	r0
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Ret = E_NOT_OK;
    3a02:	19 82       	std	Y+1, r1	; 0x01
	Ret = CHR_LCD_4BIT_INITIALIZE(&lcd1);
    3a04:	83 e9       	ldi	r24, 0x93	; 147
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 38 11 	call	0x2270	; 0x2270 <CHR_LCD_4BIT_INITIALIZE>
    3a0c:	89 83       	std	Y+1, r24	; 0x01
	Ret = CHR_LCD_8BIT_INITIALIZE(&lcd2);
    3a0e:	89 e9       	ldi	r24, 0x99	; 153
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 ba 14 	call	0x2974	; 0x2974 <CHR_LCD_8BIT_INITIALIZE>
    3a16:	89 83       	std	Y+1, r24	; 0x01
//	Ret = LED_INITIALIZE(&led1);
}
    3a18:	0f 90       	pop	r0
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <main>:

volatile uint8 counter = 64;
uint16 add = 0x65;
uint8 data = 0;

int main() {
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	Application_intialize();
    3a28:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <Application_intialize>
	Ret = EXT_INTX_INITIALIZE(&int0);
    3a2c:	83 ea       	ldi	r24, 0xA3	; 163
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXT_INTX_INITIALIZE>
    3a34:	80 93 ae 00 	sts	0x00AE, r24
	Ret = LED_INITIALIZE(&led1);
    3a38:	88 ea       	ldi	r24, 0xA8	; 168
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LED_INITIALIZE>
    3a40:	80 93 ae 00 	sts	0x00AE, r24
	Ret = LED_INITIALIZE(&led2);
    3a44:	89 ea       	ldi	r24, 0xA9	; 169
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LED_INITIALIZE>
    3a4c:	80 93 ae 00 	sts	0x00AE, r24
	Ret = DATA_EEPROM_WRITE_1BYTE(&add , 64);
    3a50:	8b ea       	ldi	r24, 0xAB	; 171
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	60 e4       	ldi	r22, 0x40	; 64
    3a56:	0e 94 75 0d 	call	0x1aea	; 0x1aea <DATA_EEPROM_WRITE_1BYTE>
    3a5a:	80 93 ae 00 	sts	0x00AE, r24
	Ret = DATA_EEPROM_READ_1BYTE(&add , &data);
    3a5e:	8b ea       	ldi	r24, 0xAB	; 171
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	2f ea       	ldi	r18, 0xAF	; 175
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	b9 01       	movw	r22, r18
    3a68:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <DATA_EEPROM_READ_1BYTE>
    3a6c:	80 93 ae 00 	sts	0x00AE, r24

	while(1){
		if(data == 64){
    3a70:	80 91 af 00 	lds	r24, 0x00AF
    3a74:	80 34       	cpi	r24, 0x40	; 64
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <main+0x50>
				Ret = LED_TOGGLE(&led1);
    3a78:	88 ea       	ldi	r24, 0xA8	; 168
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LED_TOGGLE>
    3a80:	80 93 ae 00 	sts	0x00AE, r24
    3a84:	f5 cf       	rjmp	.-22     	; 0x3a70 <main+0x50>

00003a86 <Application_intialize>:
//		}

	}
	return 0;
}
void Application_intialize(void) {
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
	ECU_INITIALIZE();
    3a8e:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <ECU_INITIALIZE>
}
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <int0t_isr>:

void int0t_isr(void){
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
}
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <program1>:

void program1(void){
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	6c 97       	sbiw	r28, 0x1c	; 28
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
	Ret = LED_TURN_ON(&led1);
    3aba:	88 ea       	ldi	r24, 0xA8	; 168
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LED_TURN_ON>
    3ac2:	80 93 ae 00 	sts	0x00AE, r24
	Ret = LED_TURN_OFF(&led2);
    3ac6:	89 ea       	ldi	r24, 0xA9	; 169
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LED_TURN_OFF>
    3ace:	80 93 ae 00 	sts	0x00AE, r24
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	a8 ec       	ldi	r26, 0xC8	; 200
    3ad8:	b2 e4       	ldi	r27, 0x42	; 66
    3ada:	89 8f       	std	Y+25, r24	; 0x19
    3adc:	9a 8f       	std	Y+26, r25	; 0x1a
    3ade:	ab 8f       	std	Y+27, r26	; 0x1b
    3ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	4a ef       	ldi	r20, 0xFA	; 250
    3af0:	54 e4       	ldi	r21, 0x44	; 68
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	8d 8b       	std	Y+21, r24	; 0x15
    3afc:	9e 8b       	std	Y+22, r25	; 0x16
    3afe:	af 8b       	std	Y+23, r26	; 0x17
    3b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b02:	6d 89       	ldd	r22, Y+21	; 0x15
    3b04:	7e 89       	ldd	r23, Y+22	; 0x16
    3b06:	8f 89       	ldd	r24, Y+23	; 0x17
    3b08:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e8       	ldi	r20, 0x80	; 128
    3b10:	5f e3       	ldi	r21, 0x3F	; 63
    3b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b16:	88 23       	and	r24, r24
    3b18:	2c f4       	brge	.+10     	; 0x3b24 <program1+0x7e>
		__ticks = 1;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	9c 8b       	std	Y+20, r25	; 0x14
    3b20:	8b 8b       	std	Y+19, r24	; 0x13
    3b22:	3f c0       	rjmp	.+126    	; 0x3ba2 <program1+0xfc>
	else if (__tmp > 65535)
    3b24:	6d 89       	ldd	r22, Y+21	; 0x15
    3b26:	7e 89       	ldd	r23, Y+22	; 0x16
    3b28:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	3f ef       	ldi	r19, 0xFF	; 255
    3b30:	4f e7       	ldi	r20, 0x7F	; 127
    3b32:	57 e4       	ldi	r21, 0x47	; 71
    3b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b38:	18 16       	cp	r1, r24
    3b3a:	4c f5       	brge	.+82     	; 0x3b8e <program1+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e2       	ldi	r20, 0x20	; 32
    3b4a:	51 e4       	ldi	r21, 0x41	; 65
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	9c 8b       	std	Y+20, r25	; 0x14
    3b62:	8b 8b       	std	Y+19, r24	; 0x13
    3b64:	0f c0       	rjmp	.+30     	; 0x3b84 <program1+0xde>
    3b66:	88 ec       	ldi	r24, 0xC8	; 200
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9a 8b       	std	Y+18, r25	; 0x12
    3b6c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b6e:	89 89       	ldd	r24, Y+17	; 0x11
    3b70:	9a 89       	ldd	r25, Y+18	; 0x12
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <program1+0xcc>
    3b76:	9a 8b       	std	Y+18, r25	; 0x12
    3b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	9c 8b       	std	Y+20, r25	; 0x14
    3b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b84:	8b 89       	ldd	r24, Y+19	; 0x13
    3b86:	9c 89       	ldd	r25, Y+20	; 0x14
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	69 f7       	brne	.-38     	; 0x3b66 <program1+0xc0>
    3b8c:	14 c0       	rjmp	.+40     	; 0x3bb6 <program1+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b90:	7e 89       	ldd	r23, Y+22	; 0x16
    3b92:	8f 89       	ldd	r24, Y+23	; 0x17
    3b94:	98 8d       	ldd	r25, Y+24	; 0x18
    3b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ba0:	8b 8b       	std	Y+19, r24	; 0x13
    3ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba6:	98 8b       	std	Y+16, r25	; 0x10
    3ba8:	8f 87       	std	Y+15, r24	; 0x0f
    3baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bac:	98 89       	ldd	r25, Y+16	; 0x10
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <program1+0x108>
    3bb2:	98 8b       	std	Y+16, r25	; 0x10
    3bb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	Ret = LED_TURN_OFF(&led1);
    3bb6:	88 ea       	ldi	r24, 0xA8	; 168
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LED_TURN_OFF>
    3bbe:	80 93 ae 00 	sts	0x00AE, r24
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	a8 ec       	ldi	r26, 0xC8	; 200
    3bc8:	b2 e4       	ldi	r27, 0x42	; 66
    3bca:	8b 87       	std	Y+11, r24	; 0x0b
    3bcc:	9c 87       	std	Y+12, r25	; 0x0c
    3bce:	ad 87       	std	Y+13, r26	; 0x0d
    3bd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	4a ef       	ldi	r20, 0xFA	; 250
    3be0:	54 e4       	ldi	r21, 0x44	; 68
    3be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8f 83       	std	Y+7, r24	; 0x07
    3bec:	98 87       	std	Y+8, r25	; 0x08
    3bee:	a9 87       	std	Y+9, r26	; 0x09
    3bf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf4:	78 85       	ldd	r23, Y+8	; 0x08
    3bf6:	89 85       	ldd	r24, Y+9	; 0x09
    3bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e8       	ldi	r20, 0x80	; 128
    3c00:	5f e3       	ldi	r21, 0x3F	; 63
    3c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c06:	88 23       	and	r24, r24
    3c08:	2c f4       	brge	.+10     	; 0x3c14 <program1+0x16e>
		__ticks = 1;
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	9e 83       	std	Y+6, r25	; 0x06
    3c10:	8d 83       	std	Y+5, r24	; 0x05
    3c12:	3f c0       	rjmp	.+126    	; 0x3c92 <program1+0x1ec>
	else if (__tmp > 65535)
    3c14:	6f 81       	ldd	r22, Y+7	; 0x07
    3c16:	78 85       	ldd	r23, Y+8	; 0x08
    3c18:	89 85       	ldd	r24, Y+9	; 0x09
    3c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	3f ef       	ldi	r19, 0xFF	; 255
    3c20:	4f e7       	ldi	r20, 0x7F	; 127
    3c22:	57 e4       	ldi	r21, 0x47	; 71
    3c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c28:	18 16       	cp	r1, r24
    3c2a:	4c f5       	brge	.+82     	; 0x3c7e <program1+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e2       	ldi	r20, 0x20	; 32
    3c3a:	51 e4       	ldi	r21, 0x41	; 65
    3c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	bc 01       	movw	r22, r24
    3c46:	cd 01       	movw	r24, r26
    3c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05
    3c54:	0f c0       	rjmp	.+30     	; 0x3c74 <program1+0x1ce>
    3c56:	88 ec       	ldi	r24, 0xC8	; 200
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	9c 83       	std	Y+4, r25	; 0x04
    3c5c:	8b 83       	std	Y+3, r24	; 0x03
    3c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c60:	9c 81       	ldd	r25, Y+4	; 0x04
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	f1 f7       	brne	.-4      	; 0x3c62 <program1+0x1bc>
    3c66:	9c 83       	std	Y+4, r25	; 0x04
    3c68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	9e 83       	std	Y+6, r25	; 0x06
    3c72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	9e 81       	ldd	r25, Y+6	; 0x06
    3c78:	00 97       	sbiw	r24, 0x00	; 0
    3c7a:	69 f7       	brne	.-38     	; 0x3c56 <program1+0x1b0>
    3c7c:	14 c0       	rjmp	.+40     	; 0x3ca6 <program1+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	89 85       	ldd	r24, Y+9	; 0x09
    3c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	9e 83       	std	Y+6, r25	; 0x06
    3c90:	8d 83       	std	Y+5, r24	; 0x05
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	9a 83       	std	Y+2, r25	; 0x02
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	f1 f7       	brne	.-4      	; 0x3c9e <program1+0x1f8>
    3ca2:	9a 83       	std	Y+2, r25	; 0x02
    3ca4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3ca6:	6c 96       	adiw	r28, 0x1c	; 28
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <program2>:

void program2(void){
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	6c 97       	sbiw	r28, 0x1c	; 28
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
	Ret = LED_TURN_ON(&led2);
    3ccc:	89 ea       	ldi	r24, 0xA9	; 169
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LED_TURN_ON>
    3cd4:	80 93 ae 00 	sts	0x00AE, r24
	Ret = LED_TURN_OFF(&led1);
    3cd8:	88 ea       	ldi	r24, 0xA8	; 168
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LED_TURN_OFF>
    3ce0:	80 93 ae 00 	sts	0x00AE, r24
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	a8 ec       	ldi	r26, 0xC8	; 200
    3cea:	b2 e4       	ldi	r27, 0x42	; 66
    3cec:	89 8f       	std	Y+25, r24	; 0x19
    3cee:	9a 8f       	std	Y+26, r25	; 0x1a
    3cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    3cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	4a ef       	ldi	r20, 0xFA	; 250
    3d02:	54 e4       	ldi	r21, 0x44	; 68
    3d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	8d 8b       	std	Y+21, r24	; 0x15
    3d0e:	9e 8b       	std	Y+22, r25	; 0x16
    3d10:	af 8b       	std	Y+23, r26	; 0x17
    3d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d14:	6d 89       	ldd	r22, Y+21	; 0x15
    3d16:	7e 89       	ldd	r23, Y+22	; 0x16
    3d18:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	40 e8       	ldi	r20, 0x80	; 128
    3d22:	5f e3       	ldi	r21, 0x3F	; 63
    3d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d28:	88 23       	and	r24, r24
    3d2a:	2c f4       	brge	.+10     	; 0x3d36 <program2+0x7e>
		__ticks = 1;
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	9c 8b       	std	Y+20, r25	; 0x14
    3d32:	8b 8b       	std	Y+19, r24	; 0x13
    3d34:	3f c0       	rjmp	.+126    	; 0x3db4 <program2+0xfc>
	else if (__tmp > 65535)
    3d36:	6d 89       	ldd	r22, Y+21	; 0x15
    3d38:	7e 89       	ldd	r23, Y+22	; 0x16
    3d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	3f ef       	ldi	r19, 0xFF	; 255
    3d42:	4f e7       	ldi	r20, 0x7F	; 127
    3d44:	57 e4       	ldi	r21, 0x47	; 71
    3d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d4a:	18 16       	cp	r1, r24
    3d4c:	4c f5       	brge	.+82     	; 0x3da0 <program2+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e2       	ldi	r20, 0x20	; 32
    3d5c:	51 e4       	ldi	r21, 0x41	; 65
    3d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	bc 01       	movw	r22, r24
    3d68:	cd 01       	movw	r24, r26
    3d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	9c 8b       	std	Y+20, r25	; 0x14
    3d74:	8b 8b       	std	Y+19, r24	; 0x13
    3d76:	0f c0       	rjmp	.+30     	; 0x3d96 <program2+0xde>
    3d78:	88 ec       	ldi	r24, 0xC8	; 200
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	9a 8b       	std	Y+18, r25	; 0x12
    3d7e:	89 8b       	std	Y+17, r24	; 0x11
    3d80:	89 89       	ldd	r24, Y+17	; 0x11
    3d82:	9a 89       	ldd	r25, Y+18	; 0x12
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	f1 f7       	brne	.-4      	; 0x3d84 <program2+0xcc>
    3d88:	9a 8b       	std	Y+18, r25	; 0x12
    3d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	9c 8b       	std	Y+20, r25	; 0x14
    3d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d96:	8b 89       	ldd	r24, Y+19	; 0x13
    3d98:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	69 f7       	brne	.-38     	; 0x3d78 <program2+0xc0>
    3d9e:	14 c0       	rjmp	.+40     	; 0x3dc8 <program2+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da0:	6d 89       	ldd	r22, Y+21	; 0x15
    3da2:	7e 89       	ldd	r23, Y+22	; 0x16
    3da4:	8f 89       	ldd	r24, Y+23	; 0x17
    3da6:	98 8d       	ldd	r25, Y+24	; 0x18
    3da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	9c 8b       	std	Y+20, r25	; 0x14
    3db2:	8b 8b       	std	Y+19, r24	; 0x13
    3db4:	8b 89       	ldd	r24, Y+19	; 0x13
    3db6:	9c 89       	ldd	r25, Y+20	; 0x14
    3db8:	98 8b       	std	Y+16, r25	; 0x10
    3dba:	8f 87       	std	Y+15, r24	; 0x0f
    3dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dbe:	98 89       	ldd	r25, Y+16	; 0x10
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	f1 f7       	brne	.-4      	; 0x3dc0 <program2+0x108>
    3dc4:	98 8b       	std	Y+16, r25	; 0x10
    3dc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	Ret = LED_TURN_OFF(&led2);
    3dc8:	89 ea       	ldi	r24, 0xA9	; 169
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LED_TURN_OFF>
    3dd0:	80 93 ae 00 	sts	0x00AE, r24
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	a8 ec       	ldi	r26, 0xC8	; 200
    3dda:	b2 e4       	ldi	r27, 0x42	; 66
    3ddc:	8b 87       	std	Y+11, r24	; 0x0b
    3dde:	9c 87       	std	Y+12, r25	; 0x0c
    3de0:	ad 87       	std	Y+13, r26	; 0x0d
    3de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	4a ef       	ldi	r20, 0xFA	; 250
    3df2:	54 e4       	ldi	r21, 0x44	; 68
    3df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	8f 83       	std	Y+7, r24	; 0x07
    3dfe:	98 87       	std	Y+8, r25	; 0x08
    3e00:	a9 87       	std	Y+9, r26	; 0x09
    3e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e04:	6f 81       	ldd	r22, Y+7	; 0x07
    3e06:	78 85       	ldd	r23, Y+8	; 0x08
    3e08:	89 85       	ldd	r24, Y+9	; 0x09
    3e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e8       	ldi	r20, 0x80	; 128
    3e12:	5f e3       	ldi	r21, 0x3F	; 63
    3e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e18:	88 23       	and	r24, r24
    3e1a:	2c f4       	brge	.+10     	; 0x3e26 <program2+0x16e>
		__ticks = 1;
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	9e 83       	std	Y+6, r25	; 0x06
    3e22:	8d 83       	std	Y+5, r24	; 0x05
    3e24:	3f c0       	rjmp	.+126    	; 0x3ea4 <program2+0x1ec>
	else if (__tmp > 65535)
    3e26:	6f 81       	ldd	r22, Y+7	; 0x07
    3e28:	78 85       	ldd	r23, Y+8	; 0x08
    3e2a:	89 85       	ldd	r24, Y+9	; 0x09
    3e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	3f ef       	ldi	r19, 0xFF	; 255
    3e32:	4f e7       	ldi	r20, 0x7F	; 127
    3e34:	57 e4       	ldi	r21, 0x47	; 71
    3e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e3a:	18 16       	cp	r1, r24
    3e3c:	4c f5       	brge	.+82     	; 0x3e90 <program2+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	40 e2       	ldi	r20, 0x20	; 32
    3e4c:	51 e4       	ldi	r21, 0x41	; 65
    3e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	bc 01       	movw	r22, r24
    3e58:	cd 01       	movw	r24, r26
    3e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	9e 83       	std	Y+6, r25	; 0x06
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	0f c0       	rjmp	.+30     	; 0x3e86 <program2+0x1ce>
    3e68:	88 ec       	ldi	r24, 0xC8	; 200
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	9c 83       	std	Y+4, r25	; 0x04
    3e6e:	8b 83       	std	Y+3, r24	; 0x03
    3e70:	8b 81       	ldd	r24, Y+3	; 0x03
    3e72:	9c 81       	ldd	r25, Y+4	; 0x04
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <program2+0x1bc>
    3e78:	9c 83       	std	Y+4, r25	; 0x04
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	01 97       	sbiw	r24, 0x01	; 1
    3e82:	9e 83       	std	Y+6, r25	; 0x06
    3e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
    3e88:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8a:	00 97       	sbiw	r24, 0x00	; 0
    3e8c:	69 f7       	brne	.-38     	; 0x3e68 <program2+0x1b0>
    3e8e:	14 c0       	rjmp	.+40     	; 0x3eb8 <program2+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e90:	6f 81       	ldd	r22, Y+7	; 0x07
    3e92:	78 85       	ldd	r23, Y+8	; 0x08
    3e94:	89 85       	ldd	r24, Y+9	; 0x09
    3e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	9e 83       	std	Y+6, r25	; 0x06
    3ea2:	8d 83       	std	Y+5, r24	; 0x05
    3ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea8:	9a 83       	std	Y+2, r25	; 0x02
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <program2+0x1f8>
    3eb4:	9a 83       	std	Y+2, r25	; 0x02
    3eb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3eb8:	6c 96       	adiw	r28, 0x1c	; 28
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	f8 94       	cli
    3ebe:	de bf       	out	0x3e, r29	; 62
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	cf 91       	pop	r28
    3ec6:	df 91       	pop	r29
    3ec8:	08 95       	ret

00003eca <__prologue_saves__>:
    3eca:	2f 92       	push	r2
    3ecc:	3f 92       	push	r3
    3ece:	4f 92       	push	r4
    3ed0:	5f 92       	push	r5
    3ed2:	6f 92       	push	r6
    3ed4:	7f 92       	push	r7
    3ed6:	8f 92       	push	r8
    3ed8:	9f 92       	push	r9
    3eda:	af 92       	push	r10
    3edc:	bf 92       	push	r11
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	ca 1b       	sub	r28, r26
    3ef4:	db 0b       	sbc	r29, r27
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	09 94       	ijmp

00003f02 <__epilogue_restores__>:
    3f02:	2a 88       	ldd	r2, Y+18	; 0x12
    3f04:	39 88       	ldd	r3, Y+17	; 0x11
    3f06:	48 88       	ldd	r4, Y+16	; 0x10
    3f08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f14:	b9 84       	ldd	r11, Y+9	; 0x09
    3f16:	c8 84       	ldd	r12, Y+8	; 0x08
    3f18:	df 80       	ldd	r13, Y+7	; 0x07
    3f1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3f1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3f1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3f20:	1b 81       	ldd	r17, Y+3	; 0x03
    3f22:	aa 81       	ldd	r26, Y+2	; 0x02
    3f24:	b9 81       	ldd	r27, Y+1	; 0x01
    3f26:	ce 0f       	add	r28, r30
    3f28:	d1 1d       	adc	r29, r1
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	ed 01       	movw	r28, r26
    3f36:	08 95       	ret

00003f38 <memset>:
    3f38:	dc 01       	movw	r26, r24
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <memset+0x6>
    3f3c:	6d 93       	st	X+, r22
    3f3e:	41 50       	subi	r20, 0x01	; 1
    3f40:	50 40       	sbci	r21, 0x00	; 0
    3f42:	e0 f7       	brcc	.-8      	; 0x3f3c <memset+0x4>
    3f44:	08 95       	ret

00003f46 <sprintf>:
    3f46:	ae e0       	ldi	r26, 0x0E	; 14
    3f48:	b0 e0       	ldi	r27, 0x00	; 0
    3f4a:	e9 ea       	ldi	r30, 0xA9	; 169
    3f4c:	ff e1       	ldi	r31, 0x1F	; 31
    3f4e:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x1c>
    3f52:	0d 89       	ldd	r16, Y+21	; 0x15
    3f54:	1e 89       	ldd	r17, Y+22	; 0x16
    3f56:	86 e0       	ldi	r24, 0x06	; 6
    3f58:	8c 83       	std	Y+4, r24	; 0x04
    3f5a:	1a 83       	std	Y+2, r17	; 0x02
    3f5c:	09 83       	std	Y+1, r16	; 0x01
    3f5e:	8f ef       	ldi	r24, 0xFF	; 255
    3f60:	9f e7       	ldi	r25, 0x7F	; 127
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	9e 01       	movw	r18, r28
    3f68:	27 5e       	subi	r18, 0xE7	; 231
    3f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	6f 89       	ldd	r22, Y+23	; 0x17
    3f72:	78 8d       	ldd	r23, Y+24	; 0x18
    3f74:	a9 01       	movw	r20, r18
    3f76:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vfprintf>
    3f7a:	2f 81       	ldd	r18, Y+7	; 0x07
    3f7c:	38 85       	ldd	r19, Y+8	; 0x08
    3f7e:	02 0f       	add	r16, r18
    3f80:	13 1f       	adc	r17, r19
    3f82:	f8 01       	movw	r30, r16
    3f84:	10 82       	st	Z, r1
    3f86:	2e 96       	adiw	r28, 0x0e	; 14
    3f88:	e4 e0       	ldi	r30, 0x04	; 4
    3f8a:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__epilogue_restores__+0x1c>

00003f8e <vfprintf>:
    3f8e:	ab e0       	ldi	r26, 0x0B	; 11
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	ed ec       	ldi	r30, 0xCD	; 205
    3f94:	ff e1       	ldi	r31, 0x1F	; 31
    3f96:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__prologue_saves__>
    3f9a:	3c 01       	movw	r6, r24
    3f9c:	2b 01       	movw	r4, r22
    3f9e:	5a 01       	movw	r10, r20
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	17 82       	std	Z+7, r1	; 0x07
    3fa4:	16 82       	std	Z+6, r1	; 0x06
    3fa6:	83 81       	ldd	r24, Z+3	; 0x03
    3fa8:	81 fd       	sbrc	r24, 1
    3faa:	03 c0       	rjmp	.+6      	; 0x3fb2 <vfprintf+0x24>
    3fac:	6f ef       	ldi	r22, 0xFF	; 255
    3fae:	7f ef       	ldi	r23, 0xFF	; 255
    3fb0:	c6 c1       	rjmp	.+908    	; 0x433e <vfprintf+0x3b0>
    3fb2:	9a e0       	ldi	r25, 0x0A	; 10
    3fb4:	89 2e       	mov	r8, r25
    3fb6:	1e 01       	movw	r2, r28
    3fb8:	08 94       	sec
    3fba:	21 1c       	adc	r2, r1
    3fbc:	31 1c       	adc	r3, r1
    3fbe:	f3 01       	movw	r30, r6
    3fc0:	23 81       	ldd	r18, Z+3	; 0x03
    3fc2:	f2 01       	movw	r30, r4
    3fc4:	23 fd       	sbrc	r18, 3
    3fc6:	85 91       	lpm	r24, Z+
    3fc8:	23 ff       	sbrs	r18, 3
    3fca:	81 91       	ld	r24, Z+
    3fcc:	2f 01       	movw	r4, r30
    3fce:	88 23       	and	r24, r24
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <vfprintf+0x46>
    3fd2:	b2 c1       	rjmp	.+868    	; 0x4338 <vfprintf+0x3aa>
    3fd4:	85 32       	cpi	r24, 0x25	; 37
    3fd6:	39 f4       	brne	.+14     	; 0x3fe6 <vfprintf+0x58>
    3fd8:	23 fd       	sbrc	r18, 3
    3fda:	85 91       	lpm	r24, Z+
    3fdc:	23 ff       	sbrs	r18, 3
    3fde:	81 91       	ld	r24, Z+
    3fe0:	2f 01       	movw	r4, r30
    3fe2:	85 32       	cpi	r24, 0x25	; 37
    3fe4:	29 f4       	brne	.+10     	; 0x3ff0 <vfprintf+0x62>
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	b3 01       	movw	r22, r6
    3fea:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    3fee:	e7 cf       	rjmp	.-50     	; 0x3fbe <vfprintf+0x30>
    3ff0:	98 2f       	mov	r25, r24
    3ff2:	ff 24       	eor	r15, r15
    3ff4:	ee 24       	eor	r14, r14
    3ff6:	99 24       	eor	r9, r9
    3ff8:	ff e1       	ldi	r31, 0x1F	; 31
    3ffa:	ff 15       	cp	r31, r15
    3ffc:	d0 f0       	brcs	.+52     	; 0x4032 <vfprintf+0xa4>
    3ffe:	9b 32       	cpi	r25, 0x2B	; 43
    4000:	69 f0       	breq	.+26     	; 0x401c <vfprintf+0x8e>
    4002:	9c 32       	cpi	r25, 0x2C	; 44
    4004:	28 f4       	brcc	.+10     	; 0x4010 <vfprintf+0x82>
    4006:	90 32       	cpi	r25, 0x20	; 32
    4008:	59 f0       	breq	.+22     	; 0x4020 <vfprintf+0x92>
    400a:	93 32       	cpi	r25, 0x23	; 35
    400c:	91 f4       	brne	.+36     	; 0x4032 <vfprintf+0xa4>
    400e:	0e c0       	rjmp	.+28     	; 0x402c <vfprintf+0x9e>
    4010:	9d 32       	cpi	r25, 0x2D	; 45
    4012:	49 f0       	breq	.+18     	; 0x4026 <vfprintf+0x98>
    4014:	90 33       	cpi	r25, 0x30	; 48
    4016:	69 f4       	brne	.+26     	; 0x4032 <vfprintf+0xa4>
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	24 c0       	rjmp	.+72     	; 0x4064 <vfprintf+0xd6>
    401c:	52 e0       	ldi	r21, 0x02	; 2
    401e:	f5 2a       	or	r15, r21
    4020:	84 e0       	ldi	r24, 0x04	; 4
    4022:	f8 2a       	or	r15, r24
    4024:	28 c0       	rjmp	.+80     	; 0x4076 <vfprintf+0xe8>
    4026:	98 e0       	ldi	r25, 0x08	; 8
    4028:	f9 2a       	or	r15, r25
    402a:	25 c0       	rjmp	.+74     	; 0x4076 <vfprintf+0xe8>
    402c:	e0 e1       	ldi	r30, 0x10	; 16
    402e:	fe 2a       	or	r15, r30
    4030:	22 c0       	rjmp	.+68     	; 0x4076 <vfprintf+0xe8>
    4032:	f7 fc       	sbrc	r15, 7
    4034:	29 c0       	rjmp	.+82     	; 0x4088 <vfprintf+0xfa>
    4036:	89 2f       	mov	r24, r25
    4038:	80 53       	subi	r24, 0x30	; 48
    403a:	8a 30       	cpi	r24, 0x0A	; 10
    403c:	70 f4       	brcc	.+28     	; 0x405a <vfprintf+0xcc>
    403e:	f6 fe       	sbrs	r15, 6
    4040:	05 c0       	rjmp	.+10     	; 0x404c <vfprintf+0xbe>
    4042:	98 9c       	mul	r9, r8
    4044:	90 2c       	mov	r9, r0
    4046:	11 24       	eor	r1, r1
    4048:	98 0e       	add	r9, r24
    404a:	15 c0       	rjmp	.+42     	; 0x4076 <vfprintf+0xe8>
    404c:	e8 9c       	mul	r14, r8
    404e:	e0 2c       	mov	r14, r0
    4050:	11 24       	eor	r1, r1
    4052:	e8 0e       	add	r14, r24
    4054:	f0 e2       	ldi	r31, 0x20	; 32
    4056:	ff 2a       	or	r15, r31
    4058:	0e c0       	rjmp	.+28     	; 0x4076 <vfprintf+0xe8>
    405a:	9e 32       	cpi	r25, 0x2E	; 46
    405c:	29 f4       	brne	.+10     	; 0x4068 <vfprintf+0xda>
    405e:	f6 fc       	sbrc	r15, 6
    4060:	6b c1       	rjmp	.+726    	; 0x4338 <vfprintf+0x3aa>
    4062:	40 e4       	ldi	r20, 0x40	; 64
    4064:	f4 2a       	or	r15, r20
    4066:	07 c0       	rjmp	.+14     	; 0x4076 <vfprintf+0xe8>
    4068:	9c 36       	cpi	r25, 0x6C	; 108
    406a:	19 f4       	brne	.+6      	; 0x4072 <vfprintf+0xe4>
    406c:	50 e8       	ldi	r21, 0x80	; 128
    406e:	f5 2a       	or	r15, r21
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <vfprintf+0xe8>
    4072:	98 36       	cpi	r25, 0x68	; 104
    4074:	49 f4       	brne	.+18     	; 0x4088 <vfprintf+0xfa>
    4076:	f2 01       	movw	r30, r4
    4078:	23 fd       	sbrc	r18, 3
    407a:	95 91       	lpm	r25, Z+
    407c:	23 ff       	sbrs	r18, 3
    407e:	91 91       	ld	r25, Z+
    4080:	2f 01       	movw	r4, r30
    4082:	99 23       	and	r25, r25
    4084:	09 f0       	breq	.+2      	; 0x4088 <vfprintf+0xfa>
    4086:	b8 cf       	rjmp	.-144    	; 0x3ff8 <vfprintf+0x6a>
    4088:	89 2f       	mov	r24, r25
    408a:	85 54       	subi	r24, 0x45	; 69
    408c:	83 30       	cpi	r24, 0x03	; 3
    408e:	18 f0       	brcs	.+6      	; 0x4096 <vfprintf+0x108>
    4090:	80 52       	subi	r24, 0x20	; 32
    4092:	83 30       	cpi	r24, 0x03	; 3
    4094:	38 f4       	brcc	.+14     	; 0x40a4 <vfprintf+0x116>
    4096:	44 e0       	ldi	r20, 0x04	; 4
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	a4 0e       	add	r10, r20
    409c:	b5 1e       	adc	r11, r21
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	59 83       	std	Y+1, r21	; 0x01
    40a2:	0f c0       	rjmp	.+30     	; 0x40c2 <vfprintf+0x134>
    40a4:	93 36       	cpi	r25, 0x63	; 99
    40a6:	31 f0       	breq	.+12     	; 0x40b4 <vfprintf+0x126>
    40a8:	93 37       	cpi	r25, 0x73	; 115
    40aa:	79 f0       	breq	.+30     	; 0x40ca <vfprintf+0x13c>
    40ac:	93 35       	cpi	r25, 0x53	; 83
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <vfprintf+0x124>
    40b0:	56 c0       	rjmp	.+172    	; 0x415e <vfprintf+0x1d0>
    40b2:	20 c0       	rjmp	.+64     	; 0x40f4 <vfprintf+0x166>
    40b4:	f5 01       	movw	r30, r10
    40b6:	80 81       	ld	r24, Z
    40b8:	89 83       	std	Y+1, r24	; 0x01
    40ba:	42 e0       	ldi	r20, 0x02	; 2
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	a4 0e       	add	r10, r20
    40c0:	b5 1e       	adc	r11, r21
    40c2:	61 01       	movw	r12, r2
    40c4:	01 e0       	ldi	r16, 0x01	; 1
    40c6:	10 e0       	ldi	r17, 0x00	; 0
    40c8:	12 c0       	rjmp	.+36     	; 0x40ee <vfprintf+0x160>
    40ca:	f5 01       	movw	r30, r10
    40cc:	c0 80       	ld	r12, Z
    40ce:	d1 80       	ldd	r13, Z+1	; 0x01
    40d0:	f6 fc       	sbrc	r15, 6
    40d2:	03 c0       	rjmp	.+6      	; 0x40da <vfprintf+0x14c>
    40d4:	6f ef       	ldi	r22, 0xFF	; 255
    40d6:	7f ef       	ldi	r23, 0xFF	; 255
    40d8:	02 c0       	rjmp	.+4      	; 0x40de <vfprintf+0x150>
    40da:	69 2d       	mov	r22, r9
    40dc:	70 e0       	ldi	r23, 0x00	; 0
    40de:	42 e0       	ldi	r20, 0x02	; 2
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	a4 0e       	add	r10, r20
    40e4:	b5 1e       	adc	r11, r21
    40e6:	c6 01       	movw	r24, r12
    40e8:	0e 94 af 21 	call	0x435e	; 0x435e <strnlen>
    40ec:	8c 01       	movw	r16, r24
    40ee:	5f e7       	ldi	r21, 0x7F	; 127
    40f0:	f5 22       	and	r15, r21
    40f2:	14 c0       	rjmp	.+40     	; 0x411c <vfprintf+0x18e>
    40f4:	f5 01       	movw	r30, r10
    40f6:	c0 80       	ld	r12, Z
    40f8:	d1 80       	ldd	r13, Z+1	; 0x01
    40fa:	f6 fc       	sbrc	r15, 6
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <vfprintf+0x176>
    40fe:	6f ef       	ldi	r22, 0xFF	; 255
    4100:	7f ef       	ldi	r23, 0xFF	; 255
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <vfprintf+0x17a>
    4104:	69 2d       	mov	r22, r9
    4106:	70 e0       	ldi	r23, 0x00	; 0
    4108:	42 e0       	ldi	r20, 0x02	; 2
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	a4 0e       	add	r10, r20
    410e:	b5 1e       	adc	r11, r21
    4110:	c6 01       	movw	r24, r12
    4112:	0e 94 a4 21 	call	0x4348	; 0x4348 <strnlen_P>
    4116:	8c 01       	movw	r16, r24
    4118:	50 e8       	ldi	r21, 0x80	; 128
    411a:	f5 2a       	or	r15, r21
    411c:	f3 fe       	sbrs	r15, 3
    411e:	07 c0       	rjmp	.+14     	; 0x412e <vfprintf+0x1a0>
    4120:	1a c0       	rjmp	.+52     	; 0x4156 <vfprintf+0x1c8>
    4122:	80 e2       	ldi	r24, 0x20	; 32
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	b3 01       	movw	r22, r6
    4128:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    412c:	ea 94       	dec	r14
    412e:	8e 2d       	mov	r24, r14
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	08 17       	cp	r16, r24
    4134:	19 07       	cpc	r17, r25
    4136:	a8 f3       	brcs	.-22     	; 0x4122 <vfprintf+0x194>
    4138:	0e c0       	rjmp	.+28     	; 0x4156 <vfprintf+0x1c8>
    413a:	f6 01       	movw	r30, r12
    413c:	f7 fc       	sbrc	r15, 7
    413e:	85 91       	lpm	r24, Z+
    4140:	f7 fe       	sbrs	r15, 7
    4142:	81 91       	ld	r24, Z+
    4144:	6f 01       	movw	r12, r30
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	b3 01       	movw	r22, r6
    414a:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    414e:	e1 10       	cpse	r14, r1
    4150:	ea 94       	dec	r14
    4152:	01 50       	subi	r16, 0x01	; 1
    4154:	10 40       	sbci	r17, 0x00	; 0
    4156:	01 15       	cp	r16, r1
    4158:	11 05       	cpc	r17, r1
    415a:	79 f7       	brne	.-34     	; 0x413a <vfprintf+0x1ac>
    415c:	ea c0       	rjmp	.+468    	; 0x4332 <vfprintf+0x3a4>
    415e:	94 36       	cpi	r25, 0x64	; 100
    4160:	11 f0       	breq	.+4      	; 0x4166 <vfprintf+0x1d8>
    4162:	99 36       	cpi	r25, 0x69	; 105
    4164:	69 f5       	brne	.+90     	; 0x41c0 <vfprintf+0x232>
    4166:	f7 fe       	sbrs	r15, 7
    4168:	08 c0       	rjmp	.+16     	; 0x417a <vfprintf+0x1ec>
    416a:	f5 01       	movw	r30, r10
    416c:	20 81       	ld	r18, Z
    416e:	31 81       	ldd	r19, Z+1	; 0x01
    4170:	42 81       	ldd	r20, Z+2	; 0x02
    4172:	53 81       	ldd	r21, Z+3	; 0x03
    4174:	84 e0       	ldi	r24, 0x04	; 4
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0a c0       	rjmp	.+20     	; 0x418e <vfprintf+0x200>
    417a:	f5 01       	movw	r30, r10
    417c:	80 81       	ld	r24, Z
    417e:	91 81       	ldd	r25, Z+1	; 0x01
    4180:	9c 01       	movw	r18, r24
    4182:	44 27       	eor	r20, r20
    4184:	37 fd       	sbrc	r19, 7
    4186:	40 95       	com	r20
    4188:	54 2f       	mov	r21, r20
    418a:	82 e0       	ldi	r24, 0x02	; 2
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	a8 0e       	add	r10, r24
    4190:	b9 1e       	adc	r11, r25
    4192:	9f e6       	ldi	r25, 0x6F	; 111
    4194:	f9 22       	and	r15, r25
    4196:	57 ff       	sbrs	r21, 7
    4198:	09 c0       	rjmp	.+18     	; 0x41ac <vfprintf+0x21e>
    419a:	50 95       	com	r21
    419c:	40 95       	com	r20
    419e:	30 95       	com	r19
    41a0:	21 95       	neg	r18
    41a2:	3f 4f       	sbci	r19, 0xFF	; 255
    41a4:	4f 4f       	sbci	r20, 0xFF	; 255
    41a6:	5f 4f       	sbci	r21, 0xFF	; 255
    41a8:	e0 e8       	ldi	r30, 0x80	; 128
    41aa:	fe 2a       	or	r15, r30
    41ac:	ca 01       	movw	r24, r20
    41ae:	b9 01       	movw	r22, r18
    41b0:	a1 01       	movw	r20, r2
    41b2:	2a e0       	ldi	r18, 0x0A	; 10
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__ultoa_invert>
    41ba:	d8 2e       	mov	r13, r24
    41bc:	d2 18       	sub	r13, r2
    41be:	40 c0       	rjmp	.+128    	; 0x4240 <vfprintf+0x2b2>
    41c0:	95 37       	cpi	r25, 0x75	; 117
    41c2:	29 f4       	brne	.+10     	; 0x41ce <vfprintf+0x240>
    41c4:	1f 2d       	mov	r17, r15
    41c6:	1f 7e       	andi	r17, 0xEF	; 239
    41c8:	2a e0       	ldi	r18, 0x0A	; 10
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	1d c0       	rjmp	.+58     	; 0x4208 <vfprintf+0x27a>
    41ce:	1f 2d       	mov	r17, r15
    41d0:	19 7f       	andi	r17, 0xF9	; 249
    41d2:	9f 36       	cpi	r25, 0x6F	; 111
    41d4:	61 f0       	breq	.+24     	; 0x41ee <vfprintf+0x260>
    41d6:	90 37       	cpi	r25, 0x70	; 112
    41d8:	20 f4       	brcc	.+8      	; 0x41e2 <vfprintf+0x254>
    41da:	98 35       	cpi	r25, 0x58	; 88
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <vfprintf+0x252>
    41de:	ac c0       	rjmp	.+344    	; 0x4338 <vfprintf+0x3aa>
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <vfprintf+0x272>
    41e2:	90 37       	cpi	r25, 0x70	; 112
    41e4:	39 f0       	breq	.+14     	; 0x41f4 <vfprintf+0x266>
    41e6:	98 37       	cpi	r25, 0x78	; 120
    41e8:	09 f0       	breq	.+2      	; 0x41ec <vfprintf+0x25e>
    41ea:	a6 c0       	rjmp	.+332    	; 0x4338 <vfprintf+0x3aa>
    41ec:	04 c0       	rjmp	.+8      	; 0x41f6 <vfprintf+0x268>
    41ee:	28 e0       	ldi	r18, 0x08	; 8
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	0a c0       	rjmp	.+20     	; 0x4208 <vfprintf+0x27a>
    41f4:	10 61       	ori	r17, 0x10	; 16
    41f6:	14 fd       	sbrc	r17, 4
    41f8:	14 60       	ori	r17, 0x04	; 4
    41fa:	20 e1       	ldi	r18, 0x10	; 16
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	04 c0       	rjmp	.+8      	; 0x4208 <vfprintf+0x27a>
    4200:	14 fd       	sbrc	r17, 4
    4202:	16 60       	ori	r17, 0x06	; 6
    4204:	20 e1       	ldi	r18, 0x10	; 16
    4206:	32 e0       	ldi	r19, 0x02	; 2
    4208:	17 ff       	sbrs	r17, 7
    420a:	08 c0       	rjmp	.+16     	; 0x421c <vfprintf+0x28e>
    420c:	f5 01       	movw	r30, r10
    420e:	60 81       	ld	r22, Z
    4210:	71 81       	ldd	r23, Z+1	; 0x01
    4212:	82 81       	ldd	r24, Z+2	; 0x02
    4214:	93 81       	ldd	r25, Z+3	; 0x03
    4216:	44 e0       	ldi	r20, 0x04	; 4
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	08 c0       	rjmp	.+16     	; 0x422c <vfprintf+0x29e>
    421c:	f5 01       	movw	r30, r10
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	bc 01       	movw	r22, r24
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	42 e0       	ldi	r20, 0x02	; 2
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	a4 0e       	add	r10, r20
    422e:	b5 1e       	adc	r11, r21
    4230:	a1 01       	movw	r20, r2
    4232:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__ultoa_invert>
    4236:	d8 2e       	mov	r13, r24
    4238:	d2 18       	sub	r13, r2
    423a:	8f e7       	ldi	r24, 0x7F	; 127
    423c:	f8 2e       	mov	r15, r24
    423e:	f1 22       	and	r15, r17
    4240:	f6 fe       	sbrs	r15, 6
    4242:	0b c0       	rjmp	.+22     	; 0x425a <vfprintf+0x2cc>
    4244:	5e ef       	ldi	r21, 0xFE	; 254
    4246:	f5 22       	and	r15, r21
    4248:	d9 14       	cp	r13, r9
    424a:	38 f4       	brcc	.+14     	; 0x425a <vfprintf+0x2cc>
    424c:	f4 fe       	sbrs	r15, 4
    424e:	07 c0       	rjmp	.+14     	; 0x425e <vfprintf+0x2d0>
    4250:	f2 fc       	sbrc	r15, 2
    4252:	05 c0       	rjmp	.+10     	; 0x425e <vfprintf+0x2d0>
    4254:	8f ee       	ldi	r24, 0xEF	; 239
    4256:	f8 22       	and	r15, r24
    4258:	02 c0       	rjmp	.+4      	; 0x425e <vfprintf+0x2d0>
    425a:	1d 2d       	mov	r17, r13
    425c:	01 c0       	rjmp	.+2      	; 0x4260 <vfprintf+0x2d2>
    425e:	19 2d       	mov	r17, r9
    4260:	f4 fe       	sbrs	r15, 4
    4262:	0d c0       	rjmp	.+26     	; 0x427e <vfprintf+0x2f0>
    4264:	fe 01       	movw	r30, r28
    4266:	ed 0d       	add	r30, r13
    4268:	f1 1d       	adc	r31, r1
    426a:	80 81       	ld	r24, Z
    426c:	80 33       	cpi	r24, 0x30	; 48
    426e:	19 f4       	brne	.+6      	; 0x4276 <vfprintf+0x2e8>
    4270:	99 ee       	ldi	r25, 0xE9	; 233
    4272:	f9 22       	and	r15, r25
    4274:	08 c0       	rjmp	.+16     	; 0x4286 <vfprintf+0x2f8>
    4276:	1f 5f       	subi	r17, 0xFF	; 255
    4278:	f2 fe       	sbrs	r15, 2
    427a:	05 c0       	rjmp	.+10     	; 0x4286 <vfprintf+0x2f8>
    427c:	03 c0       	rjmp	.+6      	; 0x4284 <vfprintf+0x2f6>
    427e:	8f 2d       	mov	r24, r15
    4280:	86 78       	andi	r24, 0x86	; 134
    4282:	09 f0       	breq	.+2      	; 0x4286 <vfprintf+0x2f8>
    4284:	1f 5f       	subi	r17, 0xFF	; 255
    4286:	0f 2d       	mov	r16, r15
    4288:	f3 fc       	sbrc	r15, 3
    428a:	14 c0       	rjmp	.+40     	; 0x42b4 <vfprintf+0x326>
    428c:	f0 fe       	sbrs	r15, 0
    428e:	0f c0       	rjmp	.+30     	; 0x42ae <vfprintf+0x320>
    4290:	1e 15       	cp	r17, r14
    4292:	10 f0       	brcs	.+4      	; 0x4298 <vfprintf+0x30a>
    4294:	9d 2c       	mov	r9, r13
    4296:	0b c0       	rjmp	.+22     	; 0x42ae <vfprintf+0x320>
    4298:	9d 2c       	mov	r9, r13
    429a:	9e 0c       	add	r9, r14
    429c:	91 1a       	sub	r9, r17
    429e:	1e 2d       	mov	r17, r14
    42a0:	06 c0       	rjmp	.+12     	; 0x42ae <vfprintf+0x320>
    42a2:	80 e2       	ldi	r24, 0x20	; 32
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	b3 01       	movw	r22, r6
    42a8:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    42ac:	1f 5f       	subi	r17, 0xFF	; 255
    42ae:	1e 15       	cp	r17, r14
    42b0:	c0 f3       	brcs	.-16     	; 0x42a2 <vfprintf+0x314>
    42b2:	04 c0       	rjmp	.+8      	; 0x42bc <vfprintf+0x32e>
    42b4:	1e 15       	cp	r17, r14
    42b6:	10 f4       	brcc	.+4      	; 0x42bc <vfprintf+0x32e>
    42b8:	e1 1a       	sub	r14, r17
    42ba:	01 c0       	rjmp	.+2      	; 0x42be <vfprintf+0x330>
    42bc:	ee 24       	eor	r14, r14
    42be:	04 ff       	sbrs	r16, 4
    42c0:	0f c0       	rjmp	.+30     	; 0x42e0 <vfprintf+0x352>
    42c2:	80 e3       	ldi	r24, 0x30	; 48
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	b3 01       	movw	r22, r6
    42c8:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    42cc:	02 ff       	sbrs	r16, 2
    42ce:	1d c0       	rjmp	.+58     	; 0x430a <vfprintf+0x37c>
    42d0:	01 fd       	sbrc	r16, 1
    42d2:	03 c0       	rjmp	.+6      	; 0x42da <vfprintf+0x34c>
    42d4:	88 e7       	ldi	r24, 0x78	; 120
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e c0       	rjmp	.+28     	; 0x42f6 <vfprintf+0x368>
    42da:	88 e5       	ldi	r24, 0x58	; 88
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0b c0       	rjmp	.+22     	; 0x42f6 <vfprintf+0x368>
    42e0:	80 2f       	mov	r24, r16
    42e2:	86 78       	andi	r24, 0x86	; 134
    42e4:	91 f0       	breq	.+36     	; 0x430a <vfprintf+0x37c>
    42e6:	01 ff       	sbrs	r16, 1
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <vfprintf+0x360>
    42ea:	8b e2       	ldi	r24, 0x2B	; 43
    42ec:	01 c0       	rjmp	.+2      	; 0x42f0 <vfprintf+0x362>
    42ee:	80 e2       	ldi	r24, 0x20	; 32
    42f0:	f7 fc       	sbrc	r15, 7
    42f2:	8d e2       	ldi	r24, 0x2D	; 45
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	b3 01       	movw	r22, r6
    42f8:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    42fc:	06 c0       	rjmp	.+12     	; 0x430a <vfprintf+0x37c>
    42fe:	80 e3       	ldi	r24, 0x30	; 48
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	b3 01       	movw	r22, r6
    4304:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    4308:	9a 94       	dec	r9
    430a:	d9 14       	cp	r13, r9
    430c:	c0 f3       	brcs	.-16     	; 0x42fe <vfprintf+0x370>
    430e:	da 94       	dec	r13
    4310:	f1 01       	movw	r30, r2
    4312:	ed 0d       	add	r30, r13
    4314:	f1 1d       	adc	r31, r1
    4316:	80 81       	ld	r24, Z
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	b3 01       	movw	r22, r6
    431c:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    4320:	dd 20       	and	r13, r13
    4322:	a9 f7       	brne	.-22     	; 0x430e <vfprintf+0x380>
    4324:	06 c0       	rjmp	.+12     	; 0x4332 <vfprintf+0x3a4>
    4326:	80 e2       	ldi	r24, 0x20	; 32
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	b3 01       	movw	r22, r6
    432c:	0e 94 ba 21 	call	0x4374	; 0x4374 <fputc>
    4330:	ea 94       	dec	r14
    4332:	ee 20       	and	r14, r14
    4334:	c1 f7       	brne	.-16     	; 0x4326 <vfprintf+0x398>
    4336:	43 ce       	rjmp	.-890    	; 0x3fbe <vfprintf+0x30>
    4338:	f3 01       	movw	r30, r6
    433a:	66 81       	ldd	r22, Z+6	; 0x06
    433c:	77 81       	ldd	r23, Z+7	; 0x07
    433e:	cb 01       	movw	r24, r22
    4340:	2b 96       	adiw	r28, 0x0b	; 11
    4342:	e2 e1       	ldi	r30, 0x12	; 18
    4344:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__epilogue_restores__>

00004348 <strnlen_P>:
    4348:	fc 01       	movw	r30, r24
    434a:	05 90       	lpm	r0, Z+
    434c:	61 50       	subi	r22, 0x01	; 1
    434e:	70 40       	sbci	r23, 0x00	; 0
    4350:	01 10       	cpse	r0, r1
    4352:	d8 f7       	brcc	.-10     	; 0x434a <strnlen_P+0x2>
    4354:	80 95       	com	r24
    4356:	90 95       	com	r25
    4358:	8e 0f       	add	r24, r30
    435a:	9f 1f       	adc	r25, r31
    435c:	08 95       	ret

0000435e <strnlen>:
    435e:	fc 01       	movw	r30, r24
    4360:	61 50       	subi	r22, 0x01	; 1
    4362:	70 40       	sbci	r23, 0x00	; 0
    4364:	01 90       	ld	r0, Z+
    4366:	01 10       	cpse	r0, r1
    4368:	d8 f7       	brcc	.-10     	; 0x4360 <strnlen+0x2>
    436a:	80 95       	com	r24
    436c:	90 95       	com	r25
    436e:	8e 0f       	add	r24, r30
    4370:	9f 1f       	adc	r25, r31
    4372:	08 95       	ret

00004374 <fputc>:
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	8c 01       	movw	r16, r24
    437e:	eb 01       	movw	r28, r22
    4380:	8b 81       	ldd	r24, Y+3	; 0x03
    4382:	81 ff       	sbrs	r24, 1
    4384:	1b c0       	rjmp	.+54     	; 0x43bc <fputc+0x48>
    4386:	82 ff       	sbrs	r24, 2
    4388:	0d c0       	rjmp	.+26     	; 0x43a4 <fputc+0x30>
    438a:	2e 81       	ldd	r18, Y+6	; 0x06
    438c:	3f 81       	ldd	r19, Y+7	; 0x07
    438e:	8c 81       	ldd	r24, Y+4	; 0x04
    4390:	9d 81       	ldd	r25, Y+5	; 0x05
    4392:	28 17       	cp	r18, r24
    4394:	39 07       	cpc	r19, r25
    4396:	64 f4       	brge	.+24     	; 0x43b0 <fputc+0x3c>
    4398:	e8 81       	ld	r30, Y
    439a:	f9 81       	ldd	r31, Y+1	; 0x01
    439c:	01 93       	st	Z+, r16
    439e:	f9 83       	std	Y+1, r31	; 0x01
    43a0:	e8 83       	st	Y, r30
    43a2:	06 c0       	rjmp	.+12     	; 0x43b0 <fputc+0x3c>
    43a4:	e8 85       	ldd	r30, Y+8	; 0x08
    43a6:	f9 85       	ldd	r31, Y+9	; 0x09
    43a8:	80 2f       	mov	r24, r16
    43aa:	09 95       	icall
    43ac:	89 2b       	or	r24, r25
    43ae:	31 f4       	brne	.+12     	; 0x43bc <fputc+0x48>
    43b0:	8e 81       	ldd	r24, Y+6	; 0x06
    43b2:	9f 81       	ldd	r25, Y+7	; 0x07
    43b4:	01 96       	adiw	r24, 0x01	; 1
    43b6:	9f 83       	std	Y+7, r25	; 0x07
    43b8:	8e 83       	std	Y+6, r24	; 0x06
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <fputc+0x4c>
    43bc:	0f ef       	ldi	r16, 0xFF	; 255
    43be:	1f ef       	ldi	r17, 0xFF	; 255
    43c0:	c8 01       	movw	r24, r16
    43c2:	df 91       	pop	r29
    43c4:	cf 91       	pop	r28
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	08 95       	ret

000043cc <__ultoa_invert>:
    43cc:	fa 01       	movw	r30, r20
    43ce:	aa 27       	eor	r26, r26
    43d0:	28 30       	cpi	r18, 0x08	; 8
    43d2:	51 f1       	breq	.+84     	; 0x4428 <__ultoa_invert+0x5c>
    43d4:	20 31       	cpi	r18, 0x10	; 16
    43d6:	81 f1       	breq	.+96     	; 0x4438 <__ultoa_invert+0x6c>
    43d8:	e8 94       	clt
    43da:	6f 93       	push	r22
    43dc:	6e 7f       	andi	r22, 0xFE	; 254
    43de:	6e 5f       	subi	r22, 0xFE	; 254
    43e0:	7f 4f       	sbci	r23, 0xFF	; 255
    43e2:	8f 4f       	sbci	r24, 0xFF	; 255
    43e4:	9f 4f       	sbci	r25, 0xFF	; 255
    43e6:	af 4f       	sbci	r26, 0xFF	; 255
    43e8:	b1 e0       	ldi	r27, 0x01	; 1
    43ea:	3e d0       	rcall	.+124    	; 0x4468 <__ultoa_invert+0x9c>
    43ec:	b4 e0       	ldi	r27, 0x04	; 4
    43ee:	3c d0       	rcall	.+120    	; 0x4468 <__ultoa_invert+0x9c>
    43f0:	67 0f       	add	r22, r23
    43f2:	78 1f       	adc	r23, r24
    43f4:	89 1f       	adc	r24, r25
    43f6:	9a 1f       	adc	r25, r26
    43f8:	a1 1d       	adc	r26, r1
    43fa:	68 0f       	add	r22, r24
    43fc:	79 1f       	adc	r23, r25
    43fe:	8a 1f       	adc	r24, r26
    4400:	91 1d       	adc	r25, r1
    4402:	a1 1d       	adc	r26, r1
    4404:	6a 0f       	add	r22, r26
    4406:	71 1d       	adc	r23, r1
    4408:	81 1d       	adc	r24, r1
    440a:	91 1d       	adc	r25, r1
    440c:	a1 1d       	adc	r26, r1
    440e:	20 d0       	rcall	.+64     	; 0x4450 <__ultoa_invert+0x84>
    4410:	09 f4       	brne	.+2      	; 0x4414 <__ultoa_invert+0x48>
    4412:	68 94       	set
    4414:	3f 91       	pop	r19
    4416:	2a e0       	ldi	r18, 0x0A	; 10
    4418:	26 9f       	mul	r18, r22
    441a:	11 24       	eor	r1, r1
    441c:	30 19       	sub	r19, r0
    441e:	30 5d       	subi	r19, 0xD0	; 208
    4420:	31 93       	st	Z+, r19
    4422:	de f6       	brtc	.-74     	; 0x43da <__ultoa_invert+0xe>
    4424:	cf 01       	movw	r24, r30
    4426:	08 95       	ret
    4428:	46 2f       	mov	r20, r22
    442a:	47 70       	andi	r20, 0x07	; 7
    442c:	40 5d       	subi	r20, 0xD0	; 208
    442e:	41 93       	st	Z+, r20
    4430:	b3 e0       	ldi	r27, 0x03	; 3
    4432:	0f d0       	rcall	.+30     	; 0x4452 <__ultoa_invert+0x86>
    4434:	c9 f7       	brne	.-14     	; 0x4428 <__ultoa_invert+0x5c>
    4436:	f6 cf       	rjmp	.-20     	; 0x4424 <__ultoa_invert+0x58>
    4438:	46 2f       	mov	r20, r22
    443a:	4f 70       	andi	r20, 0x0F	; 15
    443c:	40 5d       	subi	r20, 0xD0	; 208
    443e:	4a 33       	cpi	r20, 0x3A	; 58
    4440:	18 f0       	brcs	.+6      	; 0x4448 <__ultoa_invert+0x7c>
    4442:	49 5d       	subi	r20, 0xD9	; 217
    4444:	31 fd       	sbrc	r19, 1
    4446:	40 52       	subi	r20, 0x20	; 32
    4448:	41 93       	st	Z+, r20
    444a:	02 d0       	rcall	.+4      	; 0x4450 <__ultoa_invert+0x84>
    444c:	a9 f7       	brne	.-22     	; 0x4438 <__ultoa_invert+0x6c>
    444e:	ea cf       	rjmp	.-44     	; 0x4424 <__ultoa_invert+0x58>
    4450:	b4 e0       	ldi	r27, 0x04	; 4
    4452:	a6 95       	lsr	r26
    4454:	97 95       	ror	r25
    4456:	87 95       	ror	r24
    4458:	77 95       	ror	r23
    445a:	67 95       	ror	r22
    445c:	ba 95       	dec	r27
    445e:	c9 f7       	brne	.-14     	; 0x4452 <__ultoa_invert+0x86>
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	61 05       	cpc	r22, r1
    4464:	71 05       	cpc	r23, r1
    4466:	08 95       	ret
    4468:	9b 01       	movw	r18, r22
    446a:	ac 01       	movw	r20, r24
    446c:	0a 2e       	mov	r0, r26
    446e:	06 94       	lsr	r0
    4470:	57 95       	ror	r21
    4472:	47 95       	ror	r20
    4474:	37 95       	ror	r19
    4476:	27 95       	ror	r18
    4478:	ba 95       	dec	r27
    447a:	c9 f7       	brne	.-14     	; 0x446e <__ultoa_invert+0xa2>
    447c:	62 0f       	add	r22, r18
    447e:	73 1f       	adc	r23, r19
    4480:	84 1f       	adc	r24, r20
    4482:	95 1f       	adc	r25, r21
    4484:	a0 1d       	adc	r26, r0
    4486:	08 95       	ret

00004488 <_exit>:
    4488:	f8 94       	cli

0000448a <__stop_program>:
    448a:	ff cf       	rjmp	.-2      	; 0x448a <__stop_program>
